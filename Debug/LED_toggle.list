
LED_toggle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d38  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08005f84  08005f84  00006f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fc0  08005fc0  00007028  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005fc0  08005fc0  00006fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fc8  08005fc8  00007028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fc8  08005fc8  00006fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005fcc  08005fcc  00006fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  08005fd0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000028  08005ff8  00007028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08005ff8  000070f8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00007028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e1a2  00000000  00000000  0000705e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ba9  00000000  00000000  00015200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  00016db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000894  00000000  00000000  000178e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030834  00000000  00000000  0001817c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef54  00000000  00000000  000489b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00131ff1  00000000  00000000  00057904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001898f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002da4  00000000  00000000  00189938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0018c6dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000028 	.word	0x20000028
 8000268:	00000000 	.word	0x00000000
 800026c:	08005f6c 	.word	0x08005f6c

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	2000002c 	.word	0x2000002c
 8000288:	08005f6c 	.word	0x08005f6c

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b9b0 	b.w	8000604 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002c2:	4688      	mov	r8, r1
 80002c4:	4604      	mov	r4, r0
 80002c6:	468e      	mov	lr, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14a      	bne.n	8000362 <__udivmoddi4+0xa6>
 80002cc:	428a      	cmp	r2, r1
 80002ce:	4617      	mov	r7, r2
 80002d0:	d95f      	bls.n	8000392 <__udivmoddi4+0xd6>
 80002d2:	fab2 f682 	clz	r6, r2
 80002d6:	b14e      	cbz	r6, 80002ec <__udivmoddi4+0x30>
 80002d8:	f1c6 0320 	rsb	r3, r6, #32
 80002dc:	fa01 fe06 	lsl.w	lr, r1, r6
 80002e0:	40b7      	lsls	r7, r6
 80002e2:	40b4      	lsls	r4, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	ea43 0e0e 	orr.w	lr, r3, lr
 80002ec:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f0:	fa1f fc87 	uxth.w	ip, r7
 80002f4:	0c23      	lsrs	r3, r4, #16
 80002f6:	fbbe f1f8 	udiv	r1, lr, r8
 80002fa:	fb08 ee11 	mls	lr, r8, r1, lr
 80002fe:	fb01 f20c 	mul.w	r2, r1, ip
 8000302:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000306:	429a      	cmp	r2, r3
 8000308:	d907      	bls.n	800031a <__udivmoddi4+0x5e>
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x5c>
 8000312:	429a      	cmp	r2, r3
 8000314:	f200 8154 	bhi.w	80005c0 <__udivmoddi4+0x304>
 8000318:	4601      	mov	r1, r0
 800031a:	1a9b      	subs	r3, r3, r2
 800031c:	b2a2      	uxth	r2, r4
 800031e:	fbb3 f0f8 	udiv	r0, r3, r8
 8000322:	fb08 3310 	mls	r3, r8, r0, r3
 8000326:	fb00 fc0c 	mul.w	ip, r0, ip
 800032a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800032e:	4594      	cmp	ip, r2
 8000330:	d90b      	bls.n	800034a <__udivmoddi4+0x8e>
 8000332:	18ba      	adds	r2, r7, r2
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295
 8000338:	bf2c      	ite	cs
 800033a:	2401      	movcs	r4, #1
 800033c:	2400      	movcc	r4, #0
 800033e:	4594      	cmp	ip, r2
 8000340:	d902      	bls.n	8000348 <__udivmoddi4+0x8c>
 8000342:	2c00      	cmp	r4, #0
 8000344:	f000 813f 	beq.w	80005c6 <__udivmoddi4+0x30a>
 8000348:	4618      	mov	r0, r3
 800034a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034e:	eba2 020c 	sub.w	r2, r2, ip
 8000352:	2100      	movs	r1, #0
 8000354:	b11d      	cbz	r5, 800035e <__udivmoddi4+0xa2>
 8000356:	40f2      	lsrs	r2, r6
 8000358:	2300      	movs	r3, #0
 800035a:	e9c5 2300 	strd	r2, r3, [r5]
 800035e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000362:	428b      	cmp	r3, r1
 8000364:	d905      	bls.n	8000372 <__udivmoddi4+0xb6>
 8000366:	b10d      	cbz	r5, 800036c <__udivmoddi4+0xb0>
 8000368:	e9c5 0100 	strd	r0, r1, [r5]
 800036c:	2100      	movs	r1, #0
 800036e:	4608      	mov	r0, r1
 8000370:	e7f5      	b.n	800035e <__udivmoddi4+0xa2>
 8000372:	fab3 f183 	clz	r1, r3
 8000376:	2900      	cmp	r1, #0
 8000378:	d14e      	bne.n	8000418 <__udivmoddi4+0x15c>
 800037a:	4543      	cmp	r3, r8
 800037c:	f0c0 8112 	bcc.w	80005a4 <__udivmoddi4+0x2e8>
 8000380:	4282      	cmp	r2, r0
 8000382:	f240 810f 	bls.w	80005a4 <__udivmoddi4+0x2e8>
 8000386:	4608      	mov	r0, r1
 8000388:	2d00      	cmp	r5, #0
 800038a:	d0e8      	beq.n	800035e <__udivmoddi4+0xa2>
 800038c:	e9c5 4e00 	strd	r4, lr, [r5]
 8000390:	e7e5      	b.n	800035e <__udivmoddi4+0xa2>
 8000392:	2a00      	cmp	r2, #0
 8000394:	f000 80ac 	beq.w	80004f0 <__udivmoddi4+0x234>
 8000398:	fab2 f682 	clz	r6, r2
 800039c:	2e00      	cmp	r6, #0
 800039e:	f040 80bb 	bne.w	8000518 <__udivmoddi4+0x25c>
 80003a2:	1a8b      	subs	r3, r1, r2
 80003a4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003a8:	b2bc      	uxth	r4, r7
 80003aa:	2101      	movs	r1, #1
 80003ac:	0c02      	lsrs	r2, r0, #16
 80003ae:	b280      	uxth	r0, r0
 80003b0:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003bc:	fb04 f20c 	mul.w	r2, r4, ip
 80003c0:	429a      	cmp	r2, r3
 80003c2:	d90e      	bls.n	80003e2 <__udivmoddi4+0x126>
 80003c4:	18fb      	adds	r3, r7, r3
 80003c6:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003ca:	bf2c      	ite	cs
 80003cc:	f04f 0901 	movcs.w	r9, #1
 80003d0:	f04f 0900 	movcc.w	r9, #0
 80003d4:	429a      	cmp	r2, r3
 80003d6:	d903      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003d8:	f1b9 0f00 	cmp.w	r9, #0
 80003dc:	f000 80ec 	beq.w	80005b8 <__udivmoddi4+0x2fc>
 80003e0:	46c4      	mov	ip, r8
 80003e2:	1a9b      	subs	r3, r3, r2
 80003e4:	fbb3 f8fe 	udiv	r8, r3, lr
 80003e8:	fb0e 3318 	mls	r3, lr, r8, r3
 80003ec:	fb04 f408 	mul.w	r4, r4, r8
 80003f0:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 80003f4:	4294      	cmp	r4, r2
 80003f6:	d90b      	bls.n	8000410 <__udivmoddi4+0x154>
 80003f8:	18ba      	adds	r2, r7, r2
 80003fa:	f108 33ff 	add.w	r3, r8, #4294967295
 80003fe:	bf2c      	ite	cs
 8000400:	2001      	movcs	r0, #1
 8000402:	2000      	movcc	r0, #0
 8000404:	4294      	cmp	r4, r2
 8000406:	d902      	bls.n	800040e <__udivmoddi4+0x152>
 8000408:	2800      	cmp	r0, #0
 800040a:	f000 80d1 	beq.w	80005b0 <__udivmoddi4+0x2f4>
 800040e:	4698      	mov	r8, r3
 8000410:	1b12      	subs	r2, r2, r4
 8000412:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000416:	e79d      	b.n	8000354 <__udivmoddi4+0x98>
 8000418:	f1c1 0620 	rsb	r6, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa08 f401 	lsl.w	r4, r8, r1
 8000422:	fa00 f901 	lsl.w	r9, r0, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	fa28 f806 	lsr.w	r8, r8, r6
 800042e:	408a      	lsls	r2, r1
 8000430:	431f      	orrs	r7, r3
 8000432:	fa20 f306 	lsr.w	r3, r0, r6
 8000436:	0c38      	lsrs	r0, r7, #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa1f fc87 	uxth.w	ip, r7
 800043e:	0c1c      	lsrs	r4, r3, #16
 8000440:	fbb8 fef0 	udiv	lr, r8, r0
 8000444:	fb00 881e 	mls	r8, r0, lr, r8
 8000448:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 800044c:	fb0e f80c 	mul.w	r8, lr, ip
 8000450:	45a0      	cmp	r8, r4
 8000452:	d90e      	bls.n	8000472 <__udivmoddi4+0x1b6>
 8000454:	193c      	adds	r4, r7, r4
 8000456:	f10e 3aff 	add.w	sl, lr, #4294967295
 800045a:	bf2c      	ite	cs
 800045c:	f04f 0b01 	movcs.w	fp, #1
 8000460:	f04f 0b00 	movcc.w	fp, #0
 8000464:	45a0      	cmp	r8, r4
 8000466:	d903      	bls.n	8000470 <__udivmoddi4+0x1b4>
 8000468:	f1bb 0f00 	cmp.w	fp, #0
 800046c:	f000 80b8 	beq.w	80005e0 <__udivmoddi4+0x324>
 8000470:	46d6      	mov	lr, sl
 8000472:	eba4 0408 	sub.w	r4, r4, r8
 8000476:	fa1f f883 	uxth.w	r8, r3
 800047a:	fbb4 f3f0 	udiv	r3, r4, r0
 800047e:	fb00 4413 	mls	r4, r0, r3, r4
 8000482:	fb03 fc0c 	mul.w	ip, r3, ip
 8000486:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 800048a:	45a4      	cmp	ip, r4
 800048c:	d90e      	bls.n	80004ac <__udivmoddi4+0x1f0>
 800048e:	193c      	adds	r4, r7, r4
 8000490:	f103 30ff 	add.w	r0, r3, #4294967295
 8000494:	bf2c      	ite	cs
 8000496:	f04f 0801 	movcs.w	r8, #1
 800049a:	f04f 0800 	movcc.w	r8, #0
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d903      	bls.n	80004aa <__udivmoddi4+0x1ee>
 80004a2:	f1b8 0f00 	cmp.w	r8, #0
 80004a6:	f000 809f 	beq.w	80005e8 <__udivmoddi4+0x32c>
 80004aa:	4603      	mov	r3, r0
 80004ac:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b0:	eba4 040c 	sub.w	r4, r4, ip
 80004b4:	fba0 ec02 	umull	lr, ip, r0, r2
 80004b8:	4564      	cmp	r4, ip
 80004ba:	4673      	mov	r3, lr
 80004bc:	46e0      	mov	r8, ip
 80004be:	d302      	bcc.n	80004c6 <__udivmoddi4+0x20a>
 80004c0:	d107      	bne.n	80004d2 <__udivmoddi4+0x216>
 80004c2:	45f1      	cmp	r9, lr
 80004c4:	d205      	bcs.n	80004d2 <__udivmoddi4+0x216>
 80004c6:	ebbe 0302 	subs.w	r3, lr, r2
 80004ca:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ce:	3801      	subs	r0, #1
 80004d0:	46e0      	mov	r8, ip
 80004d2:	b15d      	cbz	r5, 80004ec <__udivmoddi4+0x230>
 80004d4:	ebb9 0203 	subs.w	r2, r9, r3
 80004d8:	eb64 0408 	sbc.w	r4, r4, r8
 80004dc:	fa04 f606 	lsl.w	r6, r4, r6
 80004e0:	fa22 f301 	lsr.w	r3, r2, r1
 80004e4:	40cc      	lsrs	r4, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	e9c5 6400 	strd	r6, r4, [r5]
 80004ec:	2100      	movs	r1, #0
 80004ee:	e736      	b.n	800035e <__udivmoddi4+0xa2>
 80004f0:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f4:	0c01      	lsrs	r1, r0, #16
 80004f6:	4614      	mov	r4, r2
 80004f8:	b280      	uxth	r0, r0
 80004fa:	4696      	mov	lr, r2
 80004fc:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000500:	2620      	movs	r6, #32
 8000502:	4690      	mov	r8, r2
 8000504:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000508:	4610      	mov	r0, r2
 800050a:	fbb1 f1f2 	udiv	r1, r1, r2
 800050e:	eba3 0308 	sub.w	r3, r3, r8
 8000512:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000516:	e74b      	b.n	80003b0 <__udivmoddi4+0xf4>
 8000518:	40b7      	lsls	r7, r6
 800051a:	f1c6 0320 	rsb	r3, r6, #32
 800051e:	fa01 f206 	lsl.w	r2, r1, r6
 8000522:	fa21 f803 	lsr.w	r8, r1, r3
 8000526:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800052a:	fa20 f303 	lsr.w	r3, r0, r3
 800052e:	b2bc      	uxth	r4, r7
 8000530:	40b0      	lsls	r0, r6
 8000532:	4313      	orrs	r3, r2
 8000534:	0c02      	lsrs	r2, r0, #16
 8000536:	0c19      	lsrs	r1, r3, #16
 8000538:	b280      	uxth	r0, r0
 800053a:	fbb8 f9fe 	udiv	r9, r8, lr
 800053e:	fb0e 8819 	mls	r8, lr, r9, r8
 8000542:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000546:	fb09 f804 	mul.w	r8, r9, r4
 800054a:	4588      	cmp	r8, r1
 800054c:	d951      	bls.n	80005f2 <__udivmoddi4+0x336>
 800054e:	1879      	adds	r1, r7, r1
 8000550:	f109 3cff 	add.w	ip, r9, #4294967295
 8000554:	bf2c      	ite	cs
 8000556:	f04f 0a01 	movcs.w	sl, #1
 800055a:	f04f 0a00 	movcc.w	sl, #0
 800055e:	4588      	cmp	r8, r1
 8000560:	d902      	bls.n	8000568 <__udivmoddi4+0x2ac>
 8000562:	f1ba 0f00 	cmp.w	sl, #0
 8000566:	d031      	beq.n	80005cc <__udivmoddi4+0x310>
 8000568:	eba1 0108 	sub.w	r1, r1, r8
 800056c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000570:	fb09 f804 	mul.w	r8, r9, r4
 8000574:	fb0e 1119 	mls	r1, lr, r9, r1
 8000578:	b29b      	uxth	r3, r3
 800057a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800057e:	4543      	cmp	r3, r8
 8000580:	d235      	bcs.n	80005ee <__udivmoddi4+0x332>
 8000582:	18fb      	adds	r3, r7, r3
 8000584:	f109 31ff 	add.w	r1, r9, #4294967295
 8000588:	bf2c      	ite	cs
 800058a:	f04f 0a01 	movcs.w	sl, #1
 800058e:	f04f 0a00 	movcc.w	sl, #0
 8000592:	4543      	cmp	r3, r8
 8000594:	d2bb      	bcs.n	800050e <__udivmoddi4+0x252>
 8000596:	f1ba 0f00 	cmp.w	sl, #0
 800059a:	d1b8      	bne.n	800050e <__udivmoddi4+0x252>
 800059c:	f1a9 0102 	sub.w	r1, r9, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e7b4      	b.n	800050e <__udivmoddi4+0x252>
 80005a4:	1a84      	subs	r4, r0, r2
 80005a6:	eb68 0203 	sbc.w	r2, r8, r3
 80005aa:	2001      	movs	r0, #1
 80005ac:	4696      	mov	lr, r2
 80005ae:	e6eb      	b.n	8000388 <__udivmoddi4+0xcc>
 80005b0:	443a      	add	r2, r7
 80005b2:	f1a8 0802 	sub.w	r8, r8, #2
 80005b6:	e72b      	b.n	8000410 <__udivmoddi4+0x154>
 80005b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80005bc:	443b      	add	r3, r7
 80005be:	e710      	b.n	80003e2 <__udivmoddi4+0x126>
 80005c0:	3902      	subs	r1, #2
 80005c2:	443b      	add	r3, r7
 80005c4:	e6a9      	b.n	800031a <__udivmoddi4+0x5e>
 80005c6:	443a      	add	r2, r7
 80005c8:	3802      	subs	r0, #2
 80005ca:	e6be      	b.n	800034a <__udivmoddi4+0x8e>
 80005cc:	eba7 0808 	sub.w	r8, r7, r8
 80005d0:	f1a9 0c02 	sub.w	ip, r9, #2
 80005d4:	4441      	add	r1, r8
 80005d6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005da:	fb09 f804 	mul.w	r8, r9, r4
 80005de:	e7c9      	b.n	8000574 <__udivmoddi4+0x2b8>
 80005e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80005e4:	443c      	add	r4, r7
 80005e6:	e744      	b.n	8000472 <__udivmoddi4+0x1b6>
 80005e8:	3b02      	subs	r3, #2
 80005ea:	443c      	add	r4, r7
 80005ec:	e75e      	b.n	80004ac <__udivmoddi4+0x1f0>
 80005ee:	4649      	mov	r1, r9
 80005f0:	e78d      	b.n	800050e <__udivmoddi4+0x252>
 80005f2:	eba1 0108 	sub.w	r1, r1, r8
 80005f6:	46cc      	mov	ip, r9
 80005f8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fc:	fb09 f804 	mul.w	r8, r9, r4
 8000600:	e7b8      	b.n	8000574 <__udivmoddi4+0x2b8>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f000 fc68 	bl	8000ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f836 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 f8a4 	bl	8000760 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000618:	2000      	movs	r0, #0
 800061a:	f000 fa8d 	bl	8000b38 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 800061e:	2001      	movs	r0, #1
 8000620:	f000 fa8a 	bl	8000b38 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000624:	2002      	movs	r0, #2
 8000626:	f000 fa87 	bl	8000b38 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800062a:	2101      	movs	r1, #1
 800062c:	2000      	movs	r0, #0
 800062e:	f000 faf9 	bl	8000c24 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000632:	4b11      	ldr	r3, [pc, #68]	@ (8000678 <main+0x70>)
 8000634:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000638:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800063a:	4b0f      	ldr	r3, [pc, #60]	@ (8000678 <main+0x70>)
 800063c:	2200      	movs	r2, #0
 800063e:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000640:	4b0d      	ldr	r3, [pc, #52]	@ (8000678 <main+0x70>)
 8000642:	2200      	movs	r2, #0
 8000644:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000646:	4b0c      	ldr	r3, [pc, #48]	@ (8000678 <main+0x70>)
 8000648:	2200      	movs	r2, #0
 800064a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800064c:	4b0a      	ldr	r3, [pc, #40]	@ (8000678 <main+0x70>)
 800064e:	2200      	movs	r2, #0
 8000650:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000652:	4909      	ldr	r1, [pc, #36]	@ (8000678 <main+0x70>)
 8000654:	2000      	movs	r0, #0
 8000656:	f000 fb7f 	bl	8000d58 <BSP_COM_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <main+0x5c>
  {
    Error_Handler();
 8000660:	f000 f982 	bl	8000968 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000664:	2101      	movs	r1, #1
 8000666:	4805      	ldr	r0, [pc, #20]	@ (800067c <main+0x74>)
 8000668:	f001 f8aa 	bl	80017c0 <HAL_GPIO_TogglePin>
	  HAL_Delay(300);
 800066c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000670:	f000 fcf4 	bl	800105c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000674:	bf00      	nop
 8000676:	e7f5      	b.n	8000664 <main+0x5c>
 8000678:	20000044 	.word	0x20000044
 800067c:	42020400 	.word	0x42020400

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b09c      	sub	sp, #112	@ 0x70
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0320 	add.w	r3, r7, #32
 800068a:	2250      	movs	r2, #80	@ 0x50
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f005 fc3f 	bl	8005f12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	f107 0308 	add.w	r3, r7, #8
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]
 80006a4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006a6:	4b2c      	ldr	r3, [pc, #176]	@ (8000758 <SystemClock_Config+0xd8>)
 80006a8:	691b      	ldr	r3, [r3, #16]
 80006aa:	4a2b      	ldr	r2, [pc, #172]	@ (8000758 <SystemClock_Config+0xd8>)
 80006ac:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80006b0:	6113      	str	r3, [r2, #16]
 80006b2:	4b29      	ldr	r3, [pc, #164]	@ (8000758 <SystemClock_Config+0xd8>)
 80006b4:	691b      	ldr	r3, [r3, #16]
 80006b6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006be:	bf00      	nop
 80006c0:	4b25      	ldr	r3, [pc, #148]	@ (8000758 <SystemClock_Config+0xd8>)
 80006c2:	695b      	ldr	r3, [r3, #20]
 80006c4:	f003 0308 	and.w	r3, r3, #8
 80006c8:	2b08      	cmp	r3, #8
 80006ca:	d1f9      	bne.n	80006c0 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006cc:	2301      	movs	r3, #1
 80006ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006d0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d6:	2302      	movs	r3, #2
 80006d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80006da:	2303      	movs	r3, #3
 80006dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006de:	2304      	movs	r3, #4
 80006e0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 80006e2:	23fa      	movs	r3, #250	@ 0xfa
 80006e4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006e6:	2302      	movs	r3, #2
 80006e8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006ea:	2302      	movs	r3, #2
 80006ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ee:	2302      	movs	r3, #2
 80006f0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 80006f2:	2304      	movs	r3, #4
 80006f4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80006f6:	2300      	movs	r3, #0
 80006f8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fe:	f107 0320 	add.w	r3, r7, #32
 8000702:	4618      	mov	r0, r3
 8000704:	f001 f886 	bl	8001814 <HAL_RCC_OscConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800070e:	f000 f92b 	bl	8000968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000712:	231f      	movs	r3, #31
 8000714:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000716:	2303      	movs	r3, #3
 8000718:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800072a:	f107 0308 	add.w	r3, r7, #8
 800072e:	2105      	movs	r1, #5
 8000730:	4618      	mov	r0, r3
 8000732:	f001 fca7 	bl	8002084 <HAL_RCC_ClockConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800073c:	f000 f914 	bl	8000968 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000740:	4b06      	ldr	r3, [pc, #24]	@ (800075c <SystemClock_Config+0xdc>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000748:	4a04      	ldr	r2, [pc, #16]	@ (800075c <SystemClock_Config+0xdc>)
 800074a:	f043 0320 	orr.w	r3, r3, #32
 800074e:	6013      	str	r3, [r2, #0]
}
 8000750:	bf00      	nop
 8000752:	3770      	adds	r7, #112	@ 0x70
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	44020800 	.word	0x44020800
 800075c:	40022000 	.word	0x40022000

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08c      	sub	sp, #48	@ 0x30
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000776:	4b76      	ldr	r3, [pc, #472]	@ (8000950 <MX_GPIO_Init+0x1f0>)
 8000778:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800077c:	4a74      	ldr	r2, [pc, #464]	@ (8000950 <MX_GPIO_Init+0x1f0>)
 800077e:	f043 0310 	orr.w	r3, r3, #16
 8000782:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000786:	4b72      	ldr	r3, [pc, #456]	@ (8000950 <MX_GPIO_Init+0x1f0>)
 8000788:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800078c:	f003 0310 	and.w	r3, r3, #16
 8000790:	61bb      	str	r3, [r7, #24]
 8000792:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000794:	4b6e      	ldr	r3, [pc, #440]	@ (8000950 <MX_GPIO_Init+0x1f0>)
 8000796:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800079a:	4a6d      	ldr	r2, [pc, #436]	@ (8000950 <MX_GPIO_Init+0x1f0>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007a4:	4b6a      	ldr	r3, [pc, #424]	@ (8000950 <MX_GPIO_Init+0x1f0>)
 80007a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007aa:	f003 0304 	and.w	r3, r3, #4
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b2:	4b67      	ldr	r3, [pc, #412]	@ (8000950 <MX_GPIO_Init+0x1f0>)
 80007b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007b8:	4a65      	ldr	r2, [pc, #404]	@ (8000950 <MX_GPIO_Init+0x1f0>)
 80007ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007be:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007c2:	4b63      	ldr	r3, [pc, #396]	@ (8000950 <MX_GPIO_Init+0x1f0>)
 80007c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007cc:	613b      	str	r3, [r7, #16]
 80007ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d0:	4b5f      	ldr	r3, [pc, #380]	@ (8000950 <MX_GPIO_Init+0x1f0>)
 80007d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007d6:	4a5e      	ldr	r2, [pc, #376]	@ (8000950 <MX_GPIO_Init+0x1f0>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007e0:	4b5b      	ldr	r3, [pc, #364]	@ (8000950 <MX_GPIO_Init+0x1f0>)
 80007e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	4b58      	ldr	r3, [pc, #352]	@ (8000950 <MX_GPIO_Init+0x1f0>)
 80007f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007f4:	4a56      	ldr	r2, [pc, #344]	@ (8000950 <MX_GPIO_Init+0x1f0>)
 80007f6:	f043 0302 	orr.w	r3, r3, #2
 80007fa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007fe:	4b54      	ldr	r3, [pc, #336]	@ (8000950 <MX_GPIO_Init+0x1f0>)
 8000800:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000804:	f003 0302 	and.w	r3, r3, #2
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800080c:	4b50      	ldr	r3, [pc, #320]	@ (8000950 <MX_GPIO_Init+0x1f0>)
 800080e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000812:	4a4f      	ldr	r2, [pc, #316]	@ (8000950 <MX_GPIO_Init+0x1f0>)
 8000814:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000818:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800081c:	4b4c      	ldr	r3, [pc, #304]	@ (8000950 <MX_GPIO_Init+0x1f0>)
 800081e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000822:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2101      	movs	r1, #1
 800082e:	4849      	ldr	r0, [pc, #292]	@ (8000954 <MX_GPIO_Init+0x1f4>)
 8000830:	f000 ffae 	bl	8001790 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000834:	2332      	movs	r3, #50	@ 0x32
 8000836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000838:	2302      	movs	r3, #2
 800083a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000840:	2302      	movs	r3, #2
 8000842:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000844:	230b      	movs	r3, #11
 8000846:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000848:	f107 031c 	add.w	r3, r7, #28
 800084c:	4619      	mov	r1, r3
 800084e:	4842      	ldr	r0, [pc, #264]	@ (8000958 <MX_GPIO_Init+0x1f8>)
 8000850:	f000 fe40 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000854:	2386      	movs	r3, #134	@ 0x86
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000858:	2302      	movs	r3, #2
 800085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000860:	2302      	movs	r3, #2
 8000862:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000864:	230b      	movs	r3, #11
 8000866:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	4619      	mov	r1, r3
 800086e:	483b      	ldr	r0, [pc, #236]	@ (800095c <MX_GPIO_Init+0x1fc>)
 8000870:	f000 fe30 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000874:	2301      	movs	r3, #1
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000884:	f107 031c 	add.w	r3, r7, #28
 8000888:	4619      	mov	r1, r3
 800088a:	4832      	ldr	r0, [pc, #200]	@ (8000954 <MX_GPIO_Init+0x1f4>)
 800088c:	f000 fe22 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_CC1_Pin UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD_CC1_Pin|UCPD_CC2_Pin;
 8000890:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000896:	2303      	movs	r3, #3
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	482b      	ldr	r0, [pc, #172]	@ (8000954 <MX_GPIO_Init+0x1f4>)
 80008a6:	f000 fe15 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b0:	2302      	movs	r3, #2
 80008b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008b8:	2302      	movs	r3, #2
 80008ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008bc:	230b      	movs	r3, #11
 80008be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	4823      	ldr	r0, [pc, #140]	@ (8000954 <MX_GPIO_Init+0x1f4>)
 80008c8:	f000 fe04 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 80008cc:	2380      	movs	r3, #128	@ 0x80
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008d0:	4b23      	ldr	r3, [pc, #140]	@ (8000960 <MX_GPIO_Init+0x200>)
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	4821      	ldr	r0, [pc, #132]	@ (8000964 <MX_GPIO_Init+0x204>)
 80008e0:	f000 fdf8 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80008e4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80008f6:	230a      	movs	r3, #10
 80008f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	4816      	ldr	r0, [pc, #88]	@ (800095c <MX_GPIO_Init+0x1fc>)
 8000902:	f000 fde7 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXT_EN_Pin RMI_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 8000906:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000914:	2302      	movs	r3, #2
 8000916:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000918:	230b      	movs	r3, #11
 800091a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	4810      	ldr	r0, [pc, #64]	@ (8000964 <MX_GPIO_Init+0x204>)
 8000924:	f000 fdd6 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_TX_Pin ARD_D0_RX_Pin */
  GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 8000928:	23c0      	movs	r3, #192	@ 0xc0
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000938:	2308      	movs	r3, #8
 800093a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	4804      	ldr	r0, [pc, #16]	@ (8000954 <MX_GPIO_Init+0x1f4>)
 8000944:	f000 fdc6 	bl	80014d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000948:	bf00      	nop
 800094a:	3730      	adds	r7, #48	@ 0x30
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	44020c00 	.word	0x44020c00
 8000954:	42020400 	.word	0x42020400
 8000958:	42020800 	.word	0x42020800
 800095c:	42020000 	.word	0x42020000
 8000960:	10110000 	.word	0x10110000
 8000964:	42021800 	.word	0x42021800

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096c:	b672      	cpsid	i
}
 800096e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <Error_Handler+0x8>

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END MspInit 0 */

  /* System interrupt init*/

  /* Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000978:	f000 ff3c 	bl	80017f4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}

08000980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <NMI_Handler+0x4>

08000988 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <HardFault_Handler+0x4>

08000990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <MemManage_Handler+0x4>

08000998 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <BusFault_Handler+0x4>

080009a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <UsageFault_Handler+0x4>

080009a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d6:	f000 fb21 	bl	800101c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}

080009de <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80009e2:	2000      	movs	r0, #0
 80009e4:	f000 f996 	bl	8000d14 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}

080009ec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009f2:	4b35      	ldr	r3, [pc, #212]	@ (8000ac8 <SystemInit+0xdc>)
 80009f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009f8:	4a33      	ldr	r2, [pc, #204]	@ (8000ac8 <SystemInit+0xdc>)
 80009fa:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009fe:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000a02:	4b32      	ldr	r3, [pc, #200]	@ (8000acc <SystemInit+0xe0>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000a08:	4b30      	ldr	r3, [pc, #192]	@ (8000acc <SystemInit+0xe0>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000a0e:	4b2f      	ldr	r3, [pc, #188]	@ (8000acc <SystemInit+0xe0>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000a14:	4b2d      	ldr	r3, [pc, #180]	@ (8000acc <SystemInit+0xe0>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	492c      	ldr	r1, [pc, #176]	@ (8000acc <SystemInit+0xe0>)
 8000a1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ad0 <SystemInit+0xe4>)
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000a20:	4b2a      	ldr	r3, [pc, #168]	@ (8000acc <SystemInit+0xe0>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000a26:	4b29      	ldr	r3, [pc, #164]	@ (8000acc <SystemInit+0xe0>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000a2c:	4b27      	ldr	r3, [pc, #156]	@ (8000acc <SystemInit+0xe0>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000a32:	4b26      	ldr	r3, [pc, #152]	@ (8000acc <SystemInit+0xe0>)
 8000a34:	4a27      	ldr	r2, [pc, #156]	@ (8000ad4 <SystemInit+0xe8>)
 8000a36:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000a38:	4b24      	ldr	r3, [pc, #144]	@ (8000acc <SystemInit+0xe0>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000a3e:	4b23      	ldr	r3, [pc, #140]	@ (8000acc <SystemInit+0xe0>)
 8000a40:	4a24      	ldr	r2, [pc, #144]	@ (8000ad4 <SystemInit+0xe8>)
 8000a42:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000a44:	4b21      	ldr	r3, [pc, #132]	@ (8000acc <SystemInit+0xe0>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000a4a:	4b20      	ldr	r3, [pc, #128]	@ (8000acc <SystemInit+0xe0>)
 8000a4c:	4a21      	ldr	r2, [pc, #132]	@ (8000ad4 <SystemInit+0xe8>)
 8000a4e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000a50:	4b1e      	ldr	r3, [pc, #120]	@ (8000acc <SystemInit+0xe0>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000a56:	4b1d      	ldr	r3, [pc, #116]	@ (8000acc <SystemInit+0xe0>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a1c      	ldr	r2, [pc, #112]	@ (8000acc <SystemInit+0xe0>)
 8000a5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000a60:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000a62:	4b1a      	ldr	r3, [pc, #104]	@ (8000acc <SystemInit+0xe0>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a68:	4b17      	ldr	r3, [pc, #92]	@ (8000ac8 <SystemInit+0xdc>)
 8000a6a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000a6e:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000a70:	4b19      	ldr	r3, [pc, #100]	@ (8000ad8 <SystemInit+0xec>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000a78:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000a80:	d003      	beq.n	8000a8a <SystemInit+0x9e>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000a88:	d117      	bne.n	8000aba <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000a8a:	4b13      	ldr	r3, [pc, #76]	@ (8000ad8 <SystemInit+0xec>)
 8000a8c:	69db      	ldr	r3, [r3, #28]
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d005      	beq.n	8000aa2 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000a96:	4b10      	ldr	r3, [pc, #64]	@ (8000ad8 <SystemInit+0xec>)
 8000a98:	4a10      	ldr	r2, [pc, #64]	@ (8000adc <SystemInit+0xf0>)
 8000a9a:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad8 <SystemInit+0xec>)
 8000a9e:	4a10      	ldr	r2, [pc, #64]	@ (8000ae0 <SystemInit+0xf4>)
 8000aa0:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad8 <SystemInit+0xec>)
 8000aa4:	69db      	ldr	r3, [r3, #28]
 8000aa6:	4a0c      	ldr	r2, [pc, #48]	@ (8000ad8 <SystemInit+0xec>)
 8000aa8:	f043 0302 	orr.w	r3, r3, #2
 8000aac:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000aae:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad8 <SystemInit+0xec>)
 8000ab0:	69db      	ldr	r3, [r3, #28]
 8000ab2:	4a09      	ldr	r2, [pc, #36]	@ (8000ad8 <SystemInit+0xec>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	61d3      	str	r3, [r2, #28]
  }
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000ed00 	.word	0xe000ed00
 8000acc:	44020c00 	.word	0x44020c00
 8000ad0:	eae2eae3 	.word	0xeae2eae3
 8000ad4:	01010280 	.word	0x01010280
 8000ad8:	40022000 	.word	0x40022000
 8000adc:	08192a3b 	.word	0x08192a3b
 8000ae0:	4c5d6e7f 	.word	0x4c5d6e7f

08000ae4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ae4:	480d      	ldr	r0, [pc, #52]	@ (8000b1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ae6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ae8:	f7ff ff80 	bl	80009ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aec:	480c      	ldr	r0, [pc, #48]	@ (8000b20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aee:	490d      	ldr	r1, [pc, #52]	@ (8000b24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000af0:	4a0d      	ldr	r2, [pc, #52]	@ (8000b28 <LoopForever+0xe>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af4:	e002      	b.n	8000afc <LoopCopyDataInit>

08000af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afa:	3304      	adds	r3, #4

08000afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b00:	d3f9      	bcc.n	8000af6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b02:	4a0a      	ldr	r2, [pc, #40]	@ (8000b2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b04:	4c0a      	ldr	r4, [pc, #40]	@ (8000b30 <LoopForever+0x16>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b08:	e001      	b.n	8000b0e <LoopFillZerobss>

08000b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b0c:	3204      	adds	r2, #4

08000b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b10:	d3fb      	bcc.n	8000b0a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b12:	f005 fa07 	bl	8005f24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b16:	f7ff fd77 	bl	8000608 <main>

08000b1a <LoopForever>:

LoopForever:
    b LoopForever
 8000b1a:	e7fe      	b.n	8000b1a <LoopForever>
  ldr   r0, =_estack
 8000b1c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b24:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000b28:	08005fd0 	.word	0x08005fd0
  ldr r2, =_sbss
 8000b2c:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000b30:	200000f8 	.word	0x200000f8

08000b34 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b34:	e7fe      	b.n	8000b34 <ADC1_IRQHandler>
	...

08000b38 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08c      	sub	sp, #48	@ 0x30
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if ((Led != LED2)
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d009      	beq.n	8000b60 <BSP_LED_Init+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d006      	beq.n	8000b60 <BSP_LED_Init+0x28>
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d003      	beq.n	8000b60 <BSP_LED_Init+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000b58:	f06f 0301 	mvn.w	r3, #1
 8000b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b5e:	e055      	b.n	8000c0c <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d10f      	bne.n	8000b86 <BSP_LED_Init+0x4e>
    {
      LED2_GPIO_CLK_ENABLE();
 8000b66:	4b2c      	ldr	r3, [pc, #176]	@ (8000c18 <BSP_LED_Init+0xe0>)
 8000b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b6c:	4a2a      	ldr	r2, [pc, #168]	@ (8000c18 <BSP_LED_Init+0xe0>)
 8000b6e:	f043 0320 	orr.w	r3, r3, #32
 8000b72:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b76:	4b28      	ldr	r3, [pc, #160]	@ (8000c18 <BSP_LED_Init+0xe0>)
 8000b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b7c:	f003 0320 	and.w	r3, r3, #32
 8000b80:	617b      	str	r3, [r7, #20]
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	e021      	b.n	8000bca <BSP_LED_Init+0x92>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d10f      	bne.n	8000bac <BSP_LED_Init+0x74>
    {
      LED1_GPIO_CLK_ENABLE();
 8000b8c:	4b22      	ldr	r3, [pc, #136]	@ (8000c18 <BSP_LED_Init+0xe0>)
 8000b8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b92:	4a21      	ldr	r2, [pc, #132]	@ (8000c18 <BSP_LED_Init+0xe0>)
 8000b94:	f043 0302 	orr.w	r3, r3, #2
 8000b98:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b9c:	4b1e      	ldr	r3, [pc, #120]	@ (8000c18 <BSP_LED_Init+0xe0>)
 8000b9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ba2:	f003 0302 	and.w	r3, r3, #2
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	e00e      	b.n	8000bca <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000bac:	4b1a      	ldr	r3, [pc, #104]	@ (8000c18 <BSP_LED_Init+0xe0>)
 8000bae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bb2:	4a19      	ldr	r2, [pc, #100]	@ (8000c18 <BSP_LED_Init+0xe0>)
 8000bb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bb8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bbc:	4b16      	ldr	r3, [pc, #88]	@ (8000c18 <BSP_LED_Init+0xe0>)
 8000bbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	4a13      	ldr	r2, [pc, #76]	@ (8000c1c <BSP_LED_Init+0xe4>)
 8000bce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bd2:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	4a0f      	ldr	r2, [pc, #60]	@ (8000c20 <BSP_LED_Init+0xe8>)
 8000be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be8:	f107 0218 	add.w	r2, r7, #24
 8000bec:	4611      	mov	r1, r2
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 fc70 	bl	80014d4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c20 <BSP_LED_Init+0xe8>)
 8000bf8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	4a07      	ldr	r2, [pc, #28]	@ (8000c1c <BSP_LED_Init+0xe4>)
 8000c00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c04:	2200      	movs	r2, #0
 8000c06:	4619      	mov	r1, r3
 8000c08:	f000 fdc2 	bl	8001790 <HAL_GPIO_WritePin>
  }

  return ret;
 8000c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3730      	adds	r7, #48	@ 0x30
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	44020c00 	.word	0x44020c00
 8000c1c:	08005f9c 	.word	0x08005f9c
 8000c20:	20000008 	.word	0x20000008

08000c24 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	460a      	mov	r2, r1
 8000c2e:	71fb      	strb	r3, [r7, #7]
 8000c30:	4613      	mov	r3, r2
 8000c32:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000c34:	4b30      	ldr	r3, [pc, #192]	@ (8000cf8 <BSP_PB_Init+0xd4>)
 8000c36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c3a:	4a2f      	ldr	r2, [pc, #188]	@ (8000cf8 <BSP_PB_Init+0xd4>)
 8000c3c:	f043 0304 	orr.w	r3, r3, #4
 8000c40:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c44:	4b2c      	ldr	r3, [pc, #176]	@ (8000cf8 <BSP_PB_Init+0xd4>)
 8000c46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c4a:	f003 0304 	and.w	r3, r3, #4
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000c52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c56:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8000c60:	79bb      	ldrb	r3, [r7, #6]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d10c      	bne.n	8000c80 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	4a23      	ldr	r2, [pc, #140]	@ (8000cfc <BSP_PB_Init+0xd8>)
 8000c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c72:	f107 020c 	add.w	r2, r7, #12
 8000c76:	4611      	mov	r1, r2
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f000 fc2b 	bl	80014d4 <HAL_GPIO_Init>
 8000c7e:	e036      	b.n	8000cee <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000c80:	4b1f      	ldr	r3, [pc, #124]	@ (8000d00 <BSP_PB_Init+0xdc>)
 8000c82:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	4a1d      	ldr	r2, [pc, #116]	@ (8000cfc <BSP_PB_Init+0xd8>)
 8000c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c8c:	f107 020c 	add.w	r2, r7, #12
 8000c90:	4611      	mov	r1, r2
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 fc1e 	bl	80014d4 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000c98:	79fa      	ldrb	r2, [r7, #7]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	4413      	add	r3, r2
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	4a18      	ldr	r2, [pc, #96]	@ (8000d04 <BSP_PB_Init+0xe0>)
 8000ca4:	441a      	add	r2, r3
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	4917      	ldr	r1, [pc, #92]	@ (8000d08 <BSP_PB_Init+0xe4>)
 8000caa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4610      	mov	r0, r2
 8000cb2:	f000 fbb3 	bl	800141c <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000cb6:	79fa      	ldrb	r2, [r7, #7]
 8000cb8:	4613      	mov	r3, r2
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	4413      	add	r3, r2
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	4a10      	ldr	r2, [pc, #64]	@ (8000d04 <BSP_PB_Init+0xe0>)
 8000cc2:	1898      	adds	r0, r3, r2
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	4a11      	ldr	r2, [pc, #68]	@ (8000d0c <BSP_PB_Init+0xe8>)
 8000cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	2100      	movs	r1, #0
 8000cd0:	f000 fb78 	bl	80013c4 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000cd4:	2018      	movs	r0, #24
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d10 <BSP_PB_Init+0xec>)
 8000cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f000 fa97 	bl	8001214 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000ce6:	2318      	movs	r3, #24
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f000 faad 	bl	8001248 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000cee:	2300      	movs	r3, #0
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3720      	adds	r7, #32
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	44020c00 	.word	0x44020c00
 8000cfc:	20000014 	.word	0x20000014
 8000d00:	10110000 	.word	0x10110000
 8000d04:	20000054 	.word	0x20000054
 8000d08:	08005fa4 	.word	0x08005fa4
 8000d0c:	20000018 	.word	0x20000018
 8000d10:	2000001c 	.word	0x2000001c

08000d14 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000d1e:	79fa      	ldrb	r2, [r7, #7]
 8000d20:	4613      	mov	r3, r2
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	4413      	add	r3, r2
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4a04      	ldr	r2, [pc, #16]	@ (8000d3c <BSP_PB_IRQHandler+0x28>)
 8000d2a:	4413      	add	r3, r2
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f000 fb89 	bl	8001444 <HAL_EXTI_IRQHandler>
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000054 	.word	0x20000054

08000d40 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
	...

08000d58 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	6039      	str	r1, [r7, #0]
 8000d62:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d003      	beq.n	8000d76 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000d6e:	f06f 0301 	mvn.w	r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	e018      	b.n	8000da8 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	2294      	movs	r2, #148	@ 0x94
 8000d7a:	fb02 f303 	mul.w	r3, r2, r3
 8000d7e:	4a0d      	ldr	r2, [pc, #52]	@ (8000db4 <BSP_COM_Init+0x5c>)
 8000d80:	4413      	add	r3, r2
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 f854 	bl	8000e30 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	2294      	movs	r2, #148	@ 0x94
 8000d8c:	fb02 f303 	mul.w	r3, r2, r3
 8000d90:	4a08      	ldr	r2, [pc, #32]	@ (8000db4 <BSP_COM_Init+0x5c>)
 8000d92:	4413      	add	r3, r2
 8000d94:	6839      	ldr	r1, [r7, #0]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 f80e 	bl	8000db8 <MX_USART_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d002      	beq.n	8000da8 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000da2:	f06f 0303 	mvn.w	r3, #3
 8000da6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000da8:	68fb      	ldr	r3, [r7, #12]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000060 	.word	0x20000060

08000db8 <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8000dc2:	4b16      	ldr	r3, [pc, #88]	@ (8000e1c <MX_USART_Init+0x64>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	220c      	movs	r2, #12
 8000dd6:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	895b      	ldrh	r3, [r3, #10]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685a      	ldr	r2, [r3, #4]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	891b      	ldrh	r3, [r3, #8]
 8000dee:	461a      	mov	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	899b      	ldrh	r3, [r3, #12]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000e04:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f004 fc19 	bl	8005644 <HAL_UART_Init>
 8000e12:	4603      	mov	r3, r0
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000004 	.word	0x20000004

08000e20 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000e24:	2000      	movs	r0, #0
 8000e26:	f7ff ff8b 	bl	8000d40 <BSP_PB_Callback>
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	@ 0x28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000e38:	4b27      	ldr	r3, [pc, #156]	@ (8000ed8 <COM1_MspInit+0xa8>)
 8000e3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e3e:	4a26      	ldr	r2, [pc, #152]	@ (8000ed8 <COM1_MspInit+0xa8>)
 8000e40:	f043 0308 	orr.w	r3, r3, #8
 8000e44:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e48:	4b23      	ldr	r3, [pc, #140]	@ (8000ed8 <COM1_MspInit+0xa8>)
 8000e4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e4e:	f003 0308 	and.w	r3, r3, #8
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000e56:	4b20      	ldr	r3, [pc, #128]	@ (8000ed8 <COM1_MspInit+0xa8>)
 8000e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e5c:	4a1e      	ldr	r2, [pc, #120]	@ (8000ed8 <COM1_MspInit+0xa8>)
 8000e5e:	f043 0308 	orr.w	r3, r3, #8
 8000e62:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e66:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed8 <COM1_MspInit+0xa8>)
 8000e68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e6c:	f003 0308 	and.w	r3, r3, #8
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000e74:	4b18      	ldr	r3, [pc, #96]	@ (8000ed8 <COM1_MspInit+0xa8>)
 8000e76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000e7a:	4a17      	ldr	r2, [pc, #92]	@ (8000ed8 <COM1_MspInit+0xa8>)
 8000e7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e80:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000e84:	4b14      	ldr	r3, [pc, #80]	@ (8000ed8 <COM1_MspInit+0xa8>)
 8000e86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000e8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8000e92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e96:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000ea4:	2307      	movs	r3, #7
 8000ea6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	4619      	mov	r1, r3
 8000eae:	480b      	ldr	r0, [pc, #44]	@ (8000edc <COM1_MspInit+0xac>)
 8000eb0:	f000 fb10 	bl	80014d4 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8000eb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000eb8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000ebe:	2307      	movs	r3, #7
 8000ec0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4804      	ldr	r0, [pc, #16]	@ (8000edc <COM1_MspInit+0xac>)
 8000eca:	f000 fb03 	bl	80014d4 <HAL_GPIO_Init>
}
 8000ece:	bf00      	nop
 8000ed0:	3728      	adds	r7, #40	@ 0x28
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	44020c00 	.word	0x44020c00
 8000edc:	42020c00 	.word	0x42020c00

08000ee0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee4:	2003      	movs	r0, #3
 8000ee6:	f000 f98a 	bl	80011fe <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000eea:	f001 fa83 	bl	80023f4 <HAL_RCC_GetSysClockFreq>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f24 <HAL_Init+0x44>)
 8000ef2:	6a1b      	ldr	r3, [r3, #32]
 8000ef4:	f003 030f 	and.w	r3, r3, #15
 8000ef8:	490b      	ldr	r1, [pc, #44]	@ (8000f28 <HAL_Init+0x48>)
 8000efa:	5ccb      	ldrb	r3, [r1, r3]
 8000efc:	fa22 f303 	lsr.w	r3, r2, r3
 8000f00:	4a0a      	ldr	r2, [pc, #40]	@ (8000f2c <HAL_Init+0x4c>)
 8000f02:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000f04:	2004      	movs	r0, #4
 8000f06:	f000 f9cf 	bl	80012a8 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f0a:	200f      	movs	r0, #15
 8000f0c:	f000 f810 	bl	8000f30 <HAL_InitTick>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e002      	b.n	8000f20 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f1a:	f7ff fd2b 	bl	8000974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f1e:	2300      	movs	r3, #0
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	44020c00 	.word	0x44020c00
 8000f28:	08005f84 	.word	0x08005f84
 8000f2c:	20000000 	.word	0x20000000

08000f30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000f3c:	4b33      	ldr	r3, [pc, #204]	@ (800100c <HAL_InitTick+0xdc>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d101      	bne.n	8000f48 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e05c      	b.n	8001002 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000f48:	4b31      	ldr	r3, [pc, #196]	@ (8001010 <HAL_InitTick+0xe0>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 0304 	and.w	r3, r3, #4
 8000f50:	2b04      	cmp	r3, #4
 8000f52:	d10c      	bne.n	8000f6e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000f54:	4b2f      	ldr	r3, [pc, #188]	@ (8001014 <HAL_InitTick+0xe4>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4b2c      	ldr	r3, [pc, #176]	@ (800100c <HAL_InitTick+0xdc>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	e037      	b.n	8000fde <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000f6e:	f000 f9f3 	bl	8001358 <HAL_SYSTICK_GetCLKSourceConfig>
 8000f72:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d023      	beq.n	8000fc2 <HAL_InitTick+0x92>
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d82d      	bhi.n	8000fdc <HAL_InitTick+0xac>
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_InitTick+0x5e>
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d00d      	beq.n	8000fa8 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000f8c:	e026      	b.n	8000fdc <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000f8e:	4b21      	ldr	r3, [pc, #132]	@ (8001014 <HAL_InitTick+0xe4>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	4b1e      	ldr	r3, [pc, #120]	@ (800100c <HAL_InitTick+0xdc>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	4619      	mov	r1, r3
 8000f98:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000f9c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa4:	60fb      	str	r3, [r7, #12]
        break;
 8000fa6:	e01a      	b.n	8000fde <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000fa8:	4b18      	ldr	r3, [pc, #96]	@ (800100c <HAL_InitTick+0xdc>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	461a      	mov	r2, r3
 8000fae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8000fb6:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fbe:	60fb      	str	r3, [r7, #12]
        break;
 8000fc0:	e00d      	b.n	8000fde <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000fc2:	4b12      	ldr	r3, [pc, #72]	@ (800100c <HAL_InitTick+0xdc>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fcc:	fbb3 f3f2 	udiv	r3, r3, r2
 8000fd0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd8:	60fb      	str	r3, [r7, #12]
        break;
 8000fda:	e000      	b.n	8000fde <HAL_InitTick+0xae>
        break;
 8000fdc:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000fde:	68f8      	ldr	r0, [r7, #12]
 8000fe0:	f000 f940 	bl	8001264 <HAL_SYSTICK_Config>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e009      	b.n	8001002 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	6879      	ldr	r1, [r7, #4]
 8000ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff6:	f000 f90d 	bl	8001214 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000ffa:	4a07      	ldr	r2, [pc, #28]	@ (8001018 <HAL_InitTick+0xe8>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000024 	.word	0x20000024
 8001010:	e000e010 	.word	0xe000e010
 8001014:	20000000 	.word	0x20000000
 8001018:	20000020 	.word	0x20000020

0800101c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001020:	4b06      	ldr	r3, [pc, #24]	@ (800103c <HAL_IncTick+0x20>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <HAL_IncTick+0x24>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4413      	add	r3, r2
 800102c:	4a04      	ldr	r2, [pc, #16]	@ (8001040 <HAL_IncTick+0x24>)
 800102e:	6013      	str	r3, [r2, #0]
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000024 	.word	0x20000024
 8001040:	200000f4 	.word	0x200000f4

08001044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return uwTick;
 8001048:	4b03      	ldr	r3, [pc, #12]	@ (8001058 <HAL_GetTick+0x14>)
 800104a:	681b      	ldr	r3, [r3, #0]
}
 800104c:	4618      	mov	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	200000f4 	.word	0x200000f4

0800105c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001064:	f7ff ffee 	bl	8001044 <HAL_GetTick>
 8001068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001074:	d005      	beq.n	8001082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001076:	4b0a      	ldr	r3, [pc, #40]	@ (80010a0 <HAL_Delay+0x44>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4413      	add	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001082:	bf00      	nop
 8001084:	f7ff ffde 	bl	8001044 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	429a      	cmp	r2, r3
 8001092:	d8f7      	bhi.n	8001084 <HAL_Delay+0x28>
  {
  }
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000024 	.word	0x20000024

080010a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b4:	4b0c      	ldr	r3, [pc, #48]	@ (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010c0:	4013      	ands	r3, r2
 80010c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d6:	4a04      	ldr	r2, [pc, #16]	@ (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	60d3      	str	r3, [r2, #12]
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f0:	4b04      	ldr	r3, [pc, #16]	@ (8001104 <__NVIC_GetPriorityGrouping+0x18>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	0a1b      	lsrs	r3, r3, #8
 80010f6:	f003 0307 	and.w	r3, r3, #7
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001112:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001116:	2b00      	cmp	r3, #0
 8001118:	db0b      	blt.n	8001132 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111a:	88fb      	ldrh	r3, [r7, #6]
 800111c:	f003 021f 	and.w	r2, r3, #31
 8001120:	4907      	ldr	r1, [pc, #28]	@ (8001140 <__NVIC_EnableIRQ+0x38>)
 8001122:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001126:	095b      	lsrs	r3, r3, #5
 8001128:	2001      	movs	r0, #1
 800112a:	fa00 f202 	lsl.w	r2, r0, r2
 800112e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000e100 	.word	0xe000e100

08001144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	6039      	str	r1, [r7, #0]
 800114e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001150:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001154:	2b00      	cmp	r3, #0
 8001156:	db0a      	blt.n	800116e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	b2da      	uxtb	r2, r3
 800115c:	490c      	ldr	r1, [pc, #48]	@ (8001190 <__NVIC_SetPriority+0x4c>)
 800115e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001162:	0112      	lsls	r2, r2, #4
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	440b      	add	r3, r1
 8001168:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800116c:	e00a      	b.n	8001184 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4908      	ldr	r1, [pc, #32]	@ (8001194 <__NVIC_SetPriority+0x50>)
 8001174:	88fb      	ldrh	r3, [r7, #6]
 8001176:	f003 030f 	and.w	r3, r3, #15
 800117a:	3b04      	subs	r3, #4
 800117c:	0112      	lsls	r2, r2, #4
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	440b      	add	r3, r1
 8001182:	761a      	strb	r2, [r3, #24]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000e100 	.word	0xe000e100
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001198:	b480      	push	{r7}
 800119a:	b089      	sub	sp, #36	@ 0x24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f1c3 0307 	rsb	r3, r3, #7
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	bf28      	it	cs
 80011b6:	2304      	movcs	r3, #4
 80011b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3304      	adds	r3, #4
 80011be:	2b06      	cmp	r3, #6
 80011c0:	d902      	bls.n	80011c8 <NVIC_EncodePriority+0x30>
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3b03      	subs	r3, #3
 80011c6:	e000      	b.n	80011ca <NVIC_EncodePriority+0x32>
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	f04f 32ff 	mov.w	r2, #4294967295
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43da      	mvns	r2, r3
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	401a      	ands	r2, r3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e0:	f04f 31ff 	mov.w	r1, #4294967295
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ea:	43d9      	mvns	r1, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	4313      	orrs	r3, r2
         );
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3724      	adds	r7, #36	@ 0x24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff ff4c 	bl	80010a4 <__NVIC_SetPriorityGrouping>
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
 8001220:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001222:	f7ff ff63 	bl	80010ec <__NVIC_GetPriorityGrouping>
 8001226:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	68b9      	ldr	r1, [r7, #8]
 800122c:	6978      	ldr	r0, [r7, #20]
 800122e:	f7ff ffb3 	bl	8001198 <NVIC_EncodePriority>
 8001232:	4602      	mov	r2, r0
 8001234:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001238:	4611      	mov	r1, r2
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ff82 	bl	8001144 <__NVIC_SetPriority>
}
 8001240:	bf00      	nop
 8001242:	3718      	adds	r7, #24
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001252:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff ff56 	bl	8001108 <__NVIC_EnableIRQ>
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3b01      	subs	r3, #1
 8001270:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001274:	d301      	bcc.n	800127a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001276:	2301      	movs	r3, #1
 8001278:	e00d      	b.n	8001296 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800127a:	4a0a      	ldr	r2, [pc, #40]	@ (80012a4 <HAL_SYSTICK_Config+0x40>)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3b01      	subs	r3, #1
 8001280:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001282:	4b08      	ldr	r3, [pc, #32]	@ (80012a4 <HAL_SYSTICK_Config+0x40>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001288:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <HAL_SYSTICK_Config+0x40>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a05      	ldr	r2, [pc, #20]	@ (80012a4 <HAL_SYSTICK_Config+0x40>)
 800128e:	f043 0303 	orr.w	r3, r3, #3
 8001292:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	e000e010 	.word	0xe000e010

080012a8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	d844      	bhi.n	8001340 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80012b6:	a201      	add	r2, pc, #4	@ (adr r2, 80012bc <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80012b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012bc:	080012df 	.word	0x080012df
 80012c0:	080012fd 	.word	0x080012fd
 80012c4:	0800131f 	.word	0x0800131f
 80012c8:	08001341 	.word	0x08001341
 80012cc:	080012d1 	.word	0x080012d1
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80012d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001350 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a1e      	ldr	r2, [pc, #120]	@ (8001350 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80012d6:	f043 0304 	orr.w	r3, r3, #4
 80012da:	6013      	str	r3, [r2, #0]
      break;
 80012dc:	e031      	b.n	8001342 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80012de:	4b1c      	ldr	r3, [pc, #112]	@ (8001350 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a1b      	ldr	r2, [pc, #108]	@ (8001350 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80012e4:	f023 0304 	bic.w	r3, r3, #4
 80012e8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80012ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001354 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80012ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80012f0:	4a18      	ldr	r2, [pc, #96]	@ (8001354 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80012f2:	f023 030c 	bic.w	r3, r3, #12
 80012f6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80012fa:	e022      	b.n	8001342 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80012fc:	4b14      	ldr	r3, [pc, #80]	@ (8001350 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a13      	ldr	r2, [pc, #76]	@ (8001350 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001302:	f023 0304 	bic.w	r3, r3, #4
 8001306:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001308:	4b12      	ldr	r3, [pc, #72]	@ (8001354 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800130a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800130e:	f023 030c 	bic.w	r3, r3, #12
 8001312:	4a10      	ldr	r2, [pc, #64]	@ (8001354 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001314:	f043 0304 	orr.w	r3, r3, #4
 8001318:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800131c:	e011      	b.n	8001342 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800131e:	4b0c      	ldr	r3, [pc, #48]	@ (8001350 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a0b      	ldr	r2, [pc, #44]	@ (8001350 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001324:	f023 0304 	bic.w	r3, r3, #4
 8001328:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800132a:	4b0a      	ldr	r3, [pc, #40]	@ (8001354 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800132c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001330:	f023 030c 	bic.w	r3, r3, #12
 8001334:	4a07      	ldr	r2, [pc, #28]	@ (8001354 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001336:	f043 0308 	orr.w	r3, r3, #8
 800133a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800133e:	e000      	b.n	8001342 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001340:	bf00      	nop
  }
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	e000e010 	.word	0xe000e010
 8001354:	44020c00 	.word	0x44020c00

08001358 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800135e:	4b17      	ldr	r3, [pc, #92]	@ (80013bc <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0304 	and.w	r3, r3, #4
 8001366:	2b00      	cmp	r3, #0
 8001368:	d002      	beq.n	8001370 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800136a:	2304      	movs	r3, #4
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	e01e      	b.n	80013ae <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8001370:	4b13      	ldr	r3, [pc, #76]	@ (80013c0 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8001372:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001376:	f003 030c 	and.w	r3, r3, #12
 800137a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	2b08      	cmp	r3, #8
 8001380:	d00f      	beq.n	80013a2 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	2b08      	cmp	r3, #8
 8001386:	d80f      	bhi.n	80013a8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d003      	beq.n	8001396 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	2b04      	cmp	r3, #4
 8001392:	d003      	beq.n	800139c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001394:	e008      	b.n	80013a8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
        break;
 800139a:	e008      	b.n	80013ae <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800139c:	2301      	movs	r3, #1
 800139e:	607b      	str	r3, [r7, #4]
        break;
 80013a0:	e005      	b.n	80013ae <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80013a2:	2302      	movs	r3, #2
 80013a4:	607b      	str	r3, [r7, #4]
        break;
 80013a6:	e002      	b.n	80013ae <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80013a8:	2300      	movs	r3, #0
 80013aa:	607b      	str	r3, [r7, #4]
        break;
 80013ac:	bf00      	nop
    }
  }
  return systick_source;
 80013ae:	687b      	ldr	r3, [r7, #4]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000e010 	.word	0xe000e010
 80013c0:	44020c00 	.word	0x44020c00

080013c4 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 80013c4:	b480      	push	{r7}
 80013c6:	b087      	sub	sp, #28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	460b      	mov	r3, r1
 80013ce:	607a      	str	r2, [r7, #4]
 80013d0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80013d2:	2300      	movs	r3, #0
 80013d4:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80013d6:	7afb      	ldrb	r3, [r7, #11]
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d011      	beq.n	8001400 <HAL_EXTI_RegisterCallback+0x3c>
 80013dc:	2b02      	cmp	r3, #2
 80013de:	dc13      	bgt.n	8001408 <HAL_EXTI_RegisterCallback+0x44>
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d002      	beq.n	80013ea <HAL_EXTI_RegisterCallback+0x26>
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d007      	beq.n	80013f8 <HAL_EXTI_RegisterCallback+0x34>
 80013e8:	e00e      	b.n	8001408 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	609a      	str	r2, [r3, #8]
      break;
 80013f6:	e00a      	b.n	800140e <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	605a      	str	r2, [r3, #4]
      break;
 80013fe:	e006      	b.n	800140e <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	609a      	str	r2, [r3, #8]
      break;
 8001406:	e002      	b.n	800140e <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	75fb      	strb	r3, [r7, #23]
      break;
 800140c:	bf00      	nop
  }

  return status;
 800140e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001410:	4618      	mov	r0, r3
 8001412:	371c      	adds	r7, #28
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e003      	b.n	8001438 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	683a      	ldr	r2, [r7, #0]
 8001434:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001436:	2300      	movs	r3, #0
  }
}
 8001438:	4618      	mov	r0, r3
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	0c1b      	lsrs	r3, r3, #16
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 031f 	and.w	r3, r3, #31
 8001460:	2201      	movs	r2, #1
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	015a      	lsls	r2, r3, #5
 800146c:	4b17      	ldr	r3, [pc, #92]	@ (80014cc <HAL_EXTI_IRQHandler+0x88>)
 800146e:	4413      	add	r3, r2
 8001470:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	4013      	ands	r3, r2
 800147a:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d009      	beq.n	8001496 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d002      	beq.n	8001496 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	015a      	lsls	r2, r3, #5
 800149a:	4b0d      	ldr	r3, [pc, #52]	@ (80014d0 <HAL_EXTI_IRQHandler+0x8c>)
 800149c:	4413      	add	r3, r2
 800149e:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4013      	ands	r3, r2
 80014a8:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d009      	beq.n	80014c4 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d002      	beq.n	80014c4 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	4798      	blx	r3
    }
  }
}
 80014c4:	bf00      	nop
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	4402200c 	.word	0x4402200c
 80014d0:	44022010 	.word	0x44022010

080014d4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b087      	sub	sp, #28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80014e2:	e142      	b.n	800176a <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	2101      	movs	r1, #1
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	fa01 f303 	lsl.w	r3, r1, r3
 80014f0:	4013      	ands	r3, r2
 80014f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 8134 	beq.w	8001764 <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b02      	cmp	r3, #2
 8001502:	d003      	beq.n	800150c <HAL_GPIO_Init+0x38>
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b12      	cmp	r3, #18
 800150a:	d125      	bne.n	8001558 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	08da      	lsrs	r2, r3, #3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3208      	adds	r2, #8
 8001514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001518:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	f003 0307 	and.w	r3, r3, #7
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	220f      	movs	r2, #15
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	4013      	ands	r3, r2
 800152e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	691b      	ldr	r3, [r3, #16]
 8001534:	f003 020f 	and.w	r2, r3, #15
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	697a      	ldr	r2, [r7, #20]
 8001546:	4313      	orrs	r3, r2
 8001548:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	08da      	lsrs	r2, r3, #3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	3208      	adds	r2, #8
 8001552:	6979      	ldr	r1, [r7, #20]
 8001554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	2203      	movs	r2, #3
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	697a      	ldr	r2, [r7, #20]
 800156c:	4013      	ands	r3, r2
 800156e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 0203 	and.w	r2, r3, #3
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	697a      	ldr	r2, [r7, #20]
 8001582:	4313      	orrs	r3, r2
 8001584:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d00b      	beq.n	80015ac <HAL_GPIO_Init+0xd8>
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	2b02      	cmp	r3, #2
 800159a:	d007      	beq.n	80015ac <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015a0:	2b11      	cmp	r3, #17
 80015a2:	d003      	beq.n	80015ac <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	2b12      	cmp	r3, #18
 80015aa:	d130      	bne.n	800160e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	2203      	movs	r2, #3
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43db      	mvns	r3, r3
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	4013      	ands	r3, r2
 80015c2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	68da      	ldr	r2, [r3, #12]
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	697a      	ldr	r2, [r7, #20]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015e2:	2201      	movs	r2, #1
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	43db      	mvns	r3, r3
 80015ec:	697a      	ldr	r2, [r7, #20]
 80015ee:	4013      	ands	r3, r2
 80015f0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	091b      	lsrs	r3, r3, #4
 80015f8:	f003 0201 	and.w	r2, r3, #1
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	4313      	orrs	r3, r2
 8001606:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	697a      	ldr	r2, [r7, #20]
 800160c:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f003 0303 	and.w	r3, r3, #3
 8001616:	2b03      	cmp	r3, #3
 8001618:	d109      	bne.n	800162e <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8001622:	2b03      	cmp	r3, #3
 8001624:	d11b      	bne.n	800165e <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d017      	beq.n	800165e <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	2203      	movs	r2, #3
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43db      	mvns	r3, r3
 8001640:	697a      	ldr	r2, [r7, #20]
 8001642:	4013      	ands	r3, r2
 8001644:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	689a      	ldr	r2, [r3, #8]
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	4313      	orrs	r3, r2
 8001656:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d07c      	beq.n	8001764 <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800166a:	4a47      	ldr	r2, [pc, #284]	@ (8001788 <HAL_GPIO_Init+0x2b4>)
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	089b      	lsrs	r3, r3, #2
 8001670:	3318      	adds	r3, #24
 8001672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001676:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	220f      	movs	r2, #15
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	697a      	ldr	r2, [r7, #20]
 800168a:	4013      	ands	r3, r2
 800168c:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	0a9a      	lsrs	r2, r3, #10
 8001692:	4b3e      	ldr	r3, [pc, #248]	@ (800178c <HAL_GPIO_Init+0x2b8>)
 8001694:	4013      	ands	r3, r2
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	f002 0203 	and.w	r2, r2, #3
 800169c:	00d2      	lsls	r2, r2, #3
 800169e:	4093      	lsls	r3, r2
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80016a6:	4938      	ldr	r1, [pc, #224]	@ (8001788 <HAL_GPIO_Init+0x2b4>)
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	089b      	lsrs	r3, r3, #2
 80016ac:	3318      	adds	r3, #24
 80016ae:	697a      	ldr	r2, [r7, #20]
 80016b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80016b4:	4b34      	ldr	r3, [pc, #208]	@ (8001788 <HAL_GPIO_Init+0x2b4>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	43db      	mvns	r3, r3
 80016be:	697a      	ldr	r2, [r7, #20]
 80016c0:	4013      	ands	r3, r2
 80016c2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d003      	beq.n	80016d8 <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80016d8:	4a2b      	ldr	r2, [pc, #172]	@ (8001788 <HAL_GPIO_Init+0x2b4>)
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80016de:	4b2a      	ldr	r3, [pc, #168]	@ (8001788 <HAL_GPIO_Init+0x2b4>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	43db      	mvns	r3, r3
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	4013      	ands	r3, r2
 80016ec:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 80016fa:	697a      	ldr	r2, [r7, #20]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4313      	orrs	r3, r2
 8001700:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001702:	4a21      	ldr	r2, [pc, #132]	@ (8001788 <HAL_GPIO_Init+0x2b4>)
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001708:	4b1f      	ldr	r3, [pc, #124]	@ (8001788 <HAL_GPIO_Init+0x2b4>)
 800170a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800170e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	43db      	mvns	r3, r3
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	4013      	ands	r3, r2
 8001718:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 8001726:	697a      	ldr	r2, [r7, #20]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4313      	orrs	r3, r2
 800172c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800172e:	4a16      	ldr	r2, [pc, #88]	@ (8001788 <HAL_GPIO_Init+0x2b4>)
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001736:	4b14      	ldr	r3, [pc, #80]	@ (8001788 <HAL_GPIO_Init+0x2b4>)
 8001738:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800173c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	43db      	mvns	r3, r3
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	4013      	ands	r3, r2
 8001746:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	4313      	orrs	r3, r2
 800175a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800175c:	4a0a      	ldr	r2, [pc, #40]	@ (8001788 <HAL_GPIO_Init+0x2b4>)
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	3301      	adds	r3, #1
 8001768:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	fa22 f303 	lsr.w	r3, r2, r3
 8001774:	2b00      	cmp	r3, #0
 8001776:	f47f aeb5 	bne.w	80014e4 <HAL_GPIO_Init+0x10>
  }
}
 800177a:	bf00      	nop
 800177c:	bf00      	nop
 800177e:	371c      	adds	r7, #28
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	44022000 	.word	0x44022000
 800178c:	002f7f7f 	.word	0x002f7f7f

08001790 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	807b      	strh	r3, [r7, #2]
 800179c:	4613      	mov	r3, r2
 800179e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017a0:	787b      	ldrb	r3, [r7, #1]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017a6:	887a      	ldrh	r2, [r7, #2]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017ac:	e002      	b.n	80017b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017ae:	887a      	ldrh	r2, [r7, #2]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	695b      	ldr	r3, [r3, #20]
 80017d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017d2:	887a      	ldrh	r2, [r7, #2]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	4013      	ands	r3, r2
 80017d8:	041a      	lsls	r2, r3, #16
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	43d9      	mvns	r1, r3
 80017de:	887b      	ldrh	r3, [r7, #2]
 80017e0:	400b      	ands	r3, r1
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	619a      	str	r2, [r3, #24]
}
 80017e8:	bf00      	nop
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 80017f8:	4b05      	ldr	r3, [pc, #20]	@ (8001810 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80017fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017fc:	4a04      	ldr	r2, [pc, #16]	@ (8001810 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	44020800 	.word	0x44020800

08001814 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b088      	sub	sp, #32
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d102      	bne.n	8001828 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	f000 bc28 	b.w	8002078 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001828:	4b94      	ldr	r3, [pc, #592]	@ (8001a7c <HAL_RCC_OscConfig+0x268>)
 800182a:	69db      	ldr	r3, [r3, #28]
 800182c:	f003 0318 	and.w	r3, r3, #24
 8001830:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001832:	4b92      	ldr	r3, [pc, #584]	@ (8001a7c <HAL_RCC_OscConfig+0x268>)
 8001834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0310 	and.w	r3, r3, #16
 8001844:	2b00      	cmp	r3, #0
 8001846:	d05b      	beq.n	8001900 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	2b08      	cmp	r3, #8
 800184c:	d005      	beq.n	800185a <HAL_RCC_OscConfig+0x46>
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	2b18      	cmp	r3, #24
 8001852:	d114      	bne.n	800187e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	2b02      	cmp	r3, #2
 8001858:	d111      	bne.n	800187e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d102      	bne.n	8001868 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	f000 bc08 	b.w	8002078 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001868:	4b84      	ldr	r3, [pc, #528]	@ (8001a7c <HAL_RCC_OscConfig+0x268>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	041b      	lsls	r3, r3, #16
 8001876:	4981      	ldr	r1, [pc, #516]	@ (8001a7c <HAL_RCC_OscConfig+0x268>)
 8001878:	4313      	orrs	r3, r2
 800187a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800187c:	e040      	b.n	8001900 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d023      	beq.n	80018ce <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001886:	4b7d      	ldr	r3, [pc, #500]	@ (8001a7c <HAL_RCC_OscConfig+0x268>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a7c      	ldr	r2, [pc, #496]	@ (8001a7c <HAL_RCC_OscConfig+0x268>)
 800188c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001890:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001892:	f7ff fbd7 	bl	8001044 <HAL_GetTick>
 8001896:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800189a:	f7ff fbd3 	bl	8001044 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e3e5      	b.n	8002078 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80018ac:	4b73      	ldr	r3, [pc, #460]	@ (8001a7c <HAL_RCC_OscConfig+0x268>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d0f0      	beq.n	800189a <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80018b8:	4b70      	ldr	r3, [pc, #448]	@ (8001a7c <HAL_RCC_OscConfig+0x268>)
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a1b      	ldr	r3, [r3, #32]
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	496d      	ldr	r1, [pc, #436]	@ (8001a7c <HAL_RCC_OscConfig+0x268>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	618b      	str	r3, [r1, #24]
 80018cc:	e018      	b.n	8001900 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80018ce:	4b6b      	ldr	r3, [pc, #428]	@ (8001a7c <HAL_RCC_OscConfig+0x268>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a6a      	ldr	r2, [pc, #424]	@ (8001a7c <HAL_RCC_OscConfig+0x268>)
 80018d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80018d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018da:	f7ff fbb3 	bl	8001044 <HAL_GetTick>
 80018de:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80018e2:	f7ff fbaf 	bl	8001044 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e3c1      	b.n	8002078 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80018f4:	4b61      	ldr	r3, [pc, #388]	@ (8001a7c <HAL_RCC_OscConfig+0x268>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1f0      	bne.n	80018e2 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b00      	cmp	r3, #0
 800190a:	f000 80a0 	beq.w	8001a4e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	2b10      	cmp	r3, #16
 8001912:	d005      	beq.n	8001920 <HAL_RCC_OscConfig+0x10c>
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	2b18      	cmp	r3, #24
 8001918:	d109      	bne.n	800192e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	2b03      	cmp	r3, #3
 800191e:	d106      	bne.n	800192e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	f040 8092 	bne.w	8001a4e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e3a4      	b.n	8002078 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001936:	d106      	bne.n	8001946 <HAL_RCC_OscConfig+0x132>
 8001938:	4b50      	ldr	r3, [pc, #320]	@ (8001a7c <HAL_RCC_OscConfig+0x268>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a4f      	ldr	r2, [pc, #316]	@ (8001a7c <HAL_RCC_OscConfig+0x268>)
 800193e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	e058      	b.n	80019f8 <HAL_RCC_OscConfig+0x1e4>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d112      	bne.n	8001974 <HAL_RCC_OscConfig+0x160>
 800194e:	4b4b      	ldr	r3, [pc, #300]	@ (8001a7c <HAL_RCC_OscConfig+0x268>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a4a      	ldr	r2, [pc, #296]	@ (8001a7c <HAL_RCC_OscConfig+0x268>)
 8001954:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001958:	6013      	str	r3, [r2, #0]
 800195a:	4b48      	ldr	r3, [pc, #288]	@ (8001a7c <HAL_RCC_OscConfig+0x268>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a47      	ldr	r2, [pc, #284]	@ (8001a7c <HAL_RCC_OscConfig+0x268>)
 8001960:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001964:	6013      	str	r3, [r2, #0]
 8001966:	4b45      	ldr	r3, [pc, #276]	@ (8001a7c <HAL_RCC_OscConfig+0x268>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a44      	ldr	r2, [pc, #272]	@ (8001a7c <HAL_RCC_OscConfig+0x268>)
 800196c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001970:	6013      	str	r3, [r2, #0]
 8001972:	e041      	b.n	80019f8 <HAL_RCC_OscConfig+0x1e4>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800197c:	d112      	bne.n	80019a4 <HAL_RCC_OscConfig+0x190>
 800197e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a7c <HAL_RCC_OscConfig+0x268>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a3e      	ldr	r2, [pc, #248]	@ (8001a7c <HAL_RCC_OscConfig+0x268>)
 8001984:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001988:	6013      	str	r3, [r2, #0]
 800198a:	4b3c      	ldr	r3, [pc, #240]	@ (8001a7c <HAL_RCC_OscConfig+0x268>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a3b      	ldr	r2, [pc, #236]	@ (8001a7c <HAL_RCC_OscConfig+0x268>)
 8001990:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001994:	6013      	str	r3, [r2, #0]
 8001996:	4b39      	ldr	r3, [pc, #228]	@ (8001a7c <HAL_RCC_OscConfig+0x268>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a38      	ldr	r2, [pc, #224]	@ (8001a7c <HAL_RCC_OscConfig+0x268>)
 800199c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019a0:	6013      	str	r3, [r2, #0]
 80019a2:	e029      	b.n	80019f8 <HAL_RCC_OscConfig+0x1e4>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80019ac:	d112      	bne.n	80019d4 <HAL_RCC_OscConfig+0x1c0>
 80019ae:	4b33      	ldr	r3, [pc, #204]	@ (8001a7c <HAL_RCC_OscConfig+0x268>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a32      	ldr	r2, [pc, #200]	@ (8001a7c <HAL_RCC_OscConfig+0x268>)
 80019b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	4b30      	ldr	r3, [pc, #192]	@ (8001a7c <HAL_RCC_OscConfig+0x268>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a2f      	ldr	r2, [pc, #188]	@ (8001a7c <HAL_RCC_OscConfig+0x268>)
 80019c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	4b2d      	ldr	r3, [pc, #180]	@ (8001a7c <HAL_RCC_OscConfig+0x268>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a2c      	ldr	r2, [pc, #176]	@ (8001a7c <HAL_RCC_OscConfig+0x268>)
 80019cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019d0:	6013      	str	r3, [r2, #0]
 80019d2:	e011      	b.n	80019f8 <HAL_RCC_OscConfig+0x1e4>
 80019d4:	4b29      	ldr	r3, [pc, #164]	@ (8001a7c <HAL_RCC_OscConfig+0x268>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a28      	ldr	r2, [pc, #160]	@ (8001a7c <HAL_RCC_OscConfig+0x268>)
 80019da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019de:	6013      	str	r3, [r2, #0]
 80019e0:	4b26      	ldr	r3, [pc, #152]	@ (8001a7c <HAL_RCC_OscConfig+0x268>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a25      	ldr	r2, [pc, #148]	@ (8001a7c <HAL_RCC_OscConfig+0x268>)
 80019e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019ea:	6013      	str	r3, [r2, #0]
 80019ec:	4b23      	ldr	r3, [pc, #140]	@ (8001a7c <HAL_RCC_OscConfig+0x268>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a22      	ldr	r2, [pc, #136]	@ (8001a7c <HAL_RCC_OscConfig+0x268>)
 80019f2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80019f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d013      	beq.n	8001a28 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a00:	f7ff fb20 	bl	8001044 <HAL_GetTick>
 8001a04:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001a08:	f7ff fb1c 	bl	8001044 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b64      	cmp	r3, #100	@ 0x64
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e32e      	b.n	8002078 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a1a:	4b18      	ldr	r3, [pc, #96]	@ (8001a7c <HAL_RCC_OscConfig+0x268>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0f0      	beq.n	8001a08 <HAL_RCC_OscConfig+0x1f4>
 8001a26:	e012      	b.n	8001a4e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a28:	f7ff fb0c 	bl	8001044 <HAL_GetTick>
 8001a2c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001a30:	f7ff fb08 	bl	8001044 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b64      	cmp	r3, #100	@ 0x64
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e31a      	b.n	8002078 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a42:	4b0e      	ldr	r3, [pc, #56]	@ (8001a7c <HAL_RCC_OscConfig+0x268>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f0      	bne.n	8001a30 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f000 809a 	beq.w	8001b90 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d005      	beq.n	8001a6e <HAL_RCC_OscConfig+0x25a>
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	2b18      	cmp	r3, #24
 8001a66:	d149      	bne.n	8001afc <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d146      	bne.n	8001afc <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d104      	bne.n	8001a80 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e2fe      	b.n	8002078 <HAL_RCC_OscConfig+0x864>
 8001a7a:	bf00      	nop
 8001a7c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d11c      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8001a86:	4b9a      	ldr	r3, [pc, #616]	@ (8001cf0 <HAL_RCC_OscConfig+0x4dc>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0218 	and.w	r2, r3, #24
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d014      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001a96:	4b96      	ldr	r3, [pc, #600]	@ (8001cf0 <HAL_RCC_OscConfig+0x4dc>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f023 0218 	bic.w	r2, r3, #24
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	4993      	ldr	r1, [pc, #588]	@ (8001cf0 <HAL_RCC_OscConfig+0x4dc>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8001aa8:	f000 fdd0 	bl	800264c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001aac:	4b91      	ldr	r3, [pc, #580]	@ (8001cf4 <HAL_RCC_OscConfig+0x4e0>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fa3d 	bl	8000f30 <HAL_InitTick>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e2db      	b.n	8002078 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac0:	f7ff fac0 	bl	8001044 <HAL_GetTick>
 8001ac4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001ac8:	f7ff fabc 	bl	8001044 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e2ce      	b.n	8002078 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ada:	4b85      	ldr	r3, [pc, #532]	@ (8001cf0 <HAL_RCC_OscConfig+0x4dc>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d0f0      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001ae6:	4b82      	ldr	r3, [pc, #520]	@ (8001cf0 <HAL_RCC_OscConfig+0x4dc>)
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	041b      	lsls	r3, r3, #16
 8001af4:	497e      	ldr	r1, [pc, #504]	@ (8001cf0 <HAL_RCC_OscConfig+0x4dc>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001afa:	e049      	b.n	8001b90 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d02c      	beq.n	8001b5e <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001b04:	4b7a      	ldr	r3, [pc, #488]	@ (8001cf0 <HAL_RCC_OscConfig+0x4dc>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f023 0218 	bic.w	r2, r3, #24
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	4977      	ldr	r1, [pc, #476]	@ (8001cf0 <HAL_RCC_OscConfig+0x4dc>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8001b16:	4b76      	ldr	r3, [pc, #472]	@ (8001cf0 <HAL_RCC_OscConfig+0x4dc>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a75      	ldr	r2, [pc, #468]	@ (8001cf0 <HAL_RCC_OscConfig+0x4dc>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b22:	f7ff fa8f 	bl	8001044 <HAL_GetTick>
 8001b26:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001b2a:	f7ff fa8b 	bl	8001044 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e29d      	b.n	8002078 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b3c:	4b6c      	ldr	r3, [pc, #432]	@ (8001cf0 <HAL_RCC_OscConfig+0x4dc>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0f0      	beq.n	8001b2a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001b48:	4b69      	ldr	r3, [pc, #420]	@ (8001cf0 <HAL_RCC_OscConfig+0x4dc>)
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	041b      	lsls	r3, r3, #16
 8001b56:	4966      	ldr	r1, [pc, #408]	@ (8001cf0 <HAL_RCC_OscConfig+0x4dc>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	610b      	str	r3, [r1, #16]
 8001b5c:	e018      	b.n	8001b90 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b5e:	4b64      	ldr	r3, [pc, #400]	@ (8001cf0 <HAL_RCC_OscConfig+0x4dc>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a63      	ldr	r2, [pc, #396]	@ (8001cf0 <HAL_RCC_OscConfig+0x4dc>)
 8001b64:	f023 0301 	bic.w	r3, r3, #1
 8001b68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6a:	f7ff fa6b 	bl	8001044 <HAL_GetTick>
 8001b6e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001b72:	f7ff fa67 	bl	8001044 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e279      	b.n	8002078 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b84:	4b5a      	ldr	r3, [pc, #360]	@ (8001cf0 <HAL_RCC_OscConfig+0x4dc>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1f0      	bne.n	8001b72 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0308 	and.w	r3, r3, #8
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d03c      	beq.n	8001c16 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d01c      	beq.n	8001bde <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ba4:	4b52      	ldr	r3, [pc, #328]	@ (8001cf0 <HAL_RCC_OscConfig+0x4dc>)
 8001ba6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001baa:	4a51      	ldr	r2, [pc, #324]	@ (8001cf0 <HAL_RCC_OscConfig+0x4dc>)
 8001bac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001bb0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb4:	f7ff fa46 	bl	8001044 <HAL_GetTick>
 8001bb8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001bbc:	f7ff fa42 	bl	8001044 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e254      	b.n	8002078 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001bce:	4b48      	ldr	r3, [pc, #288]	@ (8001cf0 <HAL_RCC_OscConfig+0x4dc>)
 8001bd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0ef      	beq.n	8001bbc <HAL_RCC_OscConfig+0x3a8>
 8001bdc:	e01b      	b.n	8001c16 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bde:	4b44      	ldr	r3, [pc, #272]	@ (8001cf0 <HAL_RCC_OscConfig+0x4dc>)
 8001be0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001be4:	4a42      	ldr	r2, [pc, #264]	@ (8001cf0 <HAL_RCC_OscConfig+0x4dc>)
 8001be6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001bea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bee:	f7ff fa29 	bl	8001044 <HAL_GetTick>
 8001bf2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001bf6:	f7ff fa25 	bl	8001044 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e237      	b.n	8002078 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001c08:	4b39      	ldr	r3, [pc, #228]	@ (8001cf0 <HAL_RCC_OscConfig+0x4dc>)
 8001c0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1ef      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0304 	and.w	r3, r3, #4
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 80d2 	beq.w	8001dc8 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001c24:	4b34      	ldr	r3, [pc, #208]	@ (8001cf8 <HAL_RCC_OscConfig+0x4e4>)
 8001c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d118      	bne.n	8001c62 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001c30:	4b31      	ldr	r3, [pc, #196]	@ (8001cf8 <HAL_RCC_OscConfig+0x4e4>)
 8001c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c34:	4a30      	ldr	r2, [pc, #192]	@ (8001cf8 <HAL_RCC_OscConfig+0x4e4>)
 8001c36:	f043 0301 	orr.w	r3, r3, #1
 8001c3a:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3c:	f7ff fa02 	bl	8001044 <HAL_GetTick>
 8001c40:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c44:	f7ff f9fe 	bl	8001044 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e210      	b.n	8002078 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001c56:	4b28      	ldr	r3, [pc, #160]	@ (8001cf8 <HAL_RCC_OscConfig+0x4e4>)
 8001c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0f0      	beq.n	8001c44 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d108      	bne.n	8001c7c <HAL_RCC_OscConfig+0x468>
 8001c6a:	4b21      	ldr	r3, [pc, #132]	@ (8001cf0 <HAL_RCC_OscConfig+0x4dc>)
 8001c6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c70:	4a1f      	ldr	r2, [pc, #124]	@ (8001cf0 <HAL_RCC_OscConfig+0x4dc>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c7a:	e074      	b.n	8001d66 <HAL_RCC_OscConfig+0x552>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d118      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x4a2>
 8001c84:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf0 <HAL_RCC_OscConfig+0x4dc>)
 8001c86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c8a:	4a19      	ldr	r2, [pc, #100]	@ (8001cf0 <HAL_RCC_OscConfig+0x4dc>)
 8001c8c:	f023 0301 	bic.w	r3, r3, #1
 8001c90:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c94:	4b16      	ldr	r3, [pc, #88]	@ (8001cf0 <HAL_RCC_OscConfig+0x4dc>)
 8001c96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c9a:	4a15      	ldr	r2, [pc, #84]	@ (8001cf0 <HAL_RCC_OscConfig+0x4dc>)
 8001c9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001ca0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001ca4:	4b12      	ldr	r3, [pc, #72]	@ (8001cf0 <HAL_RCC_OscConfig+0x4dc>)
 8001ca6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001caa:	4a11      	ldr	r2, [pc, #68]	@ (8001cf0 <HAL_RCC_OscConfig+0x4dc>)
 8001cac:	f023 0304 	bic.w	r3, r3, #4
 8001cb0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001cb4:	e057      	b.n	8001d66 <HAL_RCC_OscConfig+0x552>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	2b05      	cmp	r3, #5
 8001cbc:	d11e      	bne.n	8001cfc <HAL_RCC_OscConfig+0x4e8>
 8001cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf0 <HAL_RCC_OscConfig+0x4dc>)
 8001cc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cc4:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf0 <HAL_RCC_OscConfig+0x4dc>)
 8001cc6:	f043 0304 	orr.w	r3, r3, #4
 8001cca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001cce:	4b08      	ldr	r3, [pc, #32]	@ (8001cf0 <HAL_RCC_OscConfig+0x4dc>)
 8001cd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cd4:	4a06      	ldr	r2, [pc, #24]	@ (8001cf0 <HAL_RCC_OscConfig+0x4dc>)
 8001cd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001cda:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001cde:	4b04      	ldr	r3, [pc, #16]	@ (8001cf0 <HAL_RCC_OscConfig+0x4dc>)
 8001ce0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ce4:	4a02      	ldr	r2, [pc, #8]	@ (8001cf0 <HAL_RCC_OscConfig+0x4dc>)
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001cee:	e03a      	b.n	8001d66 <HAL_RCC_OscConfig+0x552>
 8001cf0:	44020c00 	.word	0x44020c00
 8001cf4:	20000020 	.word	0x20000020
 8001cf8:	44020800 	.word	0x44020800
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	2b85      	cmp	r3, #133	@ 0x85
 8001d02:	d118      	bne.n	8001d36 <HAL_RCC_OscConfig+0x522>
 8001d04:	4ba2      	ldr	r3, [pc, #648]	@ (8001f90 <HAL_RCC_OscConfig+0x77c>)
 8001d06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d0a:	4aa1      	ldr	r2, [pc, #644]	@ (8001f90 <HAL_RCC_OscConfig+0x77c>)
 8001d0c:	f043 0304 	orr.w	r3, r3, #4
 8001d10:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d14:	4b9e      	ldr	r3, [pc, #632]	@ (8001f90 <HAL_RCC_OscConfig+0x77c>)
 8001d16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d1a:	4a9d      	ldr	r2, [pc, #628]	@ (8001f90 <HAL_RCC_OscConfig+0x77c>)
 8001d1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d20:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d24:	4b9a      	ldr	r3, [pc, #616]	@ (8001f90 <HAL_RCC_OscConfig+0x77c>)
 8001d26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d2a:	4a99      	ldr	r2, [pc, #612]	@ (8001f90 <HAL_RCC_OscConfig+0x77c>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d34:	e017      	b.n	8001d66 <HAL_RCC_OscConfig+0x552>
 8001d36:	4b96      	ldr	r3, [pc, #600]	@ (8001f90 <HAL_RCC_OscConfig+0x77c>)
 8001d38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d3c:	4a94      	ldr	r2, [pc, #592]	@ (8001f90 <HAL_RCC_OscConfig+0x77c>)
 8001d3e:	f023 0301 	bic.w	r3, r3, #1
 8001d42:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d46:	4b92      	ldr	r3, [pc, #584]	@ (8001f90 <HAL_RCC_OscConfig+0x77c>)
 8001d48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d4c:	4a90      	ldr	r2, [pc, #576]	@ (8001f90 <HAL_RCC_OscConfig+0x77c>)
 8001d4e:	f023 0304 	bic.w	r3, r3, #4
 8001d52:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d56:	4b8e      	ldr	r3, [pc, #568]	@ (8001f90 <HAL_RCC_OscConfig+0x77c>)
 8001d58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d5c:	4a8c      	ldr	r2, [pc, #560]	@ (8001f90 <HAL_RCC_OscConfig+0x77c>)
 8001d5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001d62:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d016      	beq.n	8001d9c <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d6e:	f7ff f969 	bl	8001044 <HAL_GetTick>
 8001d72:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d74:	e00a      	b.n	8001d8c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d76:	f7ff f965 	bl	8001044 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e175      	b.n	8002078 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d8c:	4b80      	ldr	r3, [pc, #512]	@ (8001f90 <HAL_RCC_OscConfig+0x77c>)
 8001d8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0ed      	beq.n	8001d76 <HAL_RCC_OscConfig+0x562>
 8001d9a:	e015      	b.n	8001dc8 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d9c:	f7ff f952 	bl	8001044 <HAL_GetTick>
 8001da0:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001da2:	e00a      	b.n	8001dba <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da4:	f7ff f94e 	bl	8001044 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e15e      	b.n	8002078 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dba:	4b75      	ldr	r3, [pc, #468]	@ (8001f90 <HAL_RCC_OscConfig+0x77c>)
 8001dbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1ed      	bne.n	8001da4 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0320 	and.w	r3, r3, #32
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d036      	beq.n	8001e42 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d019      	beq.n	8001e10 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ddc:	4b6c      	ldr	r3, [pc, #432]	@ (8001f90 <HAL_RCC_OscConfig+0x77c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a6b      	ldr	r2, [pc, #428]	@ (8001f90 <HAL_RCC_OscConfig+0x77c>)
 8001de2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001de6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de8:	f7ff f92c 	bl	8001044 <HAL_GetTick>
 8001dec:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001df0:	f7ff f928 	bl	8001044 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e13a      	b.n	8002078 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001e02:	4b63      	ldr	r3, [pc, #396]	@ (8001f90 <HAL_RCC_OscConfig+0x77c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0f0      	beq.n	8001df0 <HAL_RCC_OscConfig+0x5dc>
 8001e0e:	e018      	b.n	8001e42 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e10:	4b5f      	ldr	r3, [pc, #380]	@ (8001f90 <HAL_RCC_OscConfig+0x77c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a5e      	ldr	r2, [pc, #376]	@ (8001f90 <HAL_RCC_OscConfig+0x77c>)
 8001e16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001e1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e1c:	f7ff f912 	bl	8001044 <HAL_GetTick>
 8001e20:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001e24:	f7ff f90e 	bl	8001044 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e120      	b.n	8002078 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001e36:	4b56      	ldr	r3, [pc, #344]	@ (8001f90 <HAL_RCC_OscConfig+0x77c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f0      	bne.n	8001e24 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 8115 	beq.w	8002076 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	2b18      	cmp	r3, #24
 8001e50:	f000 80af 	beq.w	8001fb2 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	f040 8086 	bne.w	8001f6a <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001e5e:	4b4c      	ldr	r3, [pc, #304]	@ (8001f90 <HAL_RCC_OscConfig+0x77c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a4b      	ldr	r2, [pc, #300]	@ (8001f90 <HAL_RCC_OscConfig+0x77c>)
 8001e64:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6a:	f7ff f8eb 	bl	8001044 <HAL_GetTick>
 8001e6e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001e72:	f7ff f8e7 	bl	8001044 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e0f9      	b.n	8002078 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001e84:	4b42      	ldr	r3, [pc, #264]	@ (8001f90 <HAL_RCC_OscConfig+0x77c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1f0      	bne.n	8001e72 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8001e90:	4b3f      	ldr	r3, [pc, #252]	@ (8001f90 <HAL_RCC_OscConfig+0x77c>)
 8001e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e94:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001e98:	f023 0303 	bic.w	r3, r3, #3
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001ea4:	0212      	lsls	r2, r2, #8
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	4939      	ldr	r1, [pc, #228]	@ (8001f90 <HAL_RCC_OscConfig+0x77c>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	628b      	str	r3, [r1, #40]	@ 0x28
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	025b      	lsls	r3, r3, #9
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	041b      	lsls	r3, r3, #16
 8001ecc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	061b      	lsls	r3, r3, #24
 8001eda:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001ede:	492c      	ldr	r1, [pc, #176]	@ (8001f90 <HAL_RCC_OscConfig+0x77c>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001ee4:	4b2a      	ldr	r3, [pc, #168]	@ (8001f90 <HAL_RCC_OscConfig+0x77c>)
 8001ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee8:	4a29      	ldr	r2, [pc, #164]	@ (8001f90 <HAL_RCC_OscConfig+0x77c>)
 8001eea:	f023 0310 	bic.w	r3, r3, #16
 8001eee:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ef4:	4a26      	ldr	r2, [pc, #152]	@ (8001f90 <HAL_RCC_OscConfig+0x77c>)
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001efa:	4b25      	ldr	r3, [pc, #148]	@ (8001f90 <HAL_RCC_OscConfig+0x77c>)
 8001efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001efe:	4a24      	ldr	r2, [pc, #144]	@ (8001f90 <HAL_RCC_OscConfig+0x77c>)
 8001f00:	f043 0310 	orr.w	r3, r3, #16
 8001f04:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8001f06:	4b22      	ldr	r3, [pc, #136]	@ (8001f90 <HAL_RCC_OscConfig+0x77c>)
 8001f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f0a:	f023 020c 	bic.w	r2, r3, #12
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f12:	491f      	ldr	r1, [pc, #124]	@ (8001f90 <HAL_RCC_OscConfig+0x77c>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8001f18:	4b1d      	ldr	r3, [pc, #116]	@ (8001f90 <HAL_RCC_OscConfig+0x77c>)
 8001f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f1c:	f023 0220 	bic.w	r2, r3, #32
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f24:	491a      	ldr	r1, [pc, #104]	@ (8001f90 <HAL_RCC_OscConfig+0x77c>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001f2a:	4b19      	ldr	r3, [pc, #100]	@ (8001f90 <HAL_RCC_OscConfig+0x77c>)
 8001f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f2e:	4a18      	ldr	r2, [pc, #96]	@ (8001f90 <HAL_RCC_OscConfig+0x77c>)
 8001f30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f34:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8001f36:	4b16      	ldr	r3, [pc, #88]	@ (8001f90 <HAL_RCC_OscConfig+0x77c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a15      	ldr	r2, [pc, #84]	@ (8001f90 <HAL_RCC_OscConfig+0x77c>)
 8001f3c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f42:	f7ff f87f 	bl	8001044 <HAL_GetTick>
 8001f46:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001f4a:	f7ff f87b 	bl	8001044 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e08d      	b.n	8002078 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f90 <HAL_RCC_OscConfig+0x77c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0f0      	beq.n	8001f4a <HAL_RCC_OscConfig+0x736>
 8001f68:	e085      	b.n	8002076 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001f6a:	4b09      	ldr	r3, [pc, #36]	@ (8001f90 <HAL_RCC_OscConfig+0x77c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a08      	ldr	r2, [pc, #32]	@ (8001f90 <HAL_RCC_OscConfig+0x77c>)
 8001f70:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f76:	f7ff f865 	bl	8001044 <HAL_GetTick>
 8001f7a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001f7c:	e00a      	b.n	8001f94 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001f7e:	f7ff f861 	bl	8001044 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d903      	bls.n	8001f94 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e073      	b.n	8002078 <HAL_RCC_OscConfig+0x864>
 8001f90:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001f94:	4b3a      	ldr	r3, [pc, #232]	@ (8002080 <HAL_RCC_OscConfig+0x86c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1ee      	bne.n	8001f7e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8001fa0:	4b37      	ldr	r3, [pc, #220]	@ (8002080 <HAL_RCC_OscConfig+0x86c>)
 8001fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa4:	4a36      	ldr	r2, [pc, #216]	@ (8002080 <HAL_RCC_OscConfig+0x86c>)
 8001fa6:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8001faa:	f023 0303 	bic.w	r3, r3, #3
 8001fae:	6293      	str	r3, [r2, #40]	@ 0x28
 8001fb0:	e061      	b.n	8002076 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8001fb2:	4b33      	ldr	r3, [pc, #204]	@ (8002080 <HAL_RCC_OscConfig+0x86c>)
 8001fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001fb8:	4b31      	ldr	r3, [pc, #196]	@ (8002080 <HAL_RCC_OscConfig+0x86c>)
 8001fba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fbc:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d031      	beq.n	800202a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	f003 0203 	and.w	r2, r3, #3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d12a      	bne.n	800202a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	0a1b      	lsrs	r3, r3, #8
 8001fd8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d122      	bne.n	800202a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fee:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d11a      	bne.n	800202a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	0a5b      	lsrs	r3, r3, #9
 8001ff8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002000:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002002:	429a      	cmp	r2, r3
 8002004:	d111      	bne.n	800202a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	0c1b      	lsrs	r3, r3, #16
 800200a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002012:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002014:	429a      	cmp	r2, r3
 8002016:	d108      	bne.n	800202a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	0e1b      	lsrs	r3, r3, #24
 800201c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002024:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002026:	429a      	cmp	r2, r3
 8002028:	d001      	beq.n	800202e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e024      	b.n	8002078 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800202e:	4b14      	ldr	r3, [pc, #80]	@ (8002080 <HAL_RCC_OscConfig+0x86c>)
 8002030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002032:	08db      	lsrs	r3, r3, #3
 8002034:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800203c:	429a      	cmp	r2, r3
 800203e:	d01a      	beq.n	8002076 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002040:	4b0f      	ldr	r3, [pc, #60]	@ (8002080 <HAL_RCC_OscConfig+0x86c>)
 8002042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002044:	4a0e      	ldr	r2, [pc, #56]	@ (8002080 <HAL_RCC_OscConfig+0x86c>)
 8002046:	f023 0310 	bic.w	r3, r3, #16
 800204a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204c:	f7fe fffa 	bl	8001044 <HAL_GetTick>
 8002050:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8002052:	bf00      	nop
 8002054:	f7fe fff6 	bl	8001044 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	4293      	cmp	r3, r2
 800205e:	d0f9      	beq.n	8002054 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002064:	4a06      	ldr	r2, [pc, #24]	@ (8002080 <HAL_RCC_OscConfig+0x86c>)
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800206a:	4b05      	ldr	r3, [pc, #20]	@ (8002080 <HAL_RCC_OscConfig+0x86c>)
 800206c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800206e:	4a04      	ldr	r2, [pc, #16]	@ (8002080 <HAL_RCC_OscConfig+0x86c>)
 8002070:	f043 0310 	orr.w	r3, r3, #16
 8002074:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3720      	adds	r7, #32
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	44020c00 	.word	0x44020c00

08002084 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e19e      	b.n	80023d6 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002098:	4b83      	ldr	r3, [pc, #524]	@ (80022a8 <HAL_RCC_ClockConfig+0x224>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 030f 	and.w	r3, r3, #15
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d910      	bls.n	80020c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a6:	4b80      	ldr	r3, [pc, #512]	@ (80022a8 <HAL_RCC_ClockConfig+0x224>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f023 020f 	bic.w	r2, r3, #15
 80020ae:	497e      	ldr	r1, [pc, #504]	@ (80022a8 <HAL_RCC_ClockConfig+0x224>)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b6:	4b7c      	ldr	r3, [pc, #496]	@ (80022a8 <HAL_RCC_ClockConfig+0x224>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d001      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e186      	b.n	80023d6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0310 	and.w	r3, r3, #16
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d012      	beq.n	80020fa <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	695a      	ldr	r2, [r3, #20]
 80020d8:	4b74      	ldr	r3, [pc, #464]	@ (80022ac <HAL_RCC_ClockConfig+0x228>)
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	0a1b      	lsrs	r3, r3, #8
 80020de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d909      	bls.n	80020fa <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80020e6:	4b71      	ldr	r3, [pc, #452]	@ (80022ac <HAL_RCC_ClockConfig+0x228>)
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	021b      	lsls	r3, r3, #8
 80020f4:	496d      	ldr	r1, [pc, #436]	@ (80022ac <HAL_RCC_ClockConfig+0x228>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	2b00      	cmp	r3, #0
 8002104:	d012      	beq.n	800212c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	691a      	ldr	r2, [r3, #16]
 800210a:	4b68      	ldr	r3, [pc, #416]	@ (80022ac <HAL_RCC_ClockConfig+0x228>)
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	091b      	lsrs	r3, r3, #4
 8002110:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002114:	429a      	cmp	r2, r3
 8002116:	d909      	bls.n	800212c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002118:	4b64      	ldr	r3, [pc, #400]	@ (80022ac <HAL_RCC_ClockConfig+0x228>)
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	011b      	lsls	r3, r3, #4
 8002126:	4961      	ldr	r1, [pc, #388]	@ (80022ac <HAL_RCC_ClockConfig+0x228>)
 8002128:	4313      	orrs	r3, r2
 800212a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b00      	cmp	r3, #0
 8002136:	d010      	beq.n	800215a <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68da      	ldr	r2, [r3, #12]
 800213c:	4b5b      	ldr	r3, [pc, #364]	@ (80022ac <HAL_RCC_ClockConfig+0x228>)
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002144:	429a      	cmp	r2, r3
 8002146:	d908      	bls.n	800215a <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002148:	4b58      	ldr	r3, [pc, #352]	@ (80022ac <HAL_RCC_ClockConfig+0x228>)
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	4955      	ldr	r1, [pc, #340]	@ (80022ac <HAL_RCC_ClockConfig+0x228>)
 8002156:	4313      	orrs	r3, r2
 8002158:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d010      	beq.n	8002188 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	4b50      	ldr	r3, [pc, #320]	@ (80022ac <HAL_RCC_ClockConfig+0x228>)
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	429a      	cmp	r2, r3
 8002174:	d908      	bls.n	8002188 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002176:	4b4d      	ldr	r3, [pc, #308]	@ (80022ac <HAL_RCC_ClockConfig+0x228>)
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	f023 020f 	bic.w	r2, r3, #15
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	494a      	ldr	r1, [pc, #296]	@ (80022ac <HAL_RCC_ClockConfig+0x228>)
 8002184:	4313      	orrs	r3, r2
 8002186:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	2b00      	cmp	r3, #0
 8002192:	f000 8093 	beq.w	80022bc <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b03      	cmp	r3, #3
 800219c:	d107      	bne.n	80021ae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800219e:	4b43      	ldr	r3, [pc, #268]	@ (80022ac <HAL_RCC_ClockConfig+0x228>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d121      	bne.n	80021ee <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e113      	b.n	80023d6 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d107      	bne.n	80021c6 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021b6:	4b3d      	ldr	r3, [pc, #244]	@ (80022ac <HAL_RCC_ClockConfig+0x228>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d115      	bne.n	80021ee <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e107      	b.n	80023d6 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d107      	bne.n	80021de <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80021ce:	4b37      	ldr	r3, [pc, #220]	@ (80022ac <HAL_RCC_ClockConfig+0x228>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d109      	bne.n	80021ee <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e0fb      	b.n	80023d6 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021de:	4b33      	ldr	r3, [pc, #204]	@ (80022ac <HAL_RCC_ClockConfig+0x228>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e0f3      	b.n	80023d6 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80021ee:	4b2f      	ldr	r3, [pc, #188]	@ (80022ac <HAL_RCC_ClockConfig+0x228>)
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	f023 0203 	bic.w	r2, r3, #3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	492c      	ldr	r1, [pc, #176]	@ (80022ac <HAL_RCC_ClockConfig+0x228>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002200:	f7fe ff20 	bl	8001044 <HAL_GetTick>
 8002204:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b03      	cmp	r3, #3
 800220c:	d112      	bne.n	8002234 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800220e:	e00a      	b.n	8002226 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002210:	f7fe ff18 	bl	8001044 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800221e:	4293      	cmp	r3, r2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e0d7      	b.n	80023d6 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002226:	4b21      	ldr	r3, [pc, #132]	@ (80022ac <HAL_RCC_ClockConfig+0x228>)
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	f003 0318 	and.w	r3, r3, #24
 800222e:	2b18      	cmp	r3, #24
 8002230:	d1ee      	bne.n	8002210 <HAL_RCC_ClockConfig+0x18c>
 8002232:	e043      	b.n	80022bc <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b02      	cmp	r3, #2
 800223a:	d112      	bne.n	8002262 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800223c:	e00a      	b.n	8002254 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800223e:	f7fe ff01 	bl	8001044 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	f241 3288 	movw	r2, #5000	@ 0x1388
 800224c:	4293      	cmp	r3, r2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e0c0      	b.n	80023d6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002254:	4b15      	ldr	r3, [pc, #84]	@ (80022ac <HAL_RCC_ClockConfig+0x228>)
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	f003 0318 	and.w	r3, r3, #24
 800225c:	2b10      	cmp	r3, #16
 800225e:	d1ee      	bne.n	800223e <HAL_RCC_ClockConfig+0x1ba>
 8002260:	e02c      	b.n	80022bc <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d122      	bne.n	80022b0 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800226a:	e00a      	b.n	8002282 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800226c:	f7fe feea 	bl	8001044 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	f241 3288 	movw	r2, #5000	@ 0x1388
 800227a:	4293      	cmp	r3, r2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e0a9      	b.n	80023d6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002282:	4b0a      	ldr	r3, [pc, #40]	@ (80022ac <HAL_RCC_ClockConfig+0x228>)
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	f003 0318 	and.w	r3, r3, #24
 800228a:	2b08      	cmp	r3, #8
 800228c:	d1ee      	bne.n	800226c <HAL_RCC_ClockConfig+0x1e8>
 800228e:	e015      	b.n	80022bc <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002290:	f7fe fed8 	bl	8001044 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800229e:	4293      	cmp	r3, r2
 80022a0:	d906      	bls.n	80022b0 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e097      	b.n	80023d6 <HAL_RCC_ClockConfig+0x352>
 80022a6:	bf00      	nop
 80022a8:	40022000 	.word	0x40022000
 80022ac:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80022b0:	4b4b      	ldr	r3, [pc, #300]	@ (80023e0 <HAL_RCC_ClockConfig+0x35c>)
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	f003 0318 	and.w	r3, r3, #24
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1e9      	bne.n	8002290 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d010      	beq.n	80022ea <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	4b44      	ldr	r3, [pc, #272]	@ (80023e0 <HAL_RCC_ClockConfig+0x35c>)
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	f003 030f 	and.w	r3, r3, #15
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d208      	bcs.n	80022ea <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80022d8:	4b41      	ldr	r3, [pc, #260]	@ (80023e0 <HAL_RCC_ClockConfig+0x35c>)
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	f023 020f 	bic.w	r2, r3, #15
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	493e      	ldr	r1, [pc, #248]	@ (80023e0 <HAL_RCC_ClockConfig+0x35c>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022ea:	4b3e      	ldr	r3, [pc, #248]	@ (80023e4 <HAL_RCC_ClockConfig+0x360>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d210      	bcs.n	800231a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f8:	4b3a      	ldr	r3, [pc, #232]	@ (80023e4 <HAL_RCC_ClockConfig+0x360>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f023 020f 	bic.w	r2, r3, #15
 8002300:	4938      	ldr	r1, [pc, #224]	@ (80023e4 <HAL_RCC_ClockConfig+0x360>)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	4313      	orrs	r3, r2
 8002306:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002308:	4b36      	ldr	r3, [pc, #216]	@ (80023e4 <HAL_RCC_ClockConfig+0x360>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 030f 	and.w	r3, r3, #15
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	429a      	cmp	r2, r3
 8002314:	d001      	beq.n	800231a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e05d      	b.n	80023d6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0304 	and.w	r3, r3, #4
 8002322:	2b00      	cmp	r3, #0
 8002324:	d010      	beq.n	8002348 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	68da      	ldr	r2, [r3, #12]
 800232a:	4b2d      	ldr	r3, [pc, #180]	@ (80023e0 <HAL_RCC_ClockConfig+0x35c>)
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002332:	429a      	cmp	r2, r3
 8002334:	d208      	bcs.n	8002348 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002336:	4b2a      	ldr	r3, [pc, #168]	@ (80023e0 <HAL_RCC_ClockConfig+0x35c>)
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	4927      	ldr	r1, [pc, #156]	@ (80023e0 <HAL_RCC_ClockConfig+0x35c>)
 8002344:	4313      	orrs	r3, r2
 8002346:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0308 	and.w	r3, r3, #8
 8002350:	2b00      	cmp	r3, #0
 8002352:	d012      	beq.n	800237a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	691a      	ldr	r2, [r3, #16]
 8002358:	4b21      	ldr	r3, [pc, #132]	@ (80023e0 <HAL_RCC_ClockConfig+0x35c>)
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	091b      	lsrs	r3, r3, #4
 800235e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002362:	429a      	cmp	r2, r3
 8002364:	d209      	bcs.n	800237a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002366:	4b1e      	ldr	r3, [pc, #120]	@ (80023e0 <HAL_RCC_ClockConfig+0x35c>)
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	011b      	lsls	r3, r3, #4
 8002374:	491a      	ldr	r1, [pc, #104]	@ (80023e0 <HAL_RCC_ClockConfig+0x35c>)
 8002376:	4313      	orrs	r3, r2
 8002378:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0310 	and.w	r3, r3, #16
 8002382:	2b00      	cmp	r3, #0
 8002384:	d012      	beq.n	80023ac <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695a      	ldr	r2, [r3, #20]
 800238a:	4b15      	ldr	r3, [pc, #84]	@ (80023e0 <HAL_RCC_ClockConfig+0x35c>)
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	0a1b      	lsrs	r3, r3, #8
 8002390:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002394:	429a      	cmp	r2, r3
 8002396:	d209      	bcs.n	80023ac <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002398:	4b11      	ldr	r3, [pc, #68]	@ (80023e0 <HAL_RCC_ClockConfig+0x35c>)
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	021b      	lsls	r3, r3, #8
 80023a6:	490e      	ldr	r1, [pc, #56]	@ (80023e0 <HAL_RCC_ClockConfig+0x35c>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80023ac:	f000 f822 	bl	80023f4 <HAL_RCC_GetSysClockFreq>
 80023b0:	4602      	mov	r2, r0
 80023b2:	4b0b      	ldr	r3, [pc, #44]	@ (80023e0 <HAL_RCC_ClockConfig+0x35c>)
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	490b      	ldr	r1, [pc, #44]	@ (80023e8 <HAL_RCC_ClockConfig+0x364>)
 80023bc:	5ccb      	ldrb	r3, [r1, r3]
 80023be:	fa22 f303 	lsr.w	r3, r2, r3
 80023c2:	4a0a      	ldr	r2, [pc, #40]	@ (80023ec <HAL_RCC_ClockConfig+0x368>)
 80023c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80023c6:	4b0a      	ldr	r3, [pc, #40]	@ (80023f0 <HAL_RCC_ClockConfig+0x36c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7fe fdb0 	bl	8000f30 <HAL_InitTick>
 80023d0:	4603      	mov	r3, r0
 80023d2:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80023d4:	7afb      	ldrb	r3, [r7, #11]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	44020c00 	.word	0x44020c00
 80023e4:	40022000 	.word	0x40022000
 80023e8:	08005f84 	.word	0x08005f84
 80023ec:	20000000 	.word	0x20000000
 80023f0:	20000020 	.word	0x20000020

080023f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b089      	sub	sp, #36	@ 0x24
 80023f8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80023fa:	4b8c      	ldr	r3, [pc, #560]	@ (800262c <HAL_RCC_GetSysClockFreq+0x238>)
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	f003 0318 	and.w	r3, r3, #24
 8002402:	2b08      	cmp	r3, #8
 8002404:	d102      	bne.n	800240c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002406:	4b8a      	ldr	r3, [pc, #552]	@ (8002630 <HAL_RCC_GetSysClockFreq+0x23c>)
 8002408:	61fb      	str	r3, [r7, #28]
 800240a:	e107      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800240c:	4b87      	ldr	r3, [pc, #540]	@ (800262c <HAL_RCC_GetSysClockFreq+0x238>)
 800240e:	69db      	ldr	r3, [r3, #28]
 8002410:	f003 0318 	and.w	r3, r3, #24
 8002414:	2b00      	cmp	r3, #0
 8002416:	d112      	bne.n	800243e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002418:	4b84      	ldr	r3, [pc, #528]	@ (800262c <HAL_RCC_GetSysClockFreq+0x238>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0320 	and.w	r3, r3, #32
 8002420:	2b00      	cmp	r3, #0
 8002422:	d009      	beq.n	8002438 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002424:	4b81      	ldr	r3, [pc, #516]	@ (800262c <HAL_RCC_GetSysClockFreq+0x238>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	08db      	lsrs	r3, r3, #3
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	4a81      	ldr	r2, [pc, #516]	@ (8002634 <HAL_RCC_GetSysClockFreq+0x240>)
 8002430:	fa22 f303 	lsr.w	r3, r2, r3
 8002434:	61fb      	str	r3, [r7, #28]
 8002436:	e0f1      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002438:	4b7e      	ldr	r3, [pc, #504]	@ (8002634 <HAL_RCC_GetSysClockFreq+0x240>)
 800243a:	61fb      	str	r3, [r7, #28]
 800243c:	e0ee      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800243e:	4b7b      	ldr	r3, [pc, #492]	@ (800262c <HAL_RCC_GetSysClockFreq+0x238>)
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	f003 0318 	and.w	r3, r3, #24
 8002446:	2b10      	cmp	r3, #16
 8002448:	d102      	bne.n	8002450 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800244a:	4b7b      	ldr	r3, [pc, #492]	@ (8002638 <HAL_RCC_GetSysClockFreq+0x244>)
 800244c:	61fb      	str	r3, [r7, #28]
 800244e:	e0e5      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002450:	4b76      	ldr	r3, [pc, #472]	@ (800262c <HAL_RCC_GetSysClockFreq+0x238>)
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	f003 0318 	and.w	r3, r3, #24
 8002458:	2b18      	cmp	r3, #24
 800245a:	f040 80dd 	bne.w	8002618 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800245e:	4b73      	ldr	r3, [pc, #460]	@ (800262c <HAL_RCC_GetSysClockFreq+0x238>)
 8002460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002468:	4b70      	ldr	r3, [pc, #448]	@ (800262c <HAL_RCC_GetSysClockFreq+0x238>)
 800246a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246c:	0a1b      	lsrs	r3, r3, #8
 800246e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002472:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002474:	4b6d      	ldr	r3, [pc, #436]	@ (800262c <HAL_RCC_GetSysClockFreq+0x238>)
 8002476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002478:	091b      	lsrs	r3, r3, #4
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002480:	4b6a      	ldr	r3, [pc, #424]	@ (800262c <HAL_RCC_GetSysClockFreq+0x238>)
 8002482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002484:	08db      	lsrs	r3, r3, #3
 8002486:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	fb02 f303 	mul.w	r3, r2, r3
 8002490:	ee07 3a90 	vmov	s15, r3
 8002494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002498:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 80b7 	beq.w	8002612 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d003      	beq.n	80024b2 <HAL_RCC_GetSysClockFreq+0xbe>
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	2b03      	cmp	r3, #3
 80024ae:	d056      	beq.n	800255e <HAL_RCC_GetSysClockFreq+0x16a>
 80024b0:	e077      	b.n	80025a2 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80024b2:	4b5e      	ldr	r3, [pc, #376]	@ (800262c <HAL_RCC_GetSysClockFreq+0x238>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0320 	and.w	r3, r3, #32
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d02d      	beq.n	800251a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80024be:	4b5b      	ldr	r3, [pc, #364]	@ (800262c <HAL_RCC_GetSysClockFreq+0x238>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	08db      	lsrs	r3, r3, #3
 80024c4:	f003 0303 	and.w	r3, r3, #3
 80024c8:	4a5a      	ldr	r2, [pc, #360]	@ (8002634 <HAL_RCC_GetSysClockFreq+0x240>)
 80024ca:	fa22 f303 	lsr.w	r3, r2, r3
 80024ce:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	ee07 3a90 	vmov	s15, r3
 80024d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	ee07 3a90 	vmov	s15, r3
 80024e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024e8:	4b50      	ldr	r3, [pc, #320]	@ (800262c <HAL_RCC_GetSysClockFreq+0x238>)
 80024ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024f0:	ee07 3a90 	vmov	s15, r3
 80024f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80024f8:	ed97 6a02 	vldr	s12, [r7, #8]
 80024fc:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 800263c <HAL_RCC_GetSysClockFreq+0x248>
 8002500:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002504:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002508:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800250c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002510:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002514:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002518:	e065      	b.n	80025e6 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	ee07 3a90 	vmov	s15, r3
 8002520:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002524:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002640 <HAL_RCC_GetSysClockFreq+0x24c>
 8002528:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800252c:	4b3f      	ldr	r3, [pc, #252]	@ (800262c <HAL_RCC_GetSysClockFreq+0x238>)
 800252e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002534:	ee07 3a90 	vmov	s15, r3
 8002538:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800253c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002540:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800263c <HAL_RCC_GetSysClockFreq+0x248>
 8002544:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002548:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800254c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002550:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002558:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800255c:	e043      	b.n	80025e6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	ee07 3a90 	vmov	s15, r3
 8002564:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002568:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8002644 <HAL_RCC_GetSysClockFreq+0x250>
 800256c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002570:	4b2e      	ldr	r3, [pc, #184]	@ (800262c <HAL_RCC_GetSysClockFreq+0x238>)
 8002572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002578:	ee07 3a90 	vmov	s15, r3
 800257c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002580:	ed97 6a02 	vldr	s12, [r7, #8]
 8002584:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 800263c <HAL_RCC_GetSysClockFreq+0x248>
 8002588:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800258c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002590:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002594:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002598:	ee67 7a27 	vmul.f32	s15, s14, s15
 800259c:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80025a0:	e021      	b.n	80025e6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	ee07 3a90 	vmov	s15, r3
 80025a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025ac:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002648 <HAL_RCC_GetSysClockFreq+0x254>
 80025b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025b4:	4b1d      	ldr	r3, [pc, #116]	@ (800262c <HAL_RCC_GetSysClockFreq+0x238>)
 80025b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025bc:	ee07 3a90 	vmov	s15, r3
 80025c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80025c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80025c8:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 800263c <HAL_RCC_GetSysClockFreq+0x248>
 80025cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80025d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80025d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80025dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025e0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80025e4:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80025e6:	4b11      	ldr	r3, [pc, #68]	@ (800262c <HAL_RCC_GetSysClockFreq+0x238>)
 80025e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025ea:	0a5b      	lsrs	r3, r3, #9
 80025ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80025f0:	3301      	adds	r3, #1
 80025f2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	ee07 3a90 	vmov	s15, r3
 80025fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025fe:	edd7 6a06 	vldr	s13, [r7, #24]
 8002602:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002606:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800260a:	ee17 3a90 	vmov	r3, s15
 800260e:	61fb      	str	r3, [r7, #28]
 8002610:	e004      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002612:	2300      	movs	r3, #0
 8002614:	61fb      	str	r3, [r7, #28]
 8002616:	e001      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002618:	4b06      	ldr	r3, [pc, #24]	@ (8002634 <HAL_RCC_GetSysClockFreq+0x240>)
 800261a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 800261c:	69fb      	ldr	r3, [r7, #28]
}
 800261e:	4618      	mov	r0, r3
 8002620:	3724      	adds	r7, #36	@ 0x24
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	44020c00 	.word	0x44020c00
 8002630:	003d0900 	.word	0x003d0900
 8002634:	03d09000 	.word	0x03d09000
 8002638:	007a1200 	.word	0x007a1200
 800263c:	46000000 	.word	0x46000000
 8002640:	4c742400 	.word	0x4c742400
 8002644:	4af42400 	.word	0x4af42400
 8002648:	4a742400 	.word	0x4a742400

0800264c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002650:	f7ff fed0 	bl	80023f4 <HAL_RCC_GetSysClockFreq>
 8002654:	4602      	mov	r2, r0
 8002656:	4b08      	ldr	r3, [pc, #32]	@ (8002678 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002658:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800265a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800265e:	4907      	ldr	r1, [pc, #28]	@ (800267c <HAL_RCC_GetHCLKFreq+0x30>)
 8002660:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002662:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002666:	fa22 f303 	lsr.w	r3, r2, r3
 800266a:	4a05      	ldr	r2, [pc, #20]	@ (8002680 <HAL_RCC_GetHCLKFreq+0x34>)
 800266c:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800266e:	4b04      	ldr	r3, [pc, #16]	@ (8002680 <HAL_RCC_GetHCLKFreq+0x34>)
 8002670:	681b      	ldr	r3, [r3, #0]
}
 8002672:	4618      	mov	r0, r3
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	44020c00 	.word	0x44020c00
 800267c:	08005f84 	.word	0x08005f84
 8002680:	20000000 	.word	0x20000000

08002684 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8002688:	f7ff ffe0 	bl	800264c <HAL_RCC_GetHCLKFreq>
 800268c:	4602      	mov	r2, r0
 800268e:	4b06      	ldr	r3, [pc, #24]	@ (80026a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	091b      	lsrs	r3, r3, #4
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	4904      	ldr	r1, [pc, #16]	@ (80026ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800269a:	5ccb      	ldrb	r3, [r1, r3]
 800269c:	f003 031f 	and.w	r3, r3, #31
 80026a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	44020c00 	.word	0x44020c00
 80026ac:	08005f94 	.word	0x08005f94

080026b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80026b4:	f7ff ffca 	bl	800264c <HAL_RCC_GetHCLKFreq>
 80026b8:	4602      	mov	r2, r0
 80026ba:	4b06      	ldr	r3, [pc, #24]	@ (80026d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	0a1b      	lsrs	r3, r3, #8
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	4904      	ldr	r1, [pc, #16]	@ (80026d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026c6:	5ccb      	ldrb	r3, [r1, r3]
 80026c8:	f003 031f 	and.w	r3, r3, #31
 80026cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	44020c00 	.word	0x44020c00
 80026d8:	08005f94 	.word	0x08005f94

080026dc <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80026e0:	f7ff ffb4 	bl	800264c <HAL_RCC_GetHCLKFreq>
 80026e4:	4602      	mov	r2, r0
 80026e6:	4b06      	ldr	r3, [pc, #24]	@ (8002700 <HAL_RCC_GetPCLK3Freq+0x24>)
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	0b1b      	lsrs	r3, r3, #12
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	4904      	ldr	r1, [pc, #16]	@ (8002704 <HAL_RCC_GetPCLK3Freq+0x28>)
 80026f2:	5ccb      	ldrb	r3, [r1, r3]
 80026f4:	f003 031f 	and.w	r3, r3, #31
 80026f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	44020c00 	.word	0x44020c00
 8002704:	08005f94 	.word	0x08005f94

08002708 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8002708:	b480      	push	{r7}
 800270a:	b08b      	sub	sp, #44	@ 0x2c
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8002710:	4bae      	ldr	r3, [pc, #696]	@ (80029cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002718:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800271a:	4bac      	ldr	r3, [pc, #688]	@ (80029cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800271c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800271e:	f003 0303 	and.w	r3, r3, #3
 8002722:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002724:	4ba9      	ldr	r3, [pc, #676]	@ (80029cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002728:	0a1b      	lsrs	r3, r3, #8
 800272a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800272e:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002730:	4ba6      	ldr	r3, [pc, #664]	@ (80029cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002734:	091b      	lsrs	r3, r3, #4
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800273c:	4ba3      	ldr	r3, [pc, #652]	@ (80029cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800273e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002740:	08db      	lsrs	r3, r3, #3
 8002742:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	fb02 f303 	mul.w	r3, r2, r3
 800274c:	ee07 3a90 	vmov	s15, r3
 8002750:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002754:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 8126 	beq.w	80029ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	2b03      	cmp	r3, #3
 8002764:	d053      	beq.n	800280e <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	2b03      	cmp	r3, #3
 800276a:	d86f      	bhi.n	800284c <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d003      	beq.n	800277a <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	2b02      	cmp	r3, #2
 8002776:	d02b      	beq.n	80027d0 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8002778:	e068      	b.n	800284c <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800277a:	4b94      	ldr	r3, [pc, #592]	@ (80029cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	08db      	lsrs	r3, r3, #3
 8002780:	f003 0303 	and.w	r3, r3, #3
 8002784:	4a92      	ldr	r2, [pc, #584]	@ (80029d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8002786:	fa22 f303 	lsr.w	r3, r2, r3
 800278a:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	ee07 3a90 	vmov	s15, r3
 8002792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	ee07 3a90 	vmov	s15, r3
 800279c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027a4:	6a3b      	ldr	r3, [r7, #32]
 80027a6:	ee07 3a90 	vmov	s15, r3
 80027aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027ae:	ed97 6a04 	vldr	s12, [r7, #16]
 80027b2:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80029d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80027b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ca:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80027ce:	e068      	b.n	80028a2 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	ee07 3a90 	vmov	s15, r3
 80027d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027da:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80029d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80027de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	ee07 3a90 	vmov	s15, r3
 80027e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027ec:	ed97 6a04 	vldr	s12, [r7, #16]
 80027f0:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80029d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80027f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002800:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002804:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002808:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800280c:	e049      	b.n	80028a2 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	ee07 3a90 	vmov	s15, r3
 8002814:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002818:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80029dc <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 800281c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	ee07 3a90 	vmov	s15, r3
 8002826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800282a:	ed97 6a04 	vldr	s12, [r7, #16]
 800282e:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80029d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8002832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800283a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800283e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002846:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800284a:	e02a      	b.n	80028a2 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800284c:	4b5f      	ldr	r3, [pc, #380]	@ (80029cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	08db      	lsrs	r3, r3, #3
 8002852:	f003 0303 	and.w	r3, r3, #3
 8002856:	4a5e      	ldr	r2, [pc, #376]	@ (80029d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8002858:	fa22 f303 	lsr.w	r3, r2, r3
 800285c:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	ee07 3a90 	vmov	s15, r3
 8002864:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	ee07 3a90 	vmov	s15, r3
 800286e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	ee07 3a90 	vmov	s15, r3
 800287c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002880:	ed97 6a04 	vldr	s12, [r7, #16]
 8002884:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80029d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8002888:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800288c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002890:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002894:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002898:	ee67 7a27 	vmul.f32	s15, s14, s15
 800289c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80028a0:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80028a2:	4b4a      	ldr	r3, [pc, #296]	@ (80029cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80028ae:	d121      	bne.n	80028f4 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80028b0:	4b46      	ldr	r3, [pc, #280]	@ (80029cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80028b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d017      	beq.n	80028ec <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80028bc:	4b43      	ldr	r3, [pc, #268]	@ (80029cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80028be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028c0:	0a5b      	lsrs	r3, r3, #9
 80028c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028c6:	ee07 3a90 	vmov	s15, r3
 80028ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80028ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80028d2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80028d6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80028da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028e2:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	e006      	b.n	80028fa <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	e002      	b.n	80028fa <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80028fa:	4b34      	ldr	r3, [pc, #208]	@ (80029cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002902:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002906:	d121      	bne.n	800294c <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8002908:	4b30      	ldr	r3, [pc, #192]	@ (80029cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800290a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800290c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d017      	beq.n	8002944 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8002914:	4b2d      	ldr	r3, [pc, #180]	@ (80029cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002918:	0c1b      	lsrs	r3, r3, #16
 800291a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800291e:	ee07 3a90 	vmov	s15, r3
 8002922:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8002926:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800292a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800292e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002932:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002936:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800293a:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	605a      	str	r2, [r3, #4]
 8002942:	e006      	b.n	8002952 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	e002      	b.n	8002952 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8002952:	4b1e      	ldr	r3, [pc, #120]	@ (80029cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800295a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800295e:	d121      	bne.n	80029a4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8002960:	4b1a      	ldr	r3, [pc, #104]	@ (80029cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002964:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d017      	beq.n	800299c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800296c:	4b17      	ldr	r3, [pc, #92]	@ (80029cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800296e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002970:	0e1b      	lsrs	r3, r3, #24
 8002972:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002976:	ee07 3a90 	vmov	s15, r3
 800297a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800297e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002982:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8002986:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800298a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800298e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002992:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800299a:	e010      	b.n	80029be <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	609a      	str	r2, [r3, #8]
}
 80029a2:	e00c      	b.n	80029be <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	609a      	str	r2, [r3, #8]
}
 80029aa:	e008      	b.n	80029be <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	609a      	str	r2, [r3, #8]
}
 80029be:	bf00      	nop
 80029c0:	372c      	adds	r7, #44	@ 0x2c
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	44020c00 	.word	0x44020c00
 80029d0:	03d09000 	.word	0x03d09000
 80029d4:	46000000 	.word	0x46000000
 80029d8:	4a742400 	.word	0x4a742400
 80029dc:	4af42400 	.word	0x4af42400

080029e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b08b      	sub	sp, #44	@ 0x2c
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80029e8:	4bae      	ldr	r3, [pc, #696]	@ (8002ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80029ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029f0:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80029f2:	4bac      	ldr	r3, [pc, #688]	@ (8002ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80029f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80029fc:	4ba9      	ldr	r3, [pc, #676]	@ (8002ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80029fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a00:	0a1b      	lsrs	r3, r3, #8
 8002a02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a06:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8002a08:	4ba6      	ldr	r3, [pc, #664]	@ (8002ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a0c:	091b      	lsrs	r3, r3, #4
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8002a14:	4ba3      	ldr	r3, [pc, #652]	@ (8002ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a18:	08db      	lsrs	r3, r3, #3
 8002a1a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	fb02 f303 	mul.w	r3, r2, r3
 8002a24:	ee07 3a90 	vmov	s15, r3
 8002a28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a2c:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 8126 	beq.w	8002c84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	2b03      	cmp	r3, #3
 8002a3c:	d053      	beq.n	8002ae6 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	2b03      	cmp	r3, #3
 8002a42:	d86f      	bhi.n	8002b24 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d003      	beq.n	8002a52 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d02b      	beq.n	8002aa8 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8002a50:	e068      	b.n	8002b24 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002a52:	4b94      	ldr	r3, [pc, #592]	@ (8002ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	08db      	lsrs	r3, r3, #3
 8002a58:	f003 0303 	and.w	r3, r3, #3
 8002a5c:	4a92      	ldr	r2, [pc, #584]	@ (8002ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8002a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a62:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	ee07 3a90 	vmov	s15, r3
 8002a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	ee07 3a90 	vmov	s15, r3
 8002a74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	ee07 3a90 	vmov	s15, r3
 8002a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a86:	ed97 6a04 	vldr	s12, [r7, #16]
 8002a8a:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8002cac <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8002a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aa2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8002aa6:	e068      	b.n	8002b7a <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	ee07 3a90 	vmov	s15, r3
 8002aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ab2:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8002cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8002ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002aba:	6a3b      	ldr	r3, [r7, #32]
 8002abc:	ee07 3a90 	vmov	s15, r3
 8002ac0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ac4:	ed97 6a04 	vldr	s12, [r7, #16]
 8002ac8:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002cac <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8002acc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ad0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ad4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ad8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002adc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ae0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8002ae4:	e049      	b.n	8002b7a <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	ee07 3a90 	vmov	s15, r3
 8002aec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002af0:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8002cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8002af4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002af8:	6a3b      	ldr	r3, [r7, #32]
 8002afa:	ee07 3a90 	vmov	s15, r3
 8002afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b02:	ed97 6a04 	vldr	s12, [r7, #16]
 8002b06:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8002cac <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8002b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b1e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8002b22:	e02a      	b.n	8002b7a <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002b24:	4b5f      	ldr	r3, [pc, #380]	@ (8002ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	08db      	lsrs	r3, r3, #3
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	4a5e      	ldr	r2, [pc, #376]	@ (8002ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8002b30:	fa22 f303 	lsr.w	r3, r2, r3
 8002b34:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	ee07 3a90 	vmov	s15, r3
 8002b3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	ee07 3a90 	vmov	s15, r3
 8002b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	ee07 3a90 	vmov	s15, r3
 8002b54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b58:	ed97 6a04 	vldr	s12, [r7, #16]
 8002b5c:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8002cac <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8002b60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b74:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8002b78:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8002b7a:	4b4a      	ldr	r3, [pc, #296]	@ (8002ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b86:	d121      	bne.n	8002bcc <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8002b88:	4b46      	ldr	r3, [pc, #280]	@ (8002ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d017      	beq.n	8002bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8002b94:	4b43      	ldr	r3, [pc, #268]	@ (8002ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b98:	0a5b      	lsrs	r3, r3, #9
 8002b9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b9e:	ee07 3a90 	vmov	s15, r3
 8002ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8002ba6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002baa:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8002bae:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002bb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bba:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	e006      	b.n	8002bd2 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	e002      	b.n	8002bd2 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8002bd2:	4b34      	ldr	r3, [pc, #208]	@ (8002ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bde:	d121      	bne.n	8002c24 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8002be0:	4b30      	ldr	r3, [pc, #192]	@ (8002ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d017      	beq.n	8002c1c <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8002bec:	4b2d      	ldr	r3, [pc, #180]	@ (8002ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf0:	0c1b      	lsrs	r3, r3, #16
 8002bf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002bf6:	ee07 3a90 	vmov	s15, r3
 8002bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8002bfe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002c02:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8002c06:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002c0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c12:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	605a      	str	r2, [r3, #4]
 8002c1a:	e006      	b.n	8002c2a <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	605a      	str	r2, [r3, #4]
 8002c22:	e002      	b.n	8002c2a <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8002c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c36:	d121      	bne.n	8002c7c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8002c38:	4b1a      	ldr	r3, [pc, #104]	@ (8002ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d017      	beq.n	8002c74 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8002c44:	4b17      	ldr	r3, [pc, #92]	@ (8002ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c48:	0e1b      	lsrs	r3, r3, #24
 8002c4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c4e:	ee07 3a90 	vmov	s15, r3
 8002c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8002c56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002c5a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8002c5e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002c62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c6a:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8002c72:	e010      	b.n	8002c96 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	609a      	str	r2, [r3, #8]
}
 8002c7a:	e00c      	b.n	8002c96 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	609a      	str	r2, [r3, #8]
}
 8002c82:	e008      	b.n	8002c96 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	609a      	str	r2, [r3, #8]
}
 8002c96:	bf00      	nop
 8002c98:	372c      	adds	r7, #44	@ 0x2c
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	44020c00 	.word	0x44020c00
 8002ca8:	03d09000 	.word	0x03d09000
 8002cac:	46000000 	.word	0x46000000
 8002cb0:	4a742400 	.word	0x4a742400
 8002cb4:	4af42400 	.word	0x4af42400

08002cb8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b08b      	sub	sp, #44	@ 0x2c
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8002cc0:	4bae      	ldr	r3, [pc, #696]	@ (8002f7c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cc8:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8002cca:	4bac      	ldr	r3, [pc, #688]	@ (8002f7c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8002cd4:	4ba9      	ldr	r3, [pc, #676]	@ (8002f7c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd8:	0a1b      	lsrs	r3, r3, #8
 8002cda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cde:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8002ce0:	4ba6      	ldr	r3, [pc, #664]	@ (8002f7c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce4:	091b      	lsrs	r3, r3, #4
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8002cec:	4ba3      	ldr	r3, [pc, #652]	@ (8002f7c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002cee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cf0:	08db      	lsrs	r3, r3, #3
 8002cf2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	fb02 f303 	mul.w	r3, r2, r3
 8002cfc:	ee07 3a90 	vmov	s15, r3
 8002d00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d04:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 8126 	beq.w	8002f5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	2b03      	cmp	r3, #3
 8002d14:	d053      	beq.n	8002dbe <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	2b03      	cmp	r3, #3
 8002d1a:	d86f      	bhi.n	8002dfc <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d003      	beq.n	8002d2a <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d02b      	beq.n	8002d80 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8002d28:	e068      	b.n	8002dfc <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002d2a:	4b94      	ldr	r3, [pc, #592]	@ (8002f7c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	08db      	lsrs	r3, r3, #3
 8002d30:	f003 0303 	and.w	r3, r3, #3
 8002d34:	4a92      	ldr	r2, [pc, #584]	@ (8002f80 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8002d36:	fa22 f303 	lsr.w	r3, r2, r3
 8002d3a:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	ee07 3a90 	vmov	s15, r3
 8002d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	ee07 3a90 	vmov	s15, r3
 8002d4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	ee07 3a90 	vmov	s15, r3
 8002d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d5e:	ed97 6a04 	vldr	s12, [r7, #16]
 8002d62:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8002f84 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8002d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d7a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8002d7e:	e068      	b.n	8002e52 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	ee07 3a90 	vmov	s15, r3
 8002d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d8a:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8002f88 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8002d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d92:	6a3b      	ldr	r3, [r7, #32]
 8002d94:	ee07 3a90 	vmov	s15, r3
 8002d98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d9c:	ed97 6a04 	vldr	s12, [r7, #16]
 8002da0:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002f84 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8002da4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002da8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002db0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002db4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002db8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8002dbc:	e049      	b.n	8002e52 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	ee07 3a90 	vmov	s15, r3
 8002dc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dc8:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8002f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 8002dcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dd0:	6a3b      	ldr	r3, [r7, #32]
 8002dd2:	ee07 3a90 	vmov	s15, r3
 8002dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dda:	ed97 6a04 	vldr	s12, [r7, #16]
 8002dde:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8002f84 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8002de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002df6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8002dfa:	e02a      	b.n	8002e52 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002dfc:	4b5f      	ldr	r3, [pc, #380]	@ (8002f7c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	08db      	lsrs	r3, r3, #3
 8002e02:	f003 0303 	and.w	r3, r3, #3
 8002e06:	4a5e      	ldr	r2, [pc, #376]	@ (8002f80 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8002e08:	fa22 f303 	lsr.w	r3, r2, r3
 8002e0c:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	ee07 3a90 	vmov	s15, r3
 8002e14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	ee07 3a90 	vmov	s15, r3
 8002e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e26:	6a3b      	ldr	r3, [r7, #32]
 8002e28:	ee07 3a90 	vmov	s15, r3
 8002e2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e30:	ed97 6a04 	vldr	s12, [r7, #16]
 8002e34:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8002f84 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8002e38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e4c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8002e50:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8002e52:	4b4a      	ldr	r3, [pc, #296]	@ (8002f7c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e5e:	d121      	bne.n	8002ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8002e60:	4b46      	ldr	r3, [pc, #280]	@ (8002f7c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d017      	beq.n	8002e9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8002e6c:	4b43      	ldr	r3, [pc, #268]	@ (8002f7c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002e6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e70:	0a5b      	lsrs	r3, r3, #9
 8002e72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e76:	ee07 3a90 	vmov	s15, r3
 8002e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8002e7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002e82:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8002e86:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002e8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e92:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	e006      	b.n	8002eaa <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	e002      	b.n	8002eaa <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8002eaa:	4b34      	ldr	r3, [pc, #208]	@ (8002f7c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002eb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002eb6:	d121      	bne.n	8002efc <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8002eb8:	4b30      	ldr	r3, [pc, #192]	@ (8002f7c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ebc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d017      	beq.n	8002ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8002ec4:	4b2d      	ldr	r3, [pc, #180]	@ (8002f7c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002ec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec8:	0c1b      	lsrs	r3, r3, #16
 8002eca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ece:	ee07 3a90 	vmov	s15, r3
 8002ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8002ed6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002eda:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8002ede:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002ee2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ee6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002eea:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	605a      	str	r2, [r3, #4]
 8002ef2:	e006      	b.n	8002f02 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	605a      	str	r2, [r3, #4]
 8002efa:	e002      	b.n	8002f02 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8002f02:	4b1e      	ldr	r3, [pc, #120]	@ (8002f7c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f0e:	d121      	bne.n	8002f54 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8002f10:	4b1a      	ldr	r3, [pc, #104]	@ (8002f7c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d017      	beq.n	8002f4c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8002f1c:	4b17      	ldr	r3, [pc, #92]	@ (8002f7c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8002f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f20:	0e1b      	lsrs	r3, r3, #24
 8002f22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f26:	ee07 3a90 	vmov	s15, r3
 8002f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8002f2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002f32:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8002f36:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002f3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f42:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8002f4a:	e010      	b.n	8002f6e <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	609a      	str	r2, [r3, #8]
}
 8002f52:	e00c      	b.n	8002f6e <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	609a      	str	r2, [r3, #8]
}
 8002f5a:	e008      	b.n	8002f6e <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	609a      	str	r2, [r3, #8]
}
 8002f6e:	bf00      	nop
 8002f70:	372c      	adds	r7, #44	@ 0x2c
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	44020c00 	.word	0x44020c00
 8002f80:	03d09000 	.word	0x03d09000
 8002f84:	46000000 	.word	0x46000000
 8002f88:	4a742400 	.word	0x4a742400
 8002f8c:	4af42400 	.word	0x4af42400

08002f90 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8002f90:	b590      	push	{r4, r7, lr}
 8002f92:	b08f      	sub	sp, #60	@ 0x3c
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8002f9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f9e:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8002fa2:	4321      	orrs	r1, r4
 8002fa4:	d150      	bne.n	8003048 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8002fa6:	4b26      	ldr	r3, [pc, #152]	@ (8003040 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002fa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002fac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fb0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8002fb2:	4b23      	ldr	r3, [pc, #140]	@ (8003040 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002fb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d108      	bne.n	8002fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8002fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fc6:	d104      	bne.n	8002fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8002fc8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fce:	f002 bb2a 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8002fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8003040 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002fd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002fd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002fdc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002fe0:	d108      	bne.n	8002ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8002fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fe8:	d104      	bne.n	8002ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8002fea:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8002fee:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ff0:	f002 bb19 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8002ff4:	4b12      	ldr	r3, [pc, #72]	@ (8003040 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ffc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003000:	d119      	bne.n	8003036 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8003002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003004:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003008:	d115      	bne.n	8003036 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800300a:	4b0d      	ldr	r3, [pc, #52]	@ (8003040 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8003012:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003016:	d30a      	bcc.n	800302e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8003018:	4b09      	ldr	r3, [pc, #36]	@ (8003040 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800301a:	69db      	ldr	r3, [r3, #28]
 800301c:	0a1b      	lsrs	r3, r3, #8
 800301e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003022:	4a08      	ldr	r2, [pc, #32]	@ (8003044 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003024:	fbb2 f3f3 	udiv	r3, r2, r3
 8003028:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800302a:	f002 bafc 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 800302e:	2300      	movs	r3, #0
 8003030:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8003032:	f002 baf8 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8003036:	2300      	movs	r3, #0
 8003038:	637b      	str	r3, [r7, #52]	@ 0x34
 800303a:	f002 baf4 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800303e:	bf00      	nop
 8003040:	44020c00 	.word	0x44020c00
 8003044:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8003048:	e9d7 0100 	ldrd	r0, r1, [r7]
 800304c:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 8003050:	ea50 0104 	orrs.w	r1, r0, r4
 8003054:	f001 8275 	beq.w	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8003058:	e9d7 0100 	ldrd	r0, r1, [r7]
 800305c:	2801      	cmp	r0, #1
 800305e:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 8003062:	f082 82dd 	bcs.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003066:	e9d7 0100 	ldrd	r0, r1, [r7]
 800306a:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 800306e:	ea50 0104 	orrs.w	r1, r0, r4
 8003072:	f001 816c 	beq.w	800434e <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8003076:	e9d7 0100 	ldrd	r0, r1, [r7]
 800307a:	2801      	cmp	r0, #1
 800307c:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8003080:	f082 82ce 	bcs.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003084:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003088:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 800308c:	ea50 0104 	orrs.w	r1, r0, r4
 8003090:	f001 8602 	beq.w	8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8003094:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003098:	2801      	cmp	r0, #1
 800309a:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 800309e:	f082 82bf 	bcs.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80030a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030a6:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 80030aa:	ea50 0104 	orrs.w	r1, r0, r4
 80030ae:	f001 854c 	beq.w	8004b4a <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 80030b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030b6:	2801      	cmp	r0, #1
 80030b8:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 80030bc:	f082 82b0 	bcs.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80030c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030c4:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 80030c8:	ea50 0104 	orrs.w	r1, r0, r4
 80030cc:	f001 849e 	beq.w	8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 80030d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030d4:	2801      	cmp	r0, #1
 80030d6:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 80030da:	f082 82a1 	bcs.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80030de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030e2:	f1a1 0420 	sub.w	r4, r1, #32
 80030e6:	ea50 0104 	orrs.w	r1, r0, r4
 80030ea:	f001 83e8 	beq.w	80048be <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 80030ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030f2:	2801      	cmp	r0, #1
 80030f4:	f171 0120 	sbcs.w	r1, r1, #32
 80030f8:	f082 8292 	bcs.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80030fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003100:	f1a1 0410 	sub.w	r4, r1, #16
 8003104:	ea50 0104 	orrs.w	r1, r0, r4
 8003108:	f002 8256 	beq.w	80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800310c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003110:	2801      	cmp	r0, #1
 8003112:	f171 0110 	sbcs.w	r1, r1, #16
 8003116:	f082 8283 	bcs.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800311a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800311e:	f1a1 0408 	sub.w	r4, r1, #8
 8003122:	ea50 0104 	orrs.w	r1, r0, r4
 8003126:	f002 81cc 	beq.w	80054c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 800312a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800312e:	2801      	cmp	r0, #1
 8003130:	f171 0108 	sbcs.w	r1, r1, #8
 8003134:	f082 8274 	bcs.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003138:	e9d7 0100 	ldrd	r0, r1, [r7]
 800313c:	1f0c      	subs	r4, r1, #4
 800313e:	ea50 0104 	orrs.w	r1, r0, r4
 8003142:	f001 8648 	beq.w	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8003146:	e9d7 0100 	ldrd	r0, r1, [r7]
 800314a:	2801      	cmp	r0, #1
 800314c:	f171 0104 	sbcs.w	r1, r1, #4
 8003150:	f082 8266 	bcs.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003154:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003158:	1e8c      	subs	r4, r1, #2
 800315a:	ea50 0104 	orrs.w	r1, r0, r4
 800315e:	f002 8143 	beq.w	80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8003162:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003166:	2801      	cmp	r0, #1
 8003168:	f171 0102 	sbcs.w	r1, r1, #2
 800316c:	f082 8258 	bcs.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003170:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003174:	1e4c      	subs	r4, r1, #1
 8003176:	ea50 0104 	orrs.w	r1, r0, r4
 800317a:	f002 80ce 	beq.w	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 800317e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003182:	2801      	cmp	r0, #1
 8003184:	f171 0101 	sbcs.w	r1, r1, #1
 8003188:	f082 824a 	bcs.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800318c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003190:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8003194:	4321      	orrs	r1, r4
 8003196:	f002 8059 	beq.w	800524c <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 800319a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800319e:	4cd9      	ldr	r4, [pc, #868]	@ (8003504 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80031a0:	42a0      	cmp	r0, r4
 80031a2:	f171 0100 	sbcs.w	r1, r1, #0
 80031a6:	f082 823b 	bcs.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80031aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80031ae:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 80031b2:	4321      	orrs	r1, r4
 80031b4:	f001 87d9 	beq.w	800516a <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 80031b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80031bc:	4cd2      	ldr	r4, [pc, #840]	@ (8003508 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80031be:	42a0      	cmp	r0, r4
 80031c0:	f171 0100 	sbcs.w	r1, r1, #0
 80031c4:	f082 822c 	bcs.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80031c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80031cc:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 80031d0:	4321      	orrs	r1, r4
 80031d2:	f001 8751 	beq.w	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 80031d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80031da:	4ccc      	ldr	r4, [pc, #816]	@ (800350c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80031dc:	42a0      	cmp	r0, r4
 80031de:	f171 0100 	sbcs.w	r1, r1, #0
 80031e2:	f082 821d 	bcs.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80031e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80031ea:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 80031ee:	4321      	orrs	r1, r4
 80031f0:	f001 869a 	beq.w	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 80031f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80031f8:	4cc5      	ldr	r4, [pc, #788]	@ (8003510 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80031fa:	42a0      	cmp	r0, r4
 80031fc:	f171 0100 	sbcs.w	r1, r1, #0
 8003200:	f082 820e 	bcs.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003204:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003208:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 800320c:	4321      	orrs	r1, r4
 800320e:	f001 8612 	beq.w	8004e36 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8003212:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003216:	4cbf      	ldr	r4, [pc, #764]	@ (8003514 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8003218:	42a0      	cmp	r0, r4
 800321a:	f171 0100 	sbcs.w	r1, r1, #0
 800321e:	f082 81ff 	bcs.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003222:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003226:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 800322a:	4321      	orrs	r1, r4
 800322c:	f002 817e 	beq.w	800552c <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8003230:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003234:	4cb8      	ldr	r4, [pc, #736]	@ (8003518 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8003236:	42a0      	cmp	r0, r4
 8003238:	f171 0100 	sbcs.w	r1, r1, #0
 800323c:	f082 81f0 	bcs.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003240:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003244:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8003248:	4321      	orrs	r1, r4
 800324a:	f000 829e 	beq.w	800378a <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 800324e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003252:	4cb2      	ldr	r4, [pc, #712]	@ (800351c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003254:	42a0      	cmp	r0, r4
 8003256:	f171 0100 	sbcs.w	r1, r1, #0
 800325a:	f082 81e1 	bcs.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800325e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003262:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8003266:	4321      	orrs	r1, r4
 8003268:	f000 826d 	beq.w	8003746 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 800326c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003270:	4cab      	ldr	r4, [pc, #684]	@ (8003520 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8003272:	42a0      	cmp	r0, r4
 8003274:	f171 0100 	sbcs.w	r1, r1, #0
 8003278:	f082 81d2 	bcs.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800327c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003280:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8003284:	4321      	orrs	r1, r4
 8003286:	f001 800d 	beq.w	80042a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 800328a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800328e:	4ca5      	ldr	r4, [pc, #660]	@ (8003524 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8003290:	42a0      	cmp	r0, r4
 8003292:	f171 0100 	sbcs.w	r1, r1, #0
 8003296:	f082 81c3 	bcs.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800329a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800329e:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 80032a2:	4321      	orrs	r1, r4
 80032a4:	f000 81d0 	beq.w	8003648 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 80032a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032ac:	4c9e      	ldr	r4, [pc, #632]	@ (8003528 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80032ae:	42a0      	cmp	r0, r4
 80032b0:	f171 0100 	sbcs.w	r1, r1, #0
 80032b4:	f082 81b4 	bcs.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80032b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032bc:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 80032c0:	4321      	orrs	r1, r4
 80032c2:	f000 8142 	beq.w	800354a <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 80032c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032ca:	4c98      	ldr	r4, [pc, #608]	@ (800352c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80032cc:	42a0      	cmp	r0, r4
 80032ce:	f171 0100 	sbcs.w	r1, r1, #0
 80032d2:	f082 81a5 	bcs.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80032d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032da:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 80032de:	4321      	orrs	r1, r4
 80032e0:	f001 824e 	beq.w	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 80032e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032e8:	4c91      	ldr	r4, [pc, #580]	@ (8003530 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80032ea:	42a0      	cmp	r0, r4
 80032ec:	f171 0100 	sbcs.w	r1, r1, #0
 80032f0:	f082 8196 	bcs.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80032f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032f8:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 80032fc:	4321      	orrs	r1, r4
 80032fe:	f001 8197 	beq.w	8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8003302:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003306:	4c8b      	ldr	r4, [pc, #556]	@ (8003534 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8003308:	42a0      	cmp	r0, r4
 800330a:	f171 0100 	sbcs.w	r1, r1, #0
 800330e:	f082 8187 	bcs.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003312:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003316:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 800331a:	4321      	orrs	r1, r4
 800331c:	f001 8154 	beq.w	80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8003320:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003324:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8003328:	f171 0100 	sbcs.w	r1, r1, #0
 800332c:	f082 8178 	bcs.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003330:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003334:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8003338:	4321      	orrs	r1, r4
 800333a:	f001 80b7 	beq.w	80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800333e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003342:	f248 0401 	movw	r4, #32769	@ 0x8001
 8003346:	42a0      	cmp	r0, r4
 8003348:	f171 0100 	sbcs.w	r1, r1, #0
 800334c:	f082 8168 	bcs.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003350:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003354:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8003358:	4321      	orrs	r1, r4
 800335a:	f001 8064 	beq.w	8004426 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 800335e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003362:	f244 0401 	movw	r4, #16385	@ 0x4001
 8003366:	42a0      	cmp	r0, r4
 8003368:	f171 0100 	sbcs.w	r1, r1, #0
 800336c:	f082 8158 	bcs.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003370:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003374:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8003378:	4321      	orrs	r1, r4
 800337a:	f001 8011 	beq.w	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 800337e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003382:	f242 0401 	movw	r4, #8193	@ 0x2001
 8003386:	42a0      	cmp	r0, r4
 8003388:	f171 0100 	sbcs.w	r1, r1, #0
 800338c:	f082 8148 	bcs.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003390:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003394:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 8003398:	4321      	orrs	r1, r4
 800339a:	f000 871e 	beq.w	80041da <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 800339e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033a2:	f241 0401 	movw	r4, #4097	@ 0x1001
 80033a6:	42a0      	cmp	r0, r4
 80033a8:	f171 0100 	sbcs.w	r1, r1, #0
 80033ac:	f082 8138 	bcs.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80033b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033b4:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 80033b8:	4321      	orrs	r1, r4
 80033ba:	f000 86a8 	beq.w	800410e <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 80033be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033c2:	f640 0401 	movw	r4, #2049	@ 0x801
 80033c6:	42a0      	cmp	r0, r4
 80033c8:	f171 0100 	sbcs.w	r1, r1, #0
 80033cc:	f082 8128 	bcs.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80033d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033d4:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 80033d8:	4321      	orrs	r1, r4
 80033da:	f000 8632 	beq.w	8004042 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 80033de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033e2:	f240 4401 	movw	r4, #1025	@ 0x401
 80033e6:	42a0      	cmp	r0, r4
 80033e8:	f171 0100 	sbcs.w	r1, r1, #0
 80033ec:	f082 8118 	bcs.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80033f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033f4:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 80033f8:	4321      	orrs	r1, r4
 80033fa:	f000 85b0 	beq.w	8003f5e <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 80033fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003402:	f240 2401 	movw	r4, #513	@ 0x201
 8003406:	42a0      	cmp	r0, r4
 8003408:	f171 0100 	sbcs.w	r1, r1, #0
 800340c:	f082 8108 	bcs.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003410:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003414:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8003418:	4321      	orrs	r1, r4
 800341a:	f000 8535 	beq.w	8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800341e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003422:	f240 1401 	movw	r4, #257	@ 0x101
 8003426:	42a0      	cmp	r0, r4
 8003428:	f171 0100 	sbcs.w	r1, r1, #0
 800342c:	f082 80f8 	bcs.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003430:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003434:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8003438:	4321      	orrs	r1, r4
 800343a:	f000 84ba 	beq.w	8003db2 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 800343e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003442:	2881      	cmp	r0, #129	@ 0x81
 8003444:	f171 0100 	sbcs.w	r1, r1, #0
 8003448:	f082 80ea 	bcs.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800344c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003450:	2821      	cmp	r0, #33	@ 0x21
 8003452:	f171 0100 	sbcs.w	r1, r1, #0
 8003456:	d26f      	bcs.n	8003538 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8003458:	e9d7 0100 	ldrd	r0, r1, [r7]
 800345c:	4301      	orrs	r1, r0
 800345e:	f002 80df 	beq.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003462:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003466:	1e42      	subs	r2, r0, #1
 8003468:	f141 33ff 	adc.w	r3, r1, #4294967295
 800346c:	2a20      	cmp	r2, #32
 800346e:	f173 0100 	sbcs.w	r1, r3, #0
 8003472:	f082 80d5 	bcs.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8003476:	2a1f      	cmp	r2, #31
 8003478:	f202 80d2 	bhi.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800347c:	a101      	add	r1, pc, #4	@ (adr r1, 8003484 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800347e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003482:	bf00      	nop
 8003484:	080037e5 	.word	0x080037e5
 8003488:	080038b1 	.word	0x080038b1
 800348c:	08005621 	.word	0x08005621
 8003490:	08003971 	.word	0x08003971
 8003494:	08005621 	.word	0x08005621
 8003498:	08005621 	.word	0x08005621
 800349c:	08005621 	.word	0x08005621
 80034a0:	08003a41 	.word	0x08003a41
 80034a4:	08005621 	.word	0x08005621
 80034a8:	08005621 	.word	0x08005621
 80034ac:	08005621 	.word	0x08005621
 80034b0:	08005621 	.word	0x08005621
 80034b4:	08005621 	.word	0x08005621
 80034b8:	08005621 	.word	0x08005621
 80034bc:	08005621 	.word	0x08005621
 80034c0:	08003b23 	.word	0x08003b23
 80034c4:	08005621 	.word	0x08005621
 80034c8:	08005621 	.word	0x08005621
 80034cc:	08005621 	.word	0x08005621
 80034d0:	08005621 	.word	0x08005621
 80034d4:	08005621 	.word	0x08005621
 80034d8:	08005621 	.word	0x08005621
 80034dc:	08005621 	.word	0x08005621
 80034e0:	08005621 	.word	0x08005621
 80034e4:	08005621 	.word	0x08005621
 80034e8:	08005621 	.word	0x08005621
 80034ec:	08005621 	.word	0x08005621
 80034f0:	08005621 	.word	0x08005621
 80034f4:	08005621 	.word	0x08005621
 80034f8:	08005621 	.word	0x08005621
 80034fc:	08005621 	.word	0x08005621
 8003500:	08003bf9 	.word	0x08003bf9
 8003504:	80000001 	.word	0x80000001
 8003508:	40000001 	.word	0x40000001
 800350c:	20000001 	.word	0x20000001
 8003510:	10000001 	.word	0x10000001
 8003514:	08000001 	.word	0x08000001
 8003518:	04000001 	.word	0x04000001
 800351c:	00800001 	.word	0x00800001
 8003520:	00400001 	.word	0x00400001
 8003524:	00200001 	.word	0x00200001
 8003528:	00100001 	.word	0x00100001
 800352c:	00080001 	.word	0x00080001
 8003530:	00040001 	.word	0x00040001
 8003534:	00020001 	.word	0x00020001
 8003538:	e9d7 2300 	ldrd	r2, r3, [r7]
 800353c:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8003540:	430b      	orrs	r3, r1
 8003542:	f000 83c4 	beq.w	8003cce <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8003546:	f002 b86b 	b.w	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800354a:	4ba1      	ldr	r3, [pc, #644]	@ (80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800354c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003550:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8003554:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8003556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003558:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800355c:	d036      	beq.n	80035cc <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 800355e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003560:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003564:	d86b      	bhi.n	800363e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8003566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003568:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800356c:	d02b      	beq.n	80035c6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800356e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003570:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003574:	d863      	bhi.n	800363e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8003576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003578:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800357c:	d01b      	beq.n	80035b6 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800357e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003580:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003584:	d85b      	bhi.n	800363e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8003586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003588:	2b00      	cmp	r3, #0
 800358a:	d004      	beq.n	8003596 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 800358c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800358e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003592:	d008      	beq.n	80035a6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8003594:	e053      	b.n	800363e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003596:	f107 0320 	add.w	r3, r7, #32
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff f8b4 	bl	8002708 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80035a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80035a4:	e04e      	b.n	8003644 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80035a6:	f107 0314 	add.w	r3, r7, #20
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff fa18 	bl	80029e0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80035b4:	e046      	b.n	8003644 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80035b6:	f107 0308 	add.w	r3, r7, #8
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff fb7c 	bl	8002cb8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80035c4:	e03e      	b.n	8003644 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80035c6:	4b83      	ldr	r3, [pc, #524]	@ (80037d4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80035c8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80035ca:	e03b      	b.n	8003644 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80035cc:	4b80      	ldr	r3, [pc, #512]	@ (80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80035ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80035d2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80035d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80035d8:	4b7d      	ldr	r3, [pc, #500]	@ (80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d10c      	bne.n	80035fe <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 80035e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d109      	bne.n	80035fe <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80035ea:	4b79      	ldr	r3, [pc, #484]	@ (80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	08db      	lsrs	r3, r3, #3
 80035f0:	f003 0303 	and.w	r3, r3, #3
 80035f4:	4a78      	ldr	r2, [pc, #480]	@ (80037d8 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 80035f6:	fa22 f303 	lsr.w	r3, r2, r3
 80035fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80035fc:	e01e      	b.n	800363c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80035fe:	4b74      	ldr	r3, [pc, #464]	@ (80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003606:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800360a:	d106      	bne.n	800361a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800360c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800360e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003612:	d102      	bne.n	800361a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8003614:	4b71      	ldr	r3, [pc, #452]	@ (80037dc <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8003616:	637b      	str	r3, [r7, #52]	@ 0x34
 8003618:	e010      	b.n	800363c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800361a:	4b6d      	ldr	r3, [pc, #436]	@ (80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003622:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003626:	d106      	bne.n	8003636 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8003628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800362a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800362e:	d102      	bne.n	8003636 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8003630:	4b6b      	ldr	r3, [pc, #428]	@ (80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8003632:	637b      	str	r3, [r7, #52]	@ 0x34
 8003634:	e002      	b.n	800363c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8003636:	2300      	movs	r3, #0
 8003638:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800363a:	e003      	b.n	8003644 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 800363c:	e002      	b.n	8003644 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 800363e:	2300      	movs	r3, #0
 8003640:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8003642:	bf00      	nop
          }
        }
        break;
 8003644:	f001 bfef 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8003648:	4b61      	ldr	r3, [pc, #388]	@ (80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800364a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800364e:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 8003652:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8003654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003656:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800365a:	d036      	beq.n	80036ca <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 800365c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800365e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003662:	d86b      	bhi.n	800373c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8003664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003666:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800366a:	d02b      	beq.n	80036c4 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800366c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800366e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003672:	d863      	bhi.n	800373c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8003674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003676:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800367a:	d01b      	beq.n	80036b4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800367c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800367e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003682:	d85b      	bhi.n	800373c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8003684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003686:	2b00      	cmp	r3, #0
 8003688:	d004      	beq.n	8003694 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800368a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800368c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003690:	d008      	beq.n	80036a4 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8003692:	e053      	b.n	800373c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003694:	f107 0320 	add.w	r3, r7, #32
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff f835 	bl	8002708 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800369e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80036a2:	e04e      	b.n	8003742 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80036a4:	f107 0314 	add.w	r3, r7, #20
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff f999 	bl	80029e0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80036b2:	e046      	b.n	8003742 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80036b4:	f107 0308 	add.w	r3, r7, #8
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff fafd 	bl	8002cb8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80036c2:	e03e      	b.n	8003742 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80036c4:	4b43      	ldr	r3, [pc, #268]	@ (80037d4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80036c6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80036c8:	e03b      	b.n	8003742 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80036ca:	4b41      	ldr	r3, [pc, #260]	@ (80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80036cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80036d0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80036d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80036d6:	4b3e      	ldr	r3, [pc, #248]	@ (80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d10c      	bne.n	80036fc <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 80036e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d109      	bne.n	80036fc <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80036e8:	4b39      	ldr	r3, [pc, #228]	@ (80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	08db      	lsrs	r3, r3, #3
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	4a39      	ldr	r2, [pc, #228]	@ (80037d8 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 80036f4:	fa22 f303 	lsr.w	r3, r2, r3
 80036f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80036fa:	e01e      	b.n	800373a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80036fc:	4b34      	ldr	r3, [pc, #208]	@ (80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003704:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003708:	d106      	bne.n	8003718 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800370a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800370c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003710:	d102      	bne.n	8003718 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8003712:	4b32      	ldr	r3, [pc, #200]	@ (80037dc <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8003714:	637b      	str	r3, [r7, #52]	@ 0x34
 8003716:	e010      	b.n	800373a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003718:	4b2d      	ldr	r3, [pc, #180]	@ (80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003720:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003724:	d106      	bne.n	8003734 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8003726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003728:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800372c:	d102      	bne.n	8003734 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800372e:	4b2c      	ldr	r3, [pc, #176]	@ (80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8003730:	637b      	str	r3, [r7, #52]	@ 0x34
 8003732:	e002      	b.n	800373a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8003734:	2300      	movs	r3, #0
 8003736:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8003738:	e003      	b.n	8003742 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 800373a:	e002      	b.n	8003742 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 800373c:	2300      	movs	r3, #0
 800373e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8003740:	bf00      	nop
          }
        }
        break;
 8003742:	f001 bf70 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8003746:	4b22      	ldr	r3, [pc, #136]	@ (80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003748:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800374c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003750:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8003752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003754:	2b00      	cmp	r3, #0
 8003756:	d108      	bne.n	800376a <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003758:	f107 0320 	add.w	r3, r7, #32
 800375c:	4618      	mov	r0, r3
 800375e:	f7fe ffd3 	bl	8002708 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003764:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8003766:	f001 bf5e 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800376a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800376c:	2b40      	cmp	r3, #64	@ 0x40
 800376e:	d108      	bne.n	8003782 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003770:	f107 0314 	add.w	r3, r7, #20
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff f933 	bl	80029e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800377e:	f001 bf52 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8003782:	2300      	movs	r3, #0
 8003784:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003786:	f001 bf4e 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 800378a:	4b11      	ldr	r3, [pc, #68]	@ (80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800378c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003790:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003794:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8003796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003798:	2b00      	cmp	r3, #0
 800379a:	d108      	bne.n	80037ae <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800379c:	f107 0320 	add.w	r3, r7, #32
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7fe ffb1 	bl	8002708 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80037a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80037aa:	f001 bf3c 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 80037ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b0:	2b80      	cmp	r3, #128	@ 0x80
 80037b2:	d108      	bne.n	80037c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80037b4:	f107 0314 	add.w	r3, r7, #20
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7ff f911 	bl	80029e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80037c2:	f001 bf30 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80037c6:	2300      	movs	r3, #0
 80037c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80037ca:	f001 bf2c 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80037ce:	bf00      	nop
 80037d0:	44020c00 	.word	0x44020c00
 80037d4:	00bb8000 	.word	0x00bb8000
 80037d8:	03d09000 	.word	0x03d09000
 80037dc:	003d0900 	.word	0x003d0900
 80037e0:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80037e4:	4b9d      	ldr	r3, [pc, #628]	@ (8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80037e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80037f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d104      	bne.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80037f6:	f7fe ff5b 	bl	80026b0 <HAL_RCC_GetPCLK2Freq>
 80037fa:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80037fc:	f001 bf13 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8003800:	4b96      	ldr	r3, [pc, #600]	@ (8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003808:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800380c:	d10a      	bne.n	8003824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800380e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003810:	2b01      	cmp	r3, #1
 8003812:	d107      	bne.n	8003824 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003814:	f107 0314 	add.w	r3, r7, #20
 8003818:	4618      	mov	r0, r3
 800381a:	f7ff f8e1 	bl	80029e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	637b      	str	r3, [r7, #52]	@ 0x34
 8003822:	e043      	b.n	80038ac <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8003824:	4b8d      	ldr	r3, [pc, #564]	@ (8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800382c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003830:	d10a      	bne.n	8003848 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8003832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003834:	2b02      	cmp	r3, #2
 8003836:	d107      	bne.n	8003848 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003838:	f107 0308 	add.w	r3, r7, #8
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff fa3b 	bl	8002cb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	637b      	str	r3, [r7, #52]	@ 0x34
 8003846:	e031      	b.n	80038ac <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8003848:	4b84      	ldr	r3, [pc, #528]	@ (8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b02      	cmp	r3, #2
 8003852:	d10c      	bne.n	800386e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8003854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003856:	2b03      	cmp	r3, #3
 8003858:	d109      	bne.n	800386e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800385a:	4b80      	ldr	r3, [pc, #512]	@ (8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	08db      	lsrs	r3, r3, #3
 8003860:	f003 0303 	and.w	r3, r3, #3
 8003864:	4a7e      	ldr	r2, [pc, #504]	@ (8003a60 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8003866:	fa22 f303 	lsr.w	r3, r2, r3
 800386a:	637b      	str	r3, [r7, #52]	@ 0x34
 800386c:	e01e      	b.n	80038ac <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 800386e:	4b7b      	ldr	r3, [pc, #492]	@ (8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003876:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800387a:	d105      	bne.n	8003888 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 800387c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800387e:	2b04      	cmp	r3, #4
 8003880:	d102      	bne.n	8003888 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8003882:	4b78      	ldr	r3, [pc, #480]	@ (8003a64 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8003884:	637b      	str	r3, [r7, #52]	@ 0x34
 8003886:	e011      	b.n	80038ac <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8003888:	4b74      	ldr	r3, [pc, #464]	@ (8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800388a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b02      	cmp	r3, #2
 8003894:	d106      	bne.n	80038a4 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8003896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003898:	2b05      	cmp	r3, #5
 800389a:	d103      	bne.n	80038a4 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 800389c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80038a2:	e003      	b.n	80038ac <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80038a8:	f001 bebd 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80038ac:	f001 bebb 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80038b0:	4b6a      	ldr	r3, [pc, #424]	@ (8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80038b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80038b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80038ba:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80038bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d104      	bne.n	80038cc <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80038c2:	f7fe fedf 	bl	8002684 <HAL_RCC_GetPCLK1Freq>
 80038c6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80038c8:	f001 bead 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80038cc:	4b63      	ldr	r3, [pc, #396]	@ (8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038d8:	d10a      	bne.n	80038f0 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80038da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d107      	bne.n	80038f0 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80038e0:	f107 0314 	add.w	r3, r7, #20
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff f87b 	bl	80029e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80038ee:	e03d      	b.n	800396c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 80038f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038f2:	2b10      	cmp	r3, #16
 80038f4:	d108      	bne.n	8003908 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80038f6:	f107 0308 	add.w	r3, r7, #8
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7ff f9dc 	bl	8002cb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003904:	f001 be8f 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8003908:	4b54      	ldr	r3, [pc, #336]	@ (8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b02      	cmp	r3, #2
 8003912:	d10c      	bne.n	800392e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8003914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003916:	2b18      	cmp	r3, #24
 8003918:	d109      	bne.n	800392e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800391a:	4b50      	ldr	r3, [pc, #320]	@ (8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	08db      	lsrs	r3, r3, #3
 8003920:	f003 0303 	and.w	r3, r3, #3
 8003924:	4a4e      	ldr	r2, [pc, #312]	@ (8003a60 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8003926:	fa22 f303 	lsr.w	r3, r2, r3
 800392a:	637b      	str	r3, [r7, #52]	@ 0x34
 800392c:	e01e      	b.n	800396c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800392e:	4b4b      	ldr	r3, [pc, #300]	@ (8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003936:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800393a:	d105      	bne.n	8003948 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800393c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800393e:	2b20      	cmp	r3, #32
 8003940:	d102      	bne.n	8003948 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8003942:	4b48      	ldr	r3, [pc, #288]	@ (8003a64 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8003944:	637b      	str	r3, [r7, #52]	@ 0x34
 8003946:	e011      	b.n	800396c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8003948:	4b44      	ldr	r3, [pc, #272]	@ (8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800394a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b02      	cmp	r3, #2
 8003954:	d106      	bne.n	8003964 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8003956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003958:	2b28      	cmp	r3, #40	@ 0x28
 800395a:	d103      	bne.n	8003964 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 800395c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003960:	637b      	str	r3, [r7, #52]	@ 0x34
 8003962:	e003      	b.n	800396c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8003964:	2300      	movs	r3, #0
 8003966:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003968:	f001 be5d 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800396c:	f001 be5b 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003970:	4b3a      	ldr	r3, [pc, #232]	@ (8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003976:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800397a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800397c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800397e:	2b00      	cmp	r3, #0
 8003980:	d104      	bne.n	800398c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003982:	f7fe fe7f 	bl	8002684 <HAL_RCC_GetPCLK1Freq>
 8003986:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8003988:	f001 be4d 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 800398c:	4b33      	ldr	r3, [pc, #204]	@ (8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003994:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003998:	d10a      	bne.n	80039b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800399a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800399c:	2b40      	cmp	r3, #64	@ 0x40
 800399e:	d107      	bne.n	80039b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80039a0:	f107 0314 	add.w	r3, r7, #20
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff f81b 	bl	80029e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80039ae:	e045      	b.n	8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 80039b0:	4b2a      	ldr	r3, [pc, #168]	@ (8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039bc:	d10a      	bne.n	80039d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 80039be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c0:	2b80      	cmp	r3, #128	@ 0x80
 80039c2:	d107      	bne.n	80039d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80039c4:	f107 0308 	add.w	r3, r7, #8
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff f975 	bl	8002cb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80039d2:	e033      	b.n	8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80039d4:	4b21      	ldr	r3, [pc, #132]	@ (8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d10c      	bne.n	80039fa <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 80039e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80039e4:	d109      	bne.n	80039fa <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80039e6:	4b1d      	ldr	r3, [pc, #116]	@ (8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	08db      	lsrs	r3, r3, #3
 80039ec:	f003 0303 	and.w	r3, r3, #3
 80039f0:	4a1b      	ldr	r2, [pc, #108]	@ (8003a60 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80039f2:	fa22 f303 	lsr.w	r3, r2, r3
 80039f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80039f8:	e020      	b.n	8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80039fa:	4b18      	ldr	r3, [pc, #96]	@ (8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a06:	d106      	bne.n	8003a16 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8003a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a0e:	d102      	bne.n	8003a16 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8003a10:	4b14      	ldr	r3, [pc, #80]	@ (8003a64 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8003a12:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a14:	e012      	b.n	8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8003a16:	4b11      	ldr	r3, [pc, #68]	@ (8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003a18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d107      	bne.n	8003a34 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8003a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a26:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003a2a:	d103      	bne.n	8003a34 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8003a2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a30:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a32:	e003      	b.n	8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8003a34:	2300      	movs	r3, #0
 8003a36:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003a38:	f001 bdf5 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003a3c:	f001 bdf3 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8003a40:	4b06      	ldr	r3, [pc, #24]	@ (8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003a42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003a46:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8003a4a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8003a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10a      	bne.n	8003a68 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003a52:	f7fe fe17 	bl	8002684 <HAL_RCC_GetPCLK1Freq>
 8003a56:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8003a58:	f001 bde5 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003a5c:	44020c00 	.word	0x44020c00
 8003a60:	03d09000 	.word	0x03d09000
 8003a64:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8003a68:	4ba0      	ldr	r3, [pc, #640]	@ (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a74:	d10b      	bne.n	8003a8e <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8003a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a7c:	d107      	bne.n	8003a8e <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003a7e:	f107 0314 	add.w	r3, r7, #20
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fe ffac 	bl	80029e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a8c:	e047      	b.n	8003b1e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8003a8e:	4b97      	ldr	r3, [pc, #604]	@ (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a9a:	d10b      	bne.n	8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8003a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aa2:	d107      	bne.n	8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003aa4:	f107 0308 	add.w	r3, r7, #8
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7ff f905 	bl	8002cb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ab2:	e034      	b.n	8003b1e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8003ab4:	4b8d      	ldr	r3, [pc, #564]	@ (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d10d      	bne.n	8003adc <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8003ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003ac6:	d109      	bne.n	8003adc <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003ac8:	4b88      	ldr	r3, [pc, #544]	@ (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	08db      	lsrs	r3, r3, #3
 8003ace:	f003 0303 	and.w	r3, r3, #3
 8003ad2:	4a87      	ldr	r2, [pc, #540]	@ (8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8003ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ada:	e020      	b.n	8003b1e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8003adc:	4b83      	ldr	r3, [pc, #524]	@ (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ae4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ae8:	d106      	bne.n	8003af8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8003aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003af0:	d102      	bne.n	8003af8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8003af2:	4b80      	ldr	r3, [pc, #512]	@ (8003cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8003af4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003af6:	e012      	b.n	8003b1e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8003af8:	4b7c      	ldr	r3, [pc, #496]	@ (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003afa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d107      	bne.n	8003b16 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8003b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b08:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003b0c:	d103      	bne.n	8003b16 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8003b0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b12:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b14:	e003      	b.n	8003b1e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003b1a:	f001 bd84 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003b1e:	f001 bd82 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8003b22:	4b72      	ldr	r3, [pc, #456]	@ (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003b24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003b28:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8003b2c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8003b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d104      	bne.n	8003b3e <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003b34:	f7fe fda6 	bl	8002684 <HAL_RCC_GetPCLK1Freq>
 8003b38:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8003b3a:	f001 bd74 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8003b3e:	4b6b      	ldr	r3, [pc, #428]	@ (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b4a:	d10b      	bne.n	8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8003b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b52:	d107      	bne.n	8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003b54:	f107 0314 	add.w	r3, r7, #20
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7fe ff41 	bl	80029e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b62:	e047      	b.n	8003bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8003b64:	4b61      	ldr	r3, [pc, #388]	@ (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b70:	d10b      	bne.n	8003b8a <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8003b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b78:	d107      	bne.n	8003b8a <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003b7a:	f107 0308 	add.w	r3, r7, #8
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7ff f89a 	bl	8002cb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b88:	e034      	b.n	8003bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8003b8a:	4b58      	ldr	r3, [pc, #352]	@ (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d10d      	bne.n	8003bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8003b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b98:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003b9c:	d109      	bne.n	8003bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003b9e:	4b53      	ldr	r3, [pc, #332]	@ (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	08db      	lsrs	r3, r3, #3
 8003ba4:	f003 0303 	and.w	r3, r3, #3
 8003ba8:	4a51      	ldr	r2, [pc, #324]	@ (8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8003baa:	fa22 f303 	lsr.w	r3, r2, r3
 8003bae:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bb0:	e020      	b.n	8003bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8003bb2:	4b4e      	ldr	r3, [pc, #312]	@ (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bbe:	d106      	bne.n	8003bce <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8003bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bc6:	d102      	bne.n	8003bce <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8003bc8:	4b4a      	ldr	r3, [pc, #296]	@ (8003cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8003bca:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bcc:	e012      	b.n	8003bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8003bce:	4b47      	ldr	r3, [pc, #284]	@ (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003bd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d107      	bne.n	8003bec <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8003bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bde:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003be2:	d103      	bne.n	8003bec <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8003be4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003be8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bea:	e003      	b.n	8003bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8003bec:	2300      	movs	r3, #0
 8003bee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003bf0:	f001 bd19 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003bf4:	f001 bd17 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8003bf8:	4b3c      	ldr	r3, [pc, #240]	@ (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003bfa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003bfe:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8003c02:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8003c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d104      	bne.n	8003c14 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003c0a:	f7fe fd3b 	bl	8002684 <HAL_RCC_GetPCLK1Freq>
 8003c0e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8003c10:	f001 bd09 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8003c14:	4b35      	ldr	r3, [pc, #212]	@ (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c20:	d10b      	bne.n	8003c3a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8003c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c28:	d107      	bne.n	8003c3a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003c2a:	f107 0314 	add.w	r3, r7, #20
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fe fed6 	bl	80029e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c38:	e047      	b.n	8003cca <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8003c3a:	4b2c      	ldr	r3, [pc, #176]	@ (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c46:	d10b      	bne.n	8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8003c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c4e:	d107      	bne.n	8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003c50:	f107 0308 	add.w	r3, r7, #8
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff f82f 	bl	8002cb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c5e:	e034      	b.n	8003cca <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8003c60:	4b22      	ldr	r3, [pc, #136]	@ (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d10d      	bne.n	8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8003c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c6e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8003c72:	d109      	bne.n	8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003c74:	4b1d      	ldr	r3, [pc, #116]	@ (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	08db      	lsrs	r3, r3, #3
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	4a1c      	ldr	r2, [pc, #112]	@ (8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8003c80:	fa22 f303 	lsr.w	r3, r2, r3
 8003c84:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c86:	e020      	b.n	8003cca <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8003c88:	4b18      	ldr	r3, [pc, #96]	@ (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c94:	d106      	bne.n	8003ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8003c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c9c:	d102      	bne.n	8003ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8003c9e:	4b15      	ldr	r3, [pc, #84]	@ (8003cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8003ca0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ca2:	e012      	b.n	8003cca <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8003ca4:	4b11      	ldr	r3, [pc, #68]	@ (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003ca6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d107      	bne.n	8003cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8003cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb4:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8003cb8:	d103      	bne.n	8003cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8003cba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cc0:	e003      	b.n	8003cca <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003cc6:	f001 bcae 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003cca:	f001 bcac 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8003cce:	4b07      	ldr	r3, [pc, #28]	@ (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003cd0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003cd4:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8003cd8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8003cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10b      	bne.n	8003cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003ce0:	f7fe fcd0 	bl	8002684 <HAL_RCC_GetPCLK1Freq>
 8003ce4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8003ce6:	f001 bc9e 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003cea:	bf00      	nop
 8003cec:	44020c00 	.word	0x44020c00
 8003cf0:	03d09000 	.word	0x03d09000
 8003cf4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8003cf8:	4ba0      	ldr	r3, [pc, #640]	@ (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d04:	d10b      	bne.n	8003d1e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8003d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d0c:	d107      	bne.n	8003d1e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003d0e:	f107 0314 	add.w	r3, r7, #20
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fe fe64 	bl	80029e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d1c:	e047      	b.n	8003dae <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8003d1e:	4b97      	ldr	r3, [pc, #604]	@ (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d2a:	d10b      	bne.n	8003d44 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8003d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d2e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003d32:	d107      	bne.n	8003d44 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003d34:	f107 0308 	add.w	r3, r7, #8
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7fe ffbd 	bl	8002cb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d42:	e034      	b.n	8003dae <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8003d44:	4b8d      	ldr	r3, [pc, #564]	@ (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d10d      	bne.n	8003d6c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8003d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d52:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003d56:	d109      	bne.n	8003d6c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003d58:	4b88      	ldr	r3, [pc, #544]	@ (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	08db      	lsrs	r3, r3, #3
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	4a87      	ldr	r2, [pc, #540]	@ (8003f80 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8003d64:	fa22 f303 	lsr.w	r3, r2, r3
 8003d68:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d6a:	e020      	b.n	8003dae <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8003d6c:	4b83      	ldr	r3, [pc, #524]	@ (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d78:	d106      	bne.n	8003d88 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8003d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d80:	d102      	bne.n	8003d88 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 8003d82:	4b80      	ldr	r3, [pc, #512]	@ (8003f84 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8003d84:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d86:	e012      	b.n	8003dae <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8003d88:	4b7c      	ldr	r3, [pc, #496]	@ (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003d8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d107      	bne.n	8003da6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8003d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d98:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003d9c:	d103      	bne.n	8003da6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8003d9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003da2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003da4:	e003      	b.n	8003dae <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8003da6:	2300      	movs	r3, #0
 8003da8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003daa:	f001 bc3c 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003dae:	f001 bc3a 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8003db2:	4b72      	ldr	r3, [pc, #456]	@ (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003db4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003db8:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8003dbc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8003dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d104      	bne.n	8003dce <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003dc4:	f7fe fc5e 	bl	8002684 <HAL_RCC_GetPCLK1Freq>
 8003dc8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8003dca:	f001 bc2c 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8003dce:	4b6b      	ldr	r3, [pc, #428]	@ (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003dd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003dda:	d10b      	bne.n	8003df4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8003ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dde:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003de2:	d107      	bne.n	8003df4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003de4:	f107 0314 	add.w	r3, r7, #20
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7fe fdf9 	bl	80029e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003df2:	e047      	b.n	8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8003df4:	4b61      	ldr	r3, [pc, #388]	@ (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003dfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e00:	d10b      	bne.n	8003e1a <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8003e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e08:	d107      	bne.n	8003e1a <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003e0a:	f107 0308 	add.w	r3, r7, #8
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fe ff52 	bl	8002cb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e18:	e034      	b.n	8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8003e1a:	4b58      	ldr	r3, [pc, #352]	@ (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d10d      	bne.n	8003e42 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8003e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e28:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003e2c:	d109      	bne.n	8003e42 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003e2e:	4b53      	ldr	r3, [pc, #332]	@ (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	08db      	lsrs	r3, r3, #3
 8003e34:	f003 0303 	and.w	r3, r3, #3
 8003e38:	4a51      	ldr	r2, [pc, #324]	@ (8003f80 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8003e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e40:	e020      	b.n	8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8003e42:	4b4e      	ldr	r3, [pc, #312]	@ (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e4e:	d106      	bne.n	8003e5e <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8003e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e52:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e56:	d102      	bne.n	8003e5e <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8003e58:	4b4a      	ldr	r3, [pc, #296]	@ (8003f84 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8003e5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e5c:	e012      	b.n	8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8003e5e:	4b47      	ldr	r3, [pc, #284]	@ (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003e60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d107      	bne.n	8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8003e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e6e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003e72:	d103      	bne.n	8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8003e74:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e78:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e7a:	e003      	b.n	8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e80:	f001 bbd1 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003e84:	f001 bbcf 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8003e88:	4b3c      	ldr	r3, [pc, #240]	@ (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003e8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003e8e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8003e92:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8003e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d104      	bne.n	8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003e9a:	f7fe fbf3 	bl	8002684 <HAL_RCC_GetPCLK1Freq>
 8003e9e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8003ea0:	f001 bbc1 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8003ea4:	4b35      	ldr	r3, [pc, #212]	@ (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003eac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003eb0:	d10b      	bne.n	8003eca <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8003eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003eb8:	d107      	bne.n	8003eca <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003eba:	f107 0314 	add.w	r3, r7, #20
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7fe fd8e 	bl	80029e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ec8:	e047      	b.n	8003f5a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8003eca:	4b2c      	ldr	r3, [pc, #176]	@ (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ed2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ed6:	d10b      	bne.n	8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8003ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eda:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ede:	d107      	bne.n	8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003ee0:	f107 0308 	add.w	r3, r7, #8
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7fe fee7 	bl	8002cb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	637b      	str	r3, [r7, #52]	@ 0x34
 8003eee:	e034      	b.n	8003f5a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8003ef0:	4b22      	ldr	r3, [pc, #136]	@ (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d10d      	bne.n	8003f18 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8003efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003efe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003f02:	d109      	bne.n	8003f18 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003f04:	4b1d      	ldr	r3, [pc, #116]	@ (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	08db      	lsrs	r3, r3, #3
 8003f0a:	f003 0303 	and.w	r3, r3, #3
 8003f0e:	4a1c      	ldr	r2, [pc, #112]	@ (8003f80 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8003f10:	fa22 f303 	lsr.w	r3, r2, r3
 8003f14:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f16:	e020      	b.n	8003f5a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8003f18:	4b18      	ldr	r3, [pc, #96]	@ (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f24:	d106      	bne.n	8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8003f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f2c:	d102      	bne.n	8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8003f2e:	4b15      	ldr	r3, [pc, #84]	@ (8003f84 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8003f30:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f32:	e012      	b.n	8003f5a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8003f34:	4b11      	ldr	r3, [pc, #68]	@ (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003f36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d107      	bne.n	8003f52 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8003f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f44:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003f48:	d103      	bne.n	8003f52 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 8003f4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f50:	e003      	b.n	8003f5a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 8003f52:	2300      	movs	r3, #0
 8003f54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003f56:	f001 bb66 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003f5a:	f001 bb64 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8003f5e:	4b07      	ldr	r3, [pc, #28]	@ (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8003f60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003f64:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 8003f68:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8003f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d10b      	bne.n	8003f88 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003f70:	f7fe fb88 	bl	8002684 <HAL_RCC_GetPCLK1Freq>
 8003f74:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 8003f76:	f001 bb56 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8003f7a:	bf00      	nop
 8003f7c:	44020c00 	.word	0x44020c00
 8003f80:	03d09000 	.word	0x03d09000
 8003f84:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8003f88:	4ba1      	ldr	r3, [pc, #644]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f94:	d10b      	bne.n	8003fae <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8003f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f9c:	d107      	bne.n	8003fae <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003f9e:	f107 0314 	add.w	r3, r7, #20
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fe fd1c 	bl	80029e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fac:	e047      	b.n	800403e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8003fae:	4b98      	ldr	r3, [pc, #608]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003fb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fba:	d10b      	bne.n	8003fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8003fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fc2:	d107      	bne.n	8003fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003fc4:	f107 0308 	add.w	r3, r7, #8
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7fe fe75 	bl	8002cb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fd2:	e034      	b.n	800403e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8003fd4:	4b8e      	ldr	r3, [pc, #568]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d10d      	bne.n	8003ffc <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8003fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe2:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003fe6:	d109      	bne.n	8003ffc <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003fe8:	4b89      	ldr	r3, [pc, #548]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	08db      	lsrs	r3, r3, #3
 8003fee:	f003 0303 	and.w	r3, r3, #3
 8003ff2:	4a88      	ldr	r2, [pc, #544]	@ (8004214 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8003ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ff8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ffa:	e020      	b.n	800403e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8003ffc:	4b84      	ldr	r3, [pc, #528]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004004:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004008:	d106      	bne.n	8004018 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800400a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800400c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004010:	d102      	bne.n	8004018 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8004012:	4b81      	ldr	r3, [pc, #516]	@ (8004218 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8004014:	637b      	str	r3, [r7, #52]	@ 0x34
 8004016:	e012      	b.n	800403e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8004018:	4b7d      	ldr	r3, [pc, #500]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800401a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b02      	cmp	r3, #2
 8004024:	d107      	bne.n	8004036 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8004026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004028:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800402c:	d103      	bne.n	8004036 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800402e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004032:	637b      	str	r3, [r7, #52]	@ 0x34
 8004034:	e003      	b.n	800403e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8004036:	2300      	movs	r3, #0
 8004038:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800403a:	f001 baf4 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800403e:	f001 baf2 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8004042:	4b73      	ldr	r3, [pc, #460]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8004044:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800404e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004050:	2b00      	cmp	r3, #0
 8004052:	d104      	bne.n	800405e <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004054:	f7fe fb16 	bl	8002684 <HAL_RCC_GetPCLK1Freq>
 8004058:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800405a:	f001 bae4 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800405e:	4b6c      	ldr	r3, [pc, #432]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004066:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800406a:	d10a      	bne.n	8004082 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 800406c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800406e:	2b01      	cmp	r3, #1
 8004070:	d107      	bne.n	8004082 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004072:	f107 0314 	add.w	r3, r7, #20
 8004076:	4618      	mov	r0, r3
 8004078:	f7fe fcb2 	bl	80029e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004080:	e043      	b.n	800410a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8004082:	4b63      	ldr	r3, [pc, #396]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800408a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800408e:	d10a      	bne.n	80040a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8004090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004092:	2b02      	cmp	r3, #2
 8004094:	d107      	bne.n	80040a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004096:	f107 0308 	add.w	r3, r7, #8
 800409a:	4618      	mov	r0, r3
 800409c:	f7fe fe0c 	bl	8002cb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80040a4:	e031      	b.n	800410a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 80040a6:	4b5a      	ldr	r3, [pc, #360]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d10c      	bne.n	80040cc <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 80040b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b4:	2b03      	cmp	r3, #3
 80040b6:	d109      	bne.n	80040cc <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80040b8:	4b55      	ldr	r3, [pc, #340]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	08db      	lsrs	r3, r3, #3
 80040be:	f003 0303 	and.w	r3, r3, #3
 80040c2:	4a54      	ldr	r2, [pc, #336]	@ (8004214 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80040c4:	fa22 f303 	lsr.w	r3, r2, r3
 80040c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80040ca:	e01e      	b.n	800410a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 80040cc:	4b50      	ldr	r3, [pc, #320]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040d8:	d105      	bne.n	80040e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 80040da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040dc:	2b04      	cmp	r3, #4
 80040de:	d102      	bne.n	80040e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 80040e0:	4b4d      	ldr	r3, [pc, #308]	@ (8004218 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80040e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80040e4:	e011      	b.n	800410a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 80040e6:	4b4a      	ldr	r3, [pc, #296]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80040e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d106      	bne.n	8004102 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 80040f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f6:	2b05      	cmp	r3, #5
 80040f8:	d103      	bne.n	8004102 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 80040fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004100:	e003      	b.n	800410a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8004102:	2300      	movs	r3, #0
 8004104:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004106:	f001 ba8e 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800410a:	f001 ba8c 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800410e:	4b40      	ldr	r3, [pc, #256]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8004110:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004114:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004118:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800411a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800411c:	2b00      	cmp	r3, #0
 800411e:	d104      	bne.n	800412a <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004120:	f7fe fab0 	bl	8002684 <HAL_RCC_GetPCLK1Freq>
 8004124:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8004126:	f001 ba7e 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800412a:	4b39      	ldr	r3, [pc, #228]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004132:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004136:	d10a      	bne.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8004138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800413a:	2b10      	cmp	r3, #16
 800413c:	d107      	bne.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800413e:	f107 0314 	add.w	r3, r7, #20
 8004142:	4618      	mov	r0, r3
 8004144:	f7fe fc4c 	bl	80029e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	637b      	str	r3, [r7, #52]	@ 0x34
 800414c:	e043      	b.n	80041d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800414e:	4b30      	ldr	r3, [pc, #192]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004156:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800415a:	d10a      	bne.n	8004172 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800415c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800415e:	2b20      	cmp	r3, #32
 8004160:	d107      	bne.n	8004172 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004162:	f107 0308 	add.w	r3, r7, #8
 8004166:	4618      	mov	r0, r3
 8004168:	f7fe fda6 	bl	8002cb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004170:	e031      	b.n	80041d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8004172:	4b27      	ldr	r3, [pc, #156]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b02      	cmp	r3, #2
 800417c:	d10c      	bne.n	8004198 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800417e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004180:	2b30      	cmp	r3, #48	@ 0x30
 8004182:	d109      	bne.n	8004198 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004184:	4b22      	ldr	r3, [pc, #136]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	08db      	lsrs	r3, r3, #3
 800418a:	f003 0303 	and.w	r3, r3, #3
 800418e:	4a21      	ldr	r2, [pc, #132]	@ (8004214 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8004190:	fa22 f303 	lsr.w	r3, r2, r3
 8004194:	637b      	str	r3, [r7, #52]	@ 0x34
 8004196:	e01e      	b.n	80041d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8004198:	4b1d      	ldr	r3, [pc, #116]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041a4:	d105      	bne.n	80041b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 80041a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a8:	2b40      	cmp	r3, #64	@ 0x40
 80041aa:	d102      	bne.n	80041b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 80041ac:	4b1a      	ldr	r3, [pc, #104]	@ (8004218 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80041ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80041b0:	e011      	b.n	80041d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 80041b2:	4b17      	ldr	r3, [pc, #92]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80041b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d106      	bne.n	80041ce <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 80041c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041c2:	2b50      	cmp	r3, #80	@ 0x50
 80041c4:	d103      	bne.n	80041ce <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 80041c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80041cc:	e003      	b.n	80041d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 80041ce:	2300      	movs	r3, #0
 80041d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80041d2:	f001 ba28 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80041d6:	f001 ba26 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80041da:	4b0d      	ldr	r3, [pc, #52]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80041dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80041e0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80041e4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80041e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d104      	bne.n	80041f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80041ec:	f7fe fa76 	bl	80026dc <HAL_RCC_GetPCLK3Freq>
 80041f0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80041f2:	f001 ba18 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 80041f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041fc:	d10e      	bne.n	800421c <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80041fe:	f107 0314 	add.w	r3, r7, #20
 8004202:	4618      	mov	r0, r3
 8004204:	f7fe fbec 	bl	80029e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800420c:	f001 ba0b 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004210:	44020c00 	.word	0x44020c00
 8004214:	03d09000 	.word	0x03d09000
 8004218:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 800421c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800421e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004222:	d108      	bne.n	8004236 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004224:	f107 0308 	add.w	r3, r7, #8
 8004228:	4618      	mov	r0, r3
 800422a:	f7fe fd45 	bl	8002cb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004232:	f001 b9f8 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004236:	4ba4      	ldr	r3, [pc, #656]	@ (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b02      	cmp	r3, #2
 8004240:	d10d      	bne.n	800425e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8004242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004244:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004248:	d109      	bne.n	800425e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800424a:	4b9f      	ldr	r3, [pc, #636]	@ (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	08db      	lsrs	r3, r3, #3
 8004250:	f003 0303 	and.w	r3, r3, #3
 8004254:	4a9d      	ldr	r2, [pc, #628]	@ (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8004256:	fa22 f303 	lsr.w	r3, r2, r3
 800425a:	637b      	str	r3, [r7, #52]	@ 0x34
 800425c:	e020      	b.n	80042a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800425e:	4b9a      	ldr	r3, [pc, #616]	@ (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004266:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800426a:	d106      	bne.n	800427a <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 800426c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004272:	d102      	bne.n	800427a <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8004274:	4b96      	ldr	r3, [pc, #600]	@ (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8004276:	637b      	str	r3, [r7, #52]	@ 0x34
 8004278:	e012      	b.n	80042a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800427a:	4b93      	ldr	r3, [pc, #588]	@ (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800427c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b02      	cmp	r3, #2
 8004286:	d107      	bne.n	8004298 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8004288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800428a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800428e:	d103      	bne.n	8004298 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8004290:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004294:	637b      	str	r3, [r7, #52]	@ 0x34
 8004296:	e003      	b.n	80042a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8004298:	2300      	movs	r3, #0
 800429a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800429c:	f001 b9c3 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80042a0:	f001 b9c1 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80042a4:	4b88      	ldr	r3, [pc, #544]	@ (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80042a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80042aa:	f003 0307 	and.w	r3, r3, #7
 80042ae:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80042b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d104      	bne.n	80042c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 80042b6:	f7fe f9c9 	bl	800264c <HAL_RCC_GetHCLKFreq>
 80042ba:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 80042bc:	f001 b9b3 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80042c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d104      	bne.n	80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 80042c6:	f7fe f895 	bl	80023f4 <HAL_RCC_GetSysClockFreq>
 80042ca:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80042cc:	f001 b9ab 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 80042d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d108      	bne.n	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80042d6:	f107 0314 	add.w	r3, r7, #20
 80042da:	4618      	mov	r0, r3
 80042dc:	f7fe fb80 	bl	80029e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80042e4:	f001 b99f 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80042e8:	4b77      	ldr	r3, [pc, #476]	@ (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042f4:	d105      	bne.n	8004302 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 80042f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f8:	2b03      	cmp	r3, #3
 80042fa:	d102      	bne.n	8004302 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 80042fc:	4b75      	ldr	r3, [pc, #468]	@ (80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 80042fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004300:	e023      	b.n	800434a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004302:	4b71      	ldr	r3, [pc, #452]	@ (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b02      	cmp	r3, #2
 800430c:	d10c      	bne.n	8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 800430e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004310:	2b04      	cmp	r3, #4
 8004312:	d109      	bne.n	8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004314:	4b6c      	ldr	r3, [pc, #432]	@ (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	08db      	lsrs	r3, r3, #3
 800431a:	f003 0303 	and.w	r3, r3, #3
 800431e:	4a6b      	ldr	r2, [pc, #428]	@ (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8004320:	fa22 f303 	lsr.w	r3, r2, r3
 8004324:	637b      	str	r3, [r7, #52]	@ 0x34
 8004326:	e010      	b.n	800434a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8004328:	4b67      	ldr	r3, [pc, #412]	@ (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004330:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004334:	d105      	bne.n	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8004336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004338:	2b05      	cmp	r3, #5
 800433a:	d102      	bne.n	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 800433c:	4b64      	ldr	r3, [pc, #400]	@ (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800433e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004340:	e003      	b.n	800434a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8004342:	2300      	movs	r3, #0
 8004344:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004346:	f001 b96e 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800434a:	f001 b96c 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800434e:	4b5e      	ldr	r3, [pc, #376]	@ (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004350:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004354:	f003 0308 	and.w	r3, r3, #8
 8004358:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800435a:	4b5b      	ldr	r3, [pc, #364]	@ (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800435c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b02      	cmp	r3, #2
 8004366:	d106      	bne.n	8004376 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8004368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800436a:	2b00      	cmp	r3, #0
 800436c:	d103      	bne.n	8004376 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 800436e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004372:	637b      	str	r3, [r7, #52]	@ 0x34
 8004374:	e012      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8004376:	4b54      	ldr	r3, [pc, #336]	@ (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004378:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800437c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004380:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004384:	d106      	bne.n	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8004386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004388:	2b08      	cmp	r3, #8
 800438a:	d103      	bne.n	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 800438c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004390:	637b      	str	r3, [r7, #52]	@ 0x34
 8004392:	e003      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8004398:	f001 b945 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800439c:	f001 b943 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80043a0:	4b49      	ldr	r3, [pc, #292]	@ (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80043a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80043a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80043aa:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80043ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d104      	bne.n	80043bc <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80043b2:	f7fe f967 	bl	8002684 <HAL_RCC_GetPCLK1Freq>
 80043b6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80043b8:	f001 b935 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 80043bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043c2:	d108      	bne.n	80043d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80043c4:	f107 0308 	add.w	r3, r7, #8
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7fe fc75 	bl	8002cb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043d2:	f001 b928 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80043d6:	4b3c      	ldr	r3, [pc, #240]	@ (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d10d      	bne.n	80043fe <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 80043e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043e8:	d109      	bne.n	80043fe <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80043ea:	4b37      	ldr	r3, [pc, #220]	@ (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	08db      	lsrs	r3, r3, #3
 80043f0:	f003 0303 	and.w	r3, r3, #3
 80043f4:	4a35      	ldr	r2, [pc, #212]	@ (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80043f6:	fa22 f303 	lsr.w	r3, r2, r3
 80043fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80043fc:	e011      	b.n	8004422 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 80043fe:	4b32      	ldr	r3, [pc, #200]	@ (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004406:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800440a:	d106      	bne.n	800441a <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 800440c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800440e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004412:	d102      	bne.n	800441a <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8004414:	4b2e      	ldr	r3, [pc, #184]	@ (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8004416:	637b      	str	r3, [r7, #52]	@ 0x34
 8004418:	e003      	b.n	8004422 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 800441a:	2300      	movs	r3, #0
 800441c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800441e:	f001 b902 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004422:	f001 b900 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004426:	4b28      	ldr	r3, [pc, #160]	@ (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004428:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800442c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004430:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004434:	2b00      	cmp	r3, #0
 8004436:	d104      	bne.n	8004442 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004438:	f7fe f924 	bl	8002684 <HAL_RCC_GetPCLK1Freq>
 800443c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800443e:	f001 b8f2 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8004442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004444:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004448:	d108      	bne.n	800445c <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800444a:	f107 0308 	add.w	r3, r7, #8
 800444e:	4618      	mov	r0, r3
 8004450:	f7fe fc32 	bl	8002cb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004458:	f001 b8e5 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800445c:	4b1a      	ldr	r3, [pc, #104]	@ (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b02      	cmp	r3, #2
 8004466:	d10d      	bne.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8004468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800446a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800446e:	d109      	bne.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004470:	4b15      	ldr	r3, [pc, #84]	@ (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	08db      	lsrs	r3, r3, #3
 8004476:	f003 0303 	and.w	r3, r3, #3
 800447a:	4a14      	ldr	r2, [pc, #80]	@ (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800447c:	fa22 f303 	lsr.w	r3, r2, r3
 8004480:	637b      	str	r3, [r7, #52]	@ 0x34
 8004482:	e011      	b.n	80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8004484:	4b10      	ldr	r3, [pc, #64]	@ (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800448c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004490:	d106      	bne.n	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8004492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004494:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004498:	d102      	bne.n	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 800449a:	4b0d      	ldr	r3, [pc, #52]	@ (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800449c:	637b      	str	r3, [r7, #52]	@ 0x34
 800449e:	e003      	b.n	80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80044a4:	f001 b8bf 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80044a8:	f001 b8bd 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80044ac:	4b06      	ldr	r3, [pc, #24]	@ (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80044ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80044b2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80044b6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 80044b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10c      	bne.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80044be:	f7fe f90d 	bl	80026dc <HAL_RCC_GetPCLK3Freq>
 80044c2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 80044c4:	f001 b8af 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80044c8:	44020c00 	.word	0x44020c00
 80044cc:	03d09000 	.word	0x03d09000
 80044d0:	003d0900 	.word	0x003d0900
 80044d4:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 80044d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044de:	d108      	bne.n	80044f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80044e0:	f107 0308 	add.w	r3, r7, #8
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7fe fbe7 	bl	8002cb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80044ee:	f001 b89a 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 80044f2:	4b9f      	ldr	r3, [pc, #636]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d10d      	bne.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 80044fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004500:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004504:	d109      	bne.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004506:	4b9a      	ldr	r3, [pc, #616]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	08db      	lsrs	r3, r3, #3
 800450c:	f003 0303 	and.w	r3, r3, #3
 8004510:	4a98      	ldr	r2, [pc, #608]	@ (8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8004512:	fa22 f303 	lsr.w	r3, r2, r3
 8004516:	637b      	str	r3, [r7, #52]	@ 0x34
 8004518:	e011      	b.n	800453e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800451a:	4b95      	ldr	r3, [pc, #596]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004522:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004526:	d106      	bne.n	8004536 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8004528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800452e:	d102      	bne.n	8004536 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8004530:	4b91      	ldr	r3, [pc, #580]	@ (8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8004532:	637b      	str	r3, [r7, #52]	@ 0x34
 8004534:	e003      	b.n	800453e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8004536:	2300      	movs	r3, #0
 8004538:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800453a:	f001 b874 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800453e:	f001 b872 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004542:	4b8b      	ldr	r3, [pc, #556]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004544:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004548:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800454c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 800454e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004550:	2b00      	cmp	r3, #0
 8004552:	d104      	bne.n	800455e <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004554:	f7fe f8c2 	bl	80026dc <HAL_RCC_GetPCLK3Freq>
 8004558:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800455a:	f001 b864 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 800455e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004560:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004564:	d108      	bne.n	8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004566:	f107 0308 	add.w	r3, r7, #8
 800456a:	4618      	mov	r0, r3
 800456c:	f7fe fba4 	bl	8002cb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004574:	f001 b857 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8004578:	4b7d      	ldr	r3, [pc, #500]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b02      	cmp	r3, #2
 8004582:	d10d      	bne.n	80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8004584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004586:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800458a:	d109      	bne.n	80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800458c:	4b78      	ldr	r3, [pc, #480]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	08db      	lsrs	r3, r3, #3
 8004592:	f003 0303 	and.w	r3, r3, #3
 8004596:	4a77      	ldr	r2, [pc, #476]	@ (8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8004598:	fa22 f303 	lsr.w	r3, r2, r3
 800459c:	637b      	str	r3, [r7, #52]	@ 0x34
 800459e:	e011      	b.n	80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 80045a0:	4b73      	ldr	r3, [pc, #460]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045ac:	d106      	bne.n	80045bc <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 80045ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80045b4:	d102      	bne.n	80045bc <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 80045b6:	4b70      	ldr	r3, [pc, #448]	@ (8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80045b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80045ba:	e003      	b.n	80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 80045bc:	2300      	movs	r3, #0
 80045be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80045c0:	f001 b831 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80045c4:	f001 b82f 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 80045c8:	4b69      	ldr	r3, [pc, #420]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80045ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80045ce:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80045d2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 80045d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d104      	bne.n	80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80045da:	f7fe f853 	bl	8002684 <HAL_RCC_GetPCLK1Freq>
 80045de:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80045e0:	f001 b821 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 80045e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045ea:	d108      	bne.n	80045fe <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80045ec:	f107 0308 	add.w	r3, r7, #8
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7fe fb61 	bl	8002cb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80045fa:	f001 b814 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 80045fe:	4b5c      	ldr	r3, [pc, #368]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b02      	cmp	r3, #2
 8004608:	d10e      	bne.n	8004628 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 800460a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800460c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004610:	d10a      	bne.n	8004628 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004612:	4b57      	ldr	r3, [pc, #348]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	08db      	lsrs	r3, r3, #3
 8004618:	f003 0303 	and.w	r3, r3, #3
 800461c:	4a55      	ldr	r2, [pc, #340]	@ (8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800461e:	fa22 f303 	lsr.w	r3, r2, r3
 8004622:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004624:	f000 bfff 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8004628:	2300      	movs	r3, #0
 800462a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800462c:	f000 bffb 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004630:	4b4f      	ldr	r3, [pc, #316]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004632:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004636:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800463a:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800463c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800463e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004642:	d056      	beq.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8004644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004646:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800464a:	f200 808b 	bhi.w	8004764 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800464e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004650:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004654:	d03e      	beq.n	80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8004656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004658:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800465c:	f200 8082 	bhi.w	8004764 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8004660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004662:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004666:	d027      	beq.n	80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8004668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800466a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800466e:	d879      	bhi.n	8004764 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8004670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004672:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004676:	d017      	beq.n	80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8004678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800467e:	d871      	bhi.n	8004764 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8004680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004682:	2b00      	cmp	r3, #0
 8004684:	d004      	beq.n	8004690 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8004686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004688:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800468c:	d004      	beq.n	8004698 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 800468e:	e069      	b.n	8004764 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8004690:	f7fe f824 	bl	80026dc <HAL_RCC_GetPCLK3Freq>
 8004694:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8004696:	e068      	b.n	800476a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004698:	f107 0314 	add.w	r3, r7, #20
 800469c:	4618      	mov	r0, r3
 800469e:	f7fe f99f 	bl	80029e0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80046a6:	e060      	b.n	800476a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80046a8:	f107 0308 	add.w	r3, r7, #8
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7fe fb03 	bl	8002cb8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80046b6:	e058      	b.n	800476a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80046b8:	4b2d      	ldr	r3, [pc, #180]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80046ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d103      	bne.n	80046ce <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 80046c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046ca:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80046cc:	e04d      	b.n	800476a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 80046ce:	2300      	movs	r3, #0
 80046d0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80046d2:	e04a      	b.n	800476a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80046d4:	4b26      	ldr	r3, [pc, #152]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80046d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046e2:	d103      	bne.n	80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 80046e4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80046e8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80046ea:	e03e      	b.n	800476a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 80046ec:	2300      	movs	r3, #0
 80046ee:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80046f0:	e03b      	b.n	800476a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80046f2:	4b1f      	ldr	r3, [pc, #124]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80046f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80046f8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80046fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80046fe:	4b1c      	ldr	r3, [pc, #112]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b02      	cmp	r3, #2
 8004708:	d10c      	bne.n	8004724 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 800470a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800470c:	2b00      	cmp	r3, #0
 800470e:	d109      	bne.n	8004724 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004710:	4b17      	ldr	r3, [pc, #92]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	08db      	lsrs	r3, r3, #3
 8004716:	f003 0303 	and.w	r3, r3, #3
 800471a:	4a16      	ldr	r2, [pc, #88]	@ (8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800471c:	fa22 f303 	lsr.w	r3, r2, r3
 8004720:	637b      	str	r3, [r7, #52]	@ 0x34
 8004722:	e01e      	b.n	8004762 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004724:	4b12      	ldr	r3, [pc, #72]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800472c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004730:	d106      	bne.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8004732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004734:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004738:	d102      	bne.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800473a:	4b0f      	ldr	r3, [pc, #60]	@ (8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800473c:	637b      	str	r3, [r7, #52]	@ 0x34
 800473e:	e010      	b.n	8004762 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004740:	4b0b      	ldr	r3, [pc, #44]	@ (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004748:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800474c:	d106      	bne.n	800475c <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 800474e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004750:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004754:	d102      	bne.n	800475c <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004756:	4b09      	ldr	r3, [pc, #36]	@ (800477c <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8004758:	637b      	str	r3, [r7, #52]	@ 0x34
 800475a:	e002      	b.n	8004762 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800475c:	2300      	movs	r3, #0
 800475e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8004760:	e003      	b.n	800476a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8004762:	e002      	b.n	800476a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004768:	bf00      	nop
          }
        }
        break;
 800476a:	f000 bf5c 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800476e:	bf00      	nop
 8004770:	44020c00 	.word	0x44020c00
 8004774:	03d09000 	.word	0x03d09000
 8004778:	003d0900 	.word	0x003d0900
 800477c:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004780:	4b9e      	ldr	r3, [pc, #632]	@ (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004782:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004786:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800478a:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800478c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800478e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004792:	d056      	beq.n	8004842 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8004794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004796:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800479a:	f200 808b 	bhi.w	80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800479e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047a4:	d03e      	beq.n	8004824 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 80047a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047ac:	f200 8082 	bhi.w	80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80047b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80047b6:	d027      	beq.n	8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 80047b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80047be:	d879      	bhi.n	80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80047c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047c6:	d017      	beq.n	80047f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 80047c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047ce:	d871      	bhi.n	80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80047d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d004      	beq.n	80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 80047d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047dc:	d004      	beq.n	80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 80047de:	e069      	b.n	80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 80047e0:	f7fd ff50 	bl	8002684 <HAL_RCC_GetPCLK1Freq>
 80047e4:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80047e6:	e068      	b.n	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047e8:	f107 0314 	add.w	r3, r7, #20
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7fe f8f7 	bl	80029e0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80047f6:	e060      	b.n	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047f8:	f107 0308 	add.w	r3, r7, #8
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7fe fa5b 	bl	8002cb8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004806:	e058      	b.n	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004808:	4b7c      	ldr	r3, [pc, #496]	@ (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800480a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b02      	cmp	r3, #2
 8004814:	d103      	bne.n	800481e <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8004816:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800481a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800481c:	e04d      	b.n	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800481e:	2300      	movs	r3, #0
 8004820:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004822:	e04a      	b.n	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004824:	4b75      	ldr	r3, [pc, #468]	@ (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004826:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800482a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800482e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004832:	d103      	bne.n	800483c <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8004834:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004838:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800483a:	e03e      	b.n	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800483c:	2300      	movs	r3, #0
 800483e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004840:	e03b      	b.n	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004842:	4b6e      	ldr	r3, [pc, #440]	@ (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004844:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004848:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800484c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800484e:	4b6b      	ldr	r3, [pc, #428]	@ (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b02      	cmp	r3, #2
 8004858:	d10c      	bne.n	8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 800485a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800485c:	2b00      	cmp	r3, #0
 800485e:	d109      	bne.n	8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004860:	4b66      	ldr	r3, [pc, #408]	@ (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	08db      	lsrs	r3, r3, #3
 8004866:	f003 0303 	and.w	r3, r3, #3
 800486a:	4a65      	ldr	r2, [pc, #404]	@ (8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800486c:	fa22 f303 	lsr.w	r3, r2, r3
 8004870:	637b      	str	r3, [r7, #52]	@ 0x34
 8004872:	e01e      	b.n	80048b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004874:	4b61      	ldr	r3, [pc, #388]	@ (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800487c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004880:	d106      	bne.n	8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8004882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004884:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004888:	d102      	bne.n	8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800488a:	4b5e      	ldr	r3, [pc, #376]	@ (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800488c:	637b      	str	r3, [r7, #52]	@ 0x34
 800488e:	e010      	b.n	80048b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004890:	4b5a      	ldr	r3, [pc, #360]	@ (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004898:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800489c:	d106      	bne.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 800489e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80048a4:	d102      	bne.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80048a6:	4b58      	ldr	r3, [pc, #352]	@ (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 80048a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80048aa:	e002      	b.n	80048b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80048ac:	2300      	movs	r3, #0
 80048ae:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80048b0:	e003      	b.n	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 80048b2:	e002      	b.n	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80048b8:	bf00      	nop
          }
        }
        break;
 80048ba:	f000 beb4 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 80048be:	4b4f      	ldr	r3, [pc, #316]	@ (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80048c0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80048c4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80048c8:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 80048ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048d0:	d056      	beq.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 80048d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048d8:	f200 808b 	bhi.w	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80048dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80048e2:	d03e      	beq.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 80048e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80048ea:	f200 8082 	bhi.w	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80048ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80048f4:	d027      	beq.n	8004946 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 80048f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80048fc:	d879      	bhi.n	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80048fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004900:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004904:	d017      	beq.n	8004936 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8004906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004908:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800490c:	d871      	bhi.n	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800490e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004910:	2b00      	cmp	r3, #0
 8004912:	d004      	beq.n	800491e <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8004914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004916:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800491a:	d004      	beq.n	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 800491c:	e069      	b.n	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800491e:	f7fd fedd 	bl	80026dc <HAL_RCC_GetPCLK3Freq>
 8004922:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8004924:	e068      	b.n	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004926:	f107 0314 	add.w	r3, r7, #20
 800492a:	4618      	mov	r0, r3
 800492c:	f7fe f858 	bl	80029e0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004934:	e060      	b.n	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004936:	f107 0308 	add.w	r3, r7, #8
 800493a:	4618      	mov	r0, r3
 800493c:	f7fe f9bc 	bl	8002cb8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004944:	e058      	b.n	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004946:	4b2d      	ldr	r3, [pc, #180]	@ (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004948:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b02      	cmp	r3, #2
 8004952:	d103      	bne.n	800495c <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8004954:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004958:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800495a:	e04d      	b.n	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800495c:	2300      	movs	r3, #0
 800495e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004960:	e04a      	b.n	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004962:	4b26      	ldr	r3, [pc, #152]	@ (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004964:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004968:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800496c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004970:	d103      	bne.n	800497a <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8004972:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004976:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004978:	e03e      	b.n	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800497a:	2300      	movs	r3, #0
 800497c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800497e:	e03b      	b.n	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004980:	4b1e      	ldr	r3, [pc, #120]	@ (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8004982:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004986:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800498a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800498c:	4b1b      	ldr	r3, [pc, #108]	@ (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b02      	cmp	r3, #2
 8004996:	d10c      	bne.n	80049b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8004998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800499a:	2b00      	cmp	r3, #0
 800499c:	d109      	bne.n	80049b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800499e:	4b17      	ldr	r3, [pc, #92]	@ (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	08db      	lsrs	r3, r3, #3
 80049a4:	f003 0303 	and.w	r3, r3, #3
 80049a8:	4a15      	ldr	r2, [pc, #84]	@ (8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 80049aa:	fa22 f303 	lsr.w	r3, r2, r3
 80049ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80049b0:	e01e      	b.n	80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80049b2:	4b12      	ldr	r3, [pc, #72]	@ (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049be:	d106      	bne.n	80049ce <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 80049c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049c6:	d102      	bne.n	80049ce <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80049c8:	4b0e      	ldr	r3, [pc, #56]	@ (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 80049ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80049cc:	e010      	b.n	80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80049ce:	4b0b      	ldr	r3, [pc, #44]	@ (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049da:	d106      	bne.n	80049ea <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 80049dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049e2:	d102      	bne.n	80049ea <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80049e4:	4b08      	ldr	r3, [pc, #32]	@ (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 80049e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80049e8:	e002      	b.n	80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80049ea:	2300      	movs	r3, #0
 80049ec:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80049ee:	e003      	b.n	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 80049f0:	e002      	b.n	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 80049f2:	2300      	movs	r3, #0
 80049f4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80049f6:	bf00      	nop
          }
        }
        break;
 80049f8:	f000 be15 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80049fc:	44020c00 	.word	0x44020c00
 8004a00:	03d09000 	.word	0x03d09000
 8004a04:	003d0900 	.word	0x003d0900
 8004a08:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8004a0c:	4b9e      	ldr	r3, [pc, #632]	@ (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004a0e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004a12:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8004a16:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8004a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a1a:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8004a1e:	d056      	beq.n	8004ace <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8004a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a22:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8004a26:	f200 808b 	bhi.w	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8004a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a30:	d03e      	beq.n	8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8004a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a38:	f200 8082 	bhi.w	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8004a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a3e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a42:	d027      	beq.n	8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8004a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a46:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a4a:	d879      	bhi.n	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8004a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a4e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a52:	d017      	beq.n	8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8004a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a5a:	d871      	bhi.n	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8004a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d004      	beq.n	8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 8004a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a68:	d004      	beq.n	8004a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8004a6a:	e069      	b.n	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8004a6c:	f7fd fe36 	bl	80026dc <HAL_RCC_GetPCLK3Freq>
 8004a70:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8004a72:	e068      	b.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a74:	f107 0314 	add.w	r3, r7, #20
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7fd ffb1 	bl	80029e0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004a82:	e060      	b.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a84:	f107 0308 	add.w	r3, r7, #8
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7fe f915 	bl	8002cb8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004a92:	e058      	b.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004a94:	4b7c      	ldr	r3, [pc, #496]	@ (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004a96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d103      	bne.n	8004aaa <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8004aa2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004aa6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004aa8:	e04d      	b.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004aae:	e04a      	b.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004ab0:	4b75      	ldr	r3, [pc, #468]	@ (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004ab2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ab6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004aba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004abe:	d103      	bne.n	8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8004ac0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004ac4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004ac6:	e03e      	b.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004acc:	e03b      	b.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004ace:	4b6e      	ldr	r3, [pc, #440]	@ (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004ad0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ad4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004ada:	4b6b      	ldr	r3, [pc, #428]	@ (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d10c      	bne.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8004ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d109      	bne.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004aec:	4b66      	ldr	r3, [pc, #408]	@ (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	08db      	lsrs	r3, r3, #3
 8004af2:	f003 0303 	and.w	r3, r3, #3
 8004af6:	4a65      	ldr	r2, [pc, #404]	@ (8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8004af8:	fa22 f303 	lsr.w	r3, r2, r3
 8004afc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004afe:	e01e      	b.n	8004b3e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004b00:	4b61      	ldr	r3, [pc, #388]	@ (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b0c:	d106      	bne.n	8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8004b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b14:	d102      	bne.n	8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004b16:	4b5e      	ldr	r3, [pc, #376]	@ (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8004b18:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b1a:	e010      	b.n	8004b3e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004b1c:	4b5a      	ldr	r3, [pc, #360]	@ (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b28:	d106      	bne.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8004b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b30:	d102      	bne.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004b32:	4b58      	ldr	r3, [pc, #352]	@ (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8004b34:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b36:	e002      	b.n	8004b3e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8004b3c:	e003      	b.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8004b3e:	e002      	b.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8004b40:	2300      	movs	r3, #0
 8004b42:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004b44:	bf00      	nop
          }
        }
        break;
 8004b46:	f000 bd6e 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8004b4a:	4b4f      	ldr	r3, [pc, #316]	@ (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004b4c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004b50:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8004b54:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8004b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b58:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004b5c:	d056      	beq.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8004b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b60:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004b64:	f200 808b 	bhi.w	8004c7e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8004b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b6a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b6e:	d03e      	beq.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8004b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b72:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b76:	f200 8082 	bhi.w	8004c7e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8004b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b7c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004b80:	d027      	beq.n	8004bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8004b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b84:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004b88:	d879      	bhi.n	8004c7e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8004b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b90:	d017      	beq.n	8004bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8004b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b98:	d871      	bhi.n	8004c7e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8004b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d004      	beq.n	8004baa <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8004ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ba6:	d004      	beq.n	8004bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8004ba8:	e069      	b.n	8004c7e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8004baa:	f7fd fd97 	bl	80026dc <HAL_RCC_GetPCLK3Freq>
 8004bae:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8004bb0:	e068      	b.n	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bb2:	f107 0314 	add.w	r3, r7, #20
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7fd ff12 	bl	80029e0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004bc0:	e060      	b.n	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004bc2:	f107 0308 	add.w	r3, r7, #8
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fe f876 	bl	8002cb8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004bd0:	e058      	b.n	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004bd2:	4b2d      	ldr	r3, [pc, #180]	@ (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004bd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d103      	bne.n	8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8004be0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004be4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004be6:	e04d      	b.n	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8004be8:	2300      	movs	r3, #0
 8004bea:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004bec:	e04a      	b.n	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004bee:	4b26      	ldr	r3, [pc, #152]	@ (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004bf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bf4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bf8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bfc:	d103      	bne.n	8004c06 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8004bfe:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004c02:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004c04:	e03e      	b.n	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8004c06:	2300      	movs	r3, #0
 8004c08:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004c0a:	e03b      	b.n	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004c0c:	4b1e      	ldr	r3, [pc, #120]	@ (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004c0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c12:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004c16:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004c18:	4b1b      	ldr	r3, [pc, #108]	@ (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d10c      	bne.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8004c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d109      	bne.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004c2a:	4b17      	ldr	r3, [pc, #92]	@ (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	08db      	lsrs	r3, r3, #3
 8004c30:	f003 0303 	and.w	r3, r3, #3
 8004c34:	4a15      	ldr	r2, [pc, #84]	@ (8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8004c36:	fa22 f303 	lsr.w	r3, r2, r3
 8004c3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c3c:	e01e      	b.n	8004c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004c3e:	4b12      	ldr	r3, [pc, #72]	@ (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c4a:	d106      	bne.n	8004c5a <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8004c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c52:	d102      	bne.n	8004c5a <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004c54:	4b0e      	ldr	r3, [pc, #56]	@ (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8004c56:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c58:	e010      	b.n	8004c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c66:	d106      	bne.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8004c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c6e:	d102      	bne.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004c70:	4b08      	ldr	r3, [pc, #32]	@ (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8004c72:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c74:	e002      	b.n	8004c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004c76:	2300      	movs	r3, #0
 8004c78:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8004c7a:	e003      	b.n	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8004c7c:	e002      	b.n	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004c82:	bf00      	nop
          }
        }
        break;
 8004c84:	f000 bccf 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004c88:	44020c00 	.word	0x44020c00
 8004c8c:	03d09000 	.word	0x03d09000
 8004c90:	003d0900 	.word	0x003d0900
 8004c94:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8004c98:	4b9e      	ldr	r3, [pc, #632]	@ (8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004c9a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004c9e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8004ca2:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8004ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004caa:	d056      	beq.n	8004d5a <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8004cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004cb2:	f200 808b 	bhi.w	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8004cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cbc:	d03e      	beq.n	8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8004cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cc4:	f200 8082 	bhi.w	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8004cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004cce:	d027      	beq.n	8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8004cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004cd6:	d879      	bhi.n	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8004cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004cde:	d017      	beq.n	8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8004ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ce6:	d871      	bhi.n	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8004ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d004      	beq.n	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8004cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004cf4:	d004      	beq.n	8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8004cf6:	e069      	b.n	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8004cf8:	f7fd fcf0 	bl	80026dc <HAL_RCC_GetPCLK3Freq>
 8004cfc:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8004cfe:	e068      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d00:	f107 0314 	add.w	r3, r7, #20
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7fd fe6b 	bl	80029e0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004d0e:	e060      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d10:	f107 0308 	add.w	r3, r7, #8
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7fd ffcf 	bl	8002cb8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004d1e:	e058      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004d20:	4b7c      	ldr	r3, [pc, #496]	@ (8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004d22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d103      	bne.n	8004d36 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 8004d2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d32:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004d34:	e04d      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8004d36:	2300      	movs	r3, #0
 8004d38:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004d3a:	e04a      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004d3c:	4b75      	ldr	r3, [pc, #468]	@ (8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004d3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d4a:	d103      	bne.n	8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 8004d4c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004d50:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004d52:	e03e      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8004d54:	2300      	movs	r3, #0
 8004d56:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004d58:	e03b      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004d5a:	4b6e      	ldr	r3, [pc, #440]	@ (8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004d5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d60:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004d64:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004d66:	4b6b      	ldr	r3, [pc, #428]	@ (8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d10c      	bne.n	8004d8c <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 8004d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d109      	bne.n	8004d8c <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004d78:	4b66      	ldr	r3, [pc, #408]	@ (8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	08db      	lsrs	r3, r3, #3
 8004d7e:	f003 0303 	and.w	r3, r3, #3
 8004d82:	4a65      	ldr	r2, [pc, #404]	@ (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8004d84:	fa22 f303 	lsr.w	r3, r2, r3
 8004d88:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d8a:	e01e      	b.n	8004dca <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004d8c:	4b61      	ldr	r3, [pc, #388]	@ (8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d98:	d106      	bne.n	8004da8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 8004d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004da0:	d102      	bne.n	8004da8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004da2:	4b5e      	ldr	r3, [pc, #376]	@ (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8004da4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004da6:	e010      	b.n	8004dca <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004da8:	4b5a      	ldr	r3, [pc, #360]	@ (8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004db0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004db4:	d106      	bne.n	8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8004db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004db8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004dbc:	d102      	bne.n	8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004dbe:	4b58      	ldr	r3, [pc, #352]	@ (8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8004dc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dc2:	e002      	b.n	8004dca <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8004dc8:	e003      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 8004dca:	e002      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004dd0:	bf00      	nop
          }
        }
        break;
 8004dd2:	f000 bc28 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8004dd6:	4b4f      	ldr	r3, [pc, #316]	@ (8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004dd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ddc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004de0:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8004de2:	4b4c      	ldr	r3, [pc, #304]	@ (8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004dee:	d106      	bne.n	8004dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8004df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d103      	bne.n	8004dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8004df6:	4b4a      	ldr	r3, [pc, #296]	@ (8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8004df8:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8004dfa:	f000 bc14 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8004dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e04:	d108      	bne.n	8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e06:	f107 0320 	add.w	r3, r7, #32
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7fd fc7c 	bl	8002708 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e14:	f000 bc07 	b.w	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8004e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e1e:	d107      	bne.n	8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e20:	f107 0314 	add.w	r3, r7, #20
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7fd fddb 	bl	80029e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e2e:	e3fa      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e34:	e3f7      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8004e36:	4b37      	ldr	r3, [pc, #220]	@ (8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e3c:	f003 0307 	and.w	r3, r3, #7
 8004e40:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 8004e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e44:	2b04      	cmp	r3, #4
 8004e46:	d861      	bhi.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8004e48:	a201      	add	r2, pc, #4	@ (adr r2, 8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 8004e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e4e:	bf00      	nop
 8004e50:	08004e65 	.word	0x08004e65
 8004e54:	08004e75 	.word	0x08004e75
 8004e58:	08004e85 	.word	0x08004e85
 8004e5c:	08004e95 	.word	0x08004e95
 8004e60:	08004e9b 	.word	0x08004e9b
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e64:	f107 0320 	add.w	r3, r7, #32
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7fd fc4d 	bl	8002708 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e70:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004e72:	e04e      	b.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e74:	f107 0314 	add.w	r3, r7, #20
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7fd fdb1 	bl	80029e0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004e82:	e046      	b.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e84:	f107 0308 	add.w	r3, r7, #8
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7fd ff15 	bl	8002cb8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004e92:	e03e      	b.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004e94:	4b23      	ldr	r3, [pc, #140]	@ (8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 8004e96:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004e98:	e03b      	b.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004e9a:	4b1e      	ldr	r3, [pc, #120]	@ (8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004e9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ea0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004ea6:	4b1b      	ldr	r3, [pc, #108]	@ (8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d10c      	bne.n	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8004eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d109      	bne.n	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004eb8:	4b16      	ldr	r3, [pc, #88]	@ (8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	08db      	lsrs	r3, r3, #3
 8004ebe:	f003 0303 	and.w	r3, r3, #3
 8004ec2:	4a15      	ldr	r2, [pc, #84]	@ (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8004ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ec8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004eca:	e01e      	b.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004ecc:	4b11      	ldr	r3, [pc, #68]	@ (8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ed4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ed8:	d106      	bne.n	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 8004eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004edc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ee0:	d102      	bne.n	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8004ee4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ee6:	e010      	b.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ef0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ef4:	d106      	bne.n	8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 8004ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ef8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004efc:	d102      	bne.n	8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004efe:	4b08      	ldr	r3, [pc, #32]	@ (8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8004f00:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f02:	e002      	b.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004f04:	2300      	movs	r3, #0
 8004f06:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8004f08:	e003      	b.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 8004f0a:	e002      	b.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004f10:	bf00      	nop
          }
        }
        break;
 8004f12:	e388      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004f14:	44020c00 	.word	0x44020c00
 8004f18:	03d09000 	.word	0x03d09000
 8004f1c:	003d0900 	.word	0x003d0900
 8004f20:	007a1200 	.word	0x007a1200
 8004f24:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8004f28:	4ba9      	ldr	r3, [pc, #676]	@ (80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8004f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f32:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 8004f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f36:	2b20      	cmp	r3, #32
 8004f38:	f200 809a 	bhi.w	8005070 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8004f3c:	a201      	add	r2, pc, #4	@ (adr r2, 8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 8004f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f42:	bf00      	nop
 8004f44:	08004fc9 	.word	0x08004fc9
 8004f48:	08005071 	.word	0x08005071
 8004f4c:	08005071 	.word	0x08005071
 8004f50:	08005071 	.word	0x08005071
 8004f54:	08005071 	.word	0x08005071
 8004f58:	08005071 	.word	0x08005071
 8004f5c:	08005071 	.word	0x08005071
 8004f60:	08005071 	.word	0x08005071
 8004f64:	08004fd9 	.word	0x08004fd9
 8004f68:	08005071 	.word	0x08005071
 8004f6c:	08005071 	.word	0x08005071
 8004f70:	08005071 	.word	0x08005071
 8004f74:	08005071 	.word	0x08005071
 8004f78:	08005071 	.word	0x08005071
 8004f7c:	08005071 	.word	0x08005071
 8004f80:	08005071 	.word	0x08005071
 8004f84:	08004fe9 	.word	0x08004fe9
 8004f88:	08005071 	.word	0x08005071
 8004f8c:	08005071 	.word	0x08005071
 8004f90:	08005071 	.word	0x08005071
 8004f94:	08005071 	.word	0x08005071
 8004f98:	08005071 	.word	0x08005071
 8004f9c:	08005071 	.word	0x08005071
 8004fa0:	08005071 	.word	0x08005071
 8004fa4:	08004ff9 	.word	0x08004ff9
 8004fa8:	08005071 	.word	0x08005071
 8004fac:	08005071 	.word	0x08005071
 8004fb0:	08005071 	.word	0x08005071
 8004fb4:	08005071 	.word	0x08005071
 8004fb8:	08005071 	.word	0x08005071
 8004fbc:	08005071 	.word	0x08005071
 8004fc0:	08005071 	.word	0x08005071
 8004fc4:	08004fff 	.word	0x08004fff
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004fc8:	f107 0320 	add.w	r3, r7, #32
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7fd fb9b 	bl	8002708 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004fd6:	e04e      	b.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fd8:	f107 0314 	add.w	r3, r7, #20
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7fd fcff 	bl	80029e0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004fe6:	e046      	b.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004fe8:	f107 0308 	add.w	r3, r7, #8
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7fd fe63 	bl	8002cb8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004ff6:	e03e      	b.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004ff8:	4b76      	ldr	r3, [pc, #472]	@ (80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8004ffa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004ffc:	e03b      	b.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004ffe:	4b74      	ldr	r3, [pc, #464]	@ (80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8005000:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005004:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005008:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800500a:	4b71      	ldr	r3, [pc, #452]	@ (80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b02      	cmp	r3, #2
 8005014:	d10c      	bne.n	8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 8005016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005018:	2b00      	cmp	r3, #0
 800501a:	d109      	bne.n	8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800501c:	4b6c      	ldr	r3, [pc, #432]	@ (80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	08db      	lsrs	r3, r3, #3
 8005022:	f003 0303 	and.w	r3, r3, #3
 8005026:	4a6c      	ldr	r2, [pc, #432]	@ (80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8005028:	fa22 f303 	lsr.w	r3, r2, r3
 800502c:	637b      	str	r3, [r7, #52]	@ 0x34
 800502e:	e01e      	b.n	800506e <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005030:	4b67      	ldr	r3, [pc, #412]	@ (80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005038:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800503c:	d106      	bne.n	800504c <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800503e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005044:	d102      	bne.n	800504c <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005046:	4b65      	ldr	r3, [pc, #404]	@ (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8005048:	637b      	str	r3, [r7, #52]	@ 0x34
 800504a:	e010      	b.n	800506e <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800504c:	4b60      	ldr	r3, [pc, #384]	@ (80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005054:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005058:	d106      	bne.n	8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800505a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800505c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005060:	d102      	bne.n	8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005062:	4b5f      	ldr	r3, [pc, #380]	@ (80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8005064:	637b      	str	r3, [r7, #52]	@ 0x34
 8005066:	e002      	b.n	800506e <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005068:	2300      	movs	r3, #0
 800506a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800506c:	e003      	b.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800506e:	e002      	b.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8005070:	2300      	movs	r3, #0
 8005072:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005074:	bf00      	nop
          }
        }
        break;
 8005076:	e2d6      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8005078:	4b55      	ldr	r3, [pc, #340]	@ (80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800507a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800507e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005082:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 8005084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005086:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800508a:	d031      	beq.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 800508c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800508e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005092:	d866      	bhi.n	8005162 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8005094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005096:	2bc0      	cmp	r3, #192	@ 0xc0
 8005098:	d027      	beq.n	80050ea <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800509a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800509c:	2bc0      	cmp	r3, #192	@ 0xc0
 800509e:	d860      	bhi.n	8005162 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80050a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a2:	2b80      	cmp	r3, #128	@ 0x80
 80050a4:	d019      	beq.n	80050da <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 80050a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a8:	2b80      	cmp	r3, #128	@ 0x80
 80050aa:	d85a      	bhi.n	8005162 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80050ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 80050b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b4:	2b40      	cmp	r3, #64	@ 0x40
 80050b6:	d008      	beq.n	80050ca <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 80050b8:	e053      	b.n	8005162 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80050ba:	f107 0320 	add.w	r3, r7, #32
 80050be:	4618      	mov	r0, r3
 80050c0:	f7fd fb22 	bl	8002708 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80050c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80050c8:	e04e      	b.n	8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050ca:	f107 0314 	add.w	r3, r7, #20
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7fd fc86 	bl	80029e0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80050d8:	e046      	b.n	8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050da:	f107 0308 	add.w	r3, r7, #8
 80050de:	4618      	mov	r0, r3
 80050e0:	f7fd fdea 	bl	8002cb8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80050e8:	e03e      	b.n	8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80050ea:	4b3a      	ldr	r3, [pc, #232]	@ (80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 80050ec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80050ee:	e03b      	b.n	8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80050f0:	4b37      	ldr	r3, [pc, #220]	@ (80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80050f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80050f6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80050fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80050fc:	4b34      	ldr	r3, [pc, #208]	@ (80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	2b02      	cmp	r3, #2
 8005106:	d10c      	bne.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8005108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800510a:	2b00      	cmp	r3, #0
 800510c:	d109      	bne.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800510e:	4b30      	ldr	r3, [pc, #192]	@ (80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	08db      	lsrs	r3, r3, #3
 8005114:	f003 0303 	and.w	r3, r3, #3
 8005118:	4a2f      	ldr	r2, [pc, #188]	@ (80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800511a:	fa22 f303 	lsr.w	r3, r2, r3
 800511e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005120:	e01e      	b.n	8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005122:	4b2b      	ldr	r3, [pc, #172]	@ (80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800512a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800512e:	d106      	bne.n	800513e <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8005130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005132:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005136:	d102      	bne.n	800513e <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005138:	4b28      	ldr	r3, [pc, #160]	@ (80051dc <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800513a:	637b      	str	r3, [r7, #52]	@ 0x34
 800513c:	e010      	b.n	8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800513e:	4b24      	ldr	r3, [pc, #144]	@ (80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005146:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800514a:	d106      	bne.n	800515a <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800514c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800514e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005152:	d102      	bne.n	800515a <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005154:	4b22      	ldr	r3, [pc, #136]	@ (80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8005156:	637b      	str	r3, [r7, #52]	@ 0x34
 8005158:	e002      	b.n	8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800515a:	2300      	movs	r3, #0
 800515c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800515e:	e003      	b.n	8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8005160:	e002      	b.n	8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 8005162:	2300      	movs	r3, #0
 8005164:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005166:	bf00      	nop
          }
        }
        break;
 8005168:	e25d      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800516a:	4b19      	ldr	r3, [pc, #100]	@ (80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800516c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005170:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8005174:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8005176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005178:	2b00      	cmp	r3, #0
 800517a:	d103      	bne.n	8005184 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800517c:	f7fd fa98 	bl	80026b0 <HAL_RCC_GetPCLK2Freq>
 8005180:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8005182:	e250      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8005184:	4b12      	ldr	r3, [pc, #72]	@ (80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800518c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005190:	d10b      	bne.n	80051aa <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8005192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005194:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005198:	d107      	bne.n	80051aa <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800519a:	f107 0314 	add.w	r3, r7, #20
 800519e:	4618      	mov	r0, r3
 80051a0:	f7fd fc1e 	bl	80029e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80051a8:	e04f      	b.n	800524a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 80051aa:	4b09      	ldr	r3, [pc, #36]	@ (80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051b6:	d115      	bne.n	80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 80051b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051be:	d111      	bne.n	80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051c0:	f107 0308 	add.w	r3, r7, #8
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7fd fd77 	bl	8002cb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80051ce:	e03c      	b.n	800524a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 80051d0:	44020c00 	.word	0x44020c00
 80051d4:	00bb8000 	.word	0x00bb8000
 80051d8:	03d09000 	.word	0x03d09000
 80051dc:	003d0900 	.word	0x003d0900
 80051e0:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 80051e4:	4b94      	ldr	r3, [pc, #592]	@ (8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d10d      	bne.n	800520c <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 80051f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80051f6:	d109      	bne.n	800520c <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80051f8:	4b8f      	ldr	r3, [pc, #572]	@ (8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	08db      	lsrs	r3, r3, #3
 80051fe:	f003 0303 	and.w	r3, r3, #3
 8005202:	4a8e      	ldr	r2, [pc, #568]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8005204:	fa22 f303 	lsr.w	r3, r2, r3
 8005208:	637b      	str	r3, [r7, #52]	@ 0x34
 800520a:	e01e      	b.n	800524a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800520c:	4b8a      	ldr	r3, [pc, #552]	@ (8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005214:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005218:	d106      	bne.n	8005228 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800521a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800521c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005220:	d102      	bne.n	8005228 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8005222:	4b87      	ldr	r3, [pc, #540]	@ (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8005224:	637b      	str	r3, [r7, #52]	@ 0x34
 8005226:	e010      	b.n	800524a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8005228:	4b83      	ldr	r3, [pc, #524]	@ (8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005230:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005234:	d106      	bne.n	8005244 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8005236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005238:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800523c:	d102      	bne.n	8005244 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800523e:	4b81      	ldr	r3, [pc, #516]	@ (8005444 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8005240:	637b      	str	r3, [r7, #52]	@ 0x34
 8005242:	e002      	b.n	800524a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8005244:	2300      	movs	r3, #0
 8005246:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005248:	e1ed      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800524a:	e1ec      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800524c:	4b7a      	ldr	r3, [pc, #488]	@ (8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800524e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005252:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005256:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8005258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800525a:	2b00      	cmp	r3, #0
 800525c:	d103      	bne.n	8005266 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800525e:	f7fd fa3d 	bl	80026dc <HAL_RCC_GetPCLK3Freq>
 8005262:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8005264:	e1df      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8005266:	4b74      	ldr	r3, [pc, #464]	@ (8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800526e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005272:	d10b      	bne.n	800528c <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8005274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005276:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800527a:	d107      	bne.n	800528c <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800527c:	f107 0314 	add.w	r3, r7, #20
 8005280:	4618      	mov	r0, r3
 8005282:	f7fd fbad 	bl	80029e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	637b      	str	r3, [r7, #52]	@ 0x34
 800528a:	e045      	b.n	8005318 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800528c:	4b6a      	ldr	r3, [pc, #424]	@ (8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005294:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005298:	d10b      	bne.n	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800529a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800529c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052a0:	d107      	bne.n	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052a2:	f107 0308 	add.w	r3, r7, #8
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7fd fd06 	bl	8002cb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80052b0:	e032      	b.n	8005318 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 80052b2:	4b61      	ldr	r3, [pc, #388]	@ (8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d10d      	bne.n	80052da <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 80052be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80052c4:	d109      	bne.n	80052da <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80052c6:	4b5c      	ldr	r3, [pc, #368]	@ (8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	08db      	lsrs	r3, r3, #3
 80052cc:	f003 0303 	and.w	r3, r3, #3
 80052d0:	4a5a      	ldr	r2, [pc, #360]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80052d2:	fa22 f303 	lsr.w	r3, r2, r3
 80052d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80052d8:	e01e      	b.n	8005318 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 80052da:	4b57      	ldr	r3, [pc, #348]	@ (8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052e6:	d106      	bne.n	80052f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 80052e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80052ee:	d102      	bne.n	80052f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 80052f0:	4b53      	ldr	r3, [pc, #332]	@ (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 80052f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80052f4:	e010      	b.n	8005318 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 80052f6:	4b50      	ldr	r3, [pc, #320]	@ (8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005302:	d106      	bne.n	8005312 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8005304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005306:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800530a:	d102      	bne.n	8005312 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800530c:	4b4d      	ldr	r3, [pc, #308]	@ (8005444 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800530e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005310:	e002      	b.n	8005318 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8005312:	2300      	movs	r3, #0
 8005314:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005316:	e186      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005318:	e185      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800531a:	4b47      	ldr	r3, [pc, #284]	@ (8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800531c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005320:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8005324:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8005326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005328:	2b00      	cmp	r3, #0
 800532a:	d103      	bne.n	8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800532c:	f7fd f9c0 	bl	80026b0 <HAL_RCC_GetPCLK2Freq>
 8005330:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8005332:	e178      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8005334:	4b40      	ldr	r3, [pc, #256]	@ (8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800533c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005340:	d10b      	bne.n	800535a <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8005342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005344:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005348:	d107      	bne.n	800535a <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800534a:	f107 0314 	add.w	r3, r7, #20
 800534e:	4618      	mov	r0, r3
 8005350:	f7fd fb46 	bl	80029e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	637b      	str	r3, [r7, #52]	@ 0x34
 8005358:	e045      	b.n	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800535a:	4b37      	ldr	r3, [pc, #220]	@ (8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005362:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005366:	d10b      	bne.n	8005380 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8005368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800536a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800536e:	d107      	bne.n	8005380 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005370:	f107 0308 	add.w	r3, r7, #8
 8005374:	4618      	mov	r0, r3
 8005376:	f7fd fc9f 	bl	8002cb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	637b      	str	r3, [r7, #52]	@ 0x34
 800537e:	e032      	b.n	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8005380:	4b2d      	ldr	r3, [pc, #180]	@ (8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	2b02      	cmp	r3, #2
 800538a:	d10d      	bne.n	80053a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 800538c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800538e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8005392:	d109      	bne.n	80053a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005394:	4b28      	ldr	r3, [pc, #160]	@ (8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	08db      	lsrs	r3, r3, #3
 800539a:	f003 0303 	and.w	r3, r3, #3
 800539e:	4a27      	ldr	r2, [pc, #156]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80053a0:	fa22 f303 	lsr.w	r3, r2, r3
 80053a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80053a6:	e01e      	b.n	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 80053a8:	4b23      	ldr	r3, [pc, #140]	@ (8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053b4:	d106      	bne.n	80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 80053b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80053bc:	d102      	bne.n	80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 80053be:	4b20      	ldr	r3, [pc, #128]	@ (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 80053c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80053c2:	e010      	b.n	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 80053c4:	4b1c      	ldr	r3, [pc, #112]	@ (8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80053d0:	d106      	bne.n	80053e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 80053d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d4:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80053d8:	d102      	bne.n	80053e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 80053da:	4b1a      	ldr	r3, [pc, #104]	@ (8005444 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 80053dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80053de:	e002      	b.n	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 80053e0:	2300      	movs	r3, #0
 80053e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80053e4:	e11f      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80053e6:	e11e      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80053e8:	4b13      	ldr	r3, [pc, #76]	@ (8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80053ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80053ee:	f003 0303 	and.w	r3, r3, #3
 80053f2:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 80053f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f6:	2b03      	cmp	r3, #3
 80053f8:	d85f      	bhi.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 80053fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 80053fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005400:	08005411 	.word	0x08005411
 8005404:	08005419 	.word	0x08005419
 8005408:	08005429 	.word	0x08005429
 800540c:	08005449 	.word	0x08005449
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8005410:	f7fd f91c 	bl	800264c <HAL_RCC_GetHCLKFreq>
 8005414:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8005416:	e053      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005418:	f107 0320 	add.w	r3, r7, #32
 800541c:	4618      	mov	r0, r3
 800541e:	f7fd f973 	bl	8002708 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005424:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005426:	e04b      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005428:	f107 0314 	add.w	r3, r7, #20
 800542c:	4618      	mov	r0, r3
 800542e:	f7fd fad7 	bl	80029e0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005436:	e043      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8005438:	44020c00 	.word	0x44020c00
 800543c:	03d09000 	.word	0x03d09000
 8005440:	003d0900 	.word	0x003d0900
 8005444:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005448:	4b79      	ldr	r3, [pc, #484]	@ (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800544a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800544e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005452:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005454:	4b76      	ldr	r3, [pc, #472]	@ (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0302 	and.w	r3, r3, #2
 800545c:	2b02      	cmp	r3, #2
 800545e:	d10c      	bne.n	800547a <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8005460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005462:	2b00      	cmp	r3, #0
 8005464:	d109      	bne.n	800547a <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005466:	4b72      	ldr	r3, [pc, #456]	@ (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	08db      	lsrs	r3, r3, #3
 800546c:	f003 0303 	and.w	r3, r3, #3
 8005470:	4a70      	ldr	r2, [pc, #448]	@ (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8005472:	fa22 f303 	lsr.w	r3, r2, r3
 8005476:	637b      	str	r3, [r7, #52]	@ 0x34
 8005478:	e01e      	b.n	80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800547a:	4b6d      	ldr	r3, [pc, #436]	@ (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005482:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005486:	d106      	bne.n	8005496 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8005488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800548a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800548e:	d102      	bne.n	8005496 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005490:	4b69      	ldr	r3, [pc, #420]	@ (8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8005492:	637b      	str	r3, [r7, #52]	@ 0x34
 8005494:	e010      	b.n	80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005496:	4b66      	ldr	r3, [pc, #408]	@ (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800549e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054a2:	d106      	bne.n	80054b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 80054a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054aa:	d102      	bne.n	80054b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80054ac:	4b63      	ldr	r3, [pc, #396]	@ (800563c <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 80054ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80054b0:	e002      	b.n	80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80054b2:	2300      	movs	r3, #0
 80054b4:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80054b6:	e003      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 80054b8:	e002      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 80054ba:	2300      	movs	r3, #0
 80054bc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80054be:	bf00      	nop
          }
        }
        break;
 80054c0:	e0b1      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 80054c2:	4b5b      	ldr	r3, [pc, #364]	@ (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80054c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80054c8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80054cc:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 80054ce:	4b58      	ldr	r3, [pc, #352]	@ (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80054d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054d4:	f003 0302 	and.w	r3, r3, #2
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d106      	bne.n	80054ea <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 80054dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d103      	bne.n	80054ea <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 80054e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80054e8:	e01f      	b.n	800552a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 80054ea:	4b51      	ldr	r3, [pc, #324]	@ (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80054ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054f8:	d106      	bne.n	8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 80054fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054fc:	2b40      	cmp	r3, #64	@ 0x40
 80054fe:	d103      	bne.n	8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8005500:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005504:	637b      	str	r3, [r7, #52]	@ 0x34
 8005506:	e010      	b.n	800552a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8005508:	4b49      	ldr	r3, [pc, #292]	@ (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005510:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005514:	d106      	bne.n	8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8005516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005518:	2b80      	cmp	r3, #128	@ 0x80
 800551a:	d103      	bne.n	8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800551c:	f248 0312 	movw	r3, #32786	@ 0x8012
 8005520:	637b      	str	r3, [r7, #52]	@ 0x34
 8005522:	e002      	b.n	800552a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8005524:	2300      	movs	r3, #0
 8005526:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8005528:	e07d      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800552a:	e07c      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800552c:	4b40      	ldr	r3, [pc, #256]	@ (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800552e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005532:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005536:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8005538:	4b3d      	ldr	r3, [pc, #244]	@ (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005540:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005544:	d105      	bne.n	8005552 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 8005546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005548:	2b00      	cmp	r3, #0
 800554a:	d102      	bne.n	8005552 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800554c:	4b3c      	ldr	r3, [pc, #240]	@ (8005640 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800554e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005550:	e031      	b.n	80055b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8005552:	4b37      	ldr	r3, [pc, #220]	@ (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800555a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800555e:	d10a      	bne.n	8005576 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8005560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005562:	2b10      	cmp	r3, #16
 8005564:	d107      	bne.n	8005576 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005566:	f107 0320 	add.w	r3, r7, #32
 800556a:	4618      	mov	r0, r3
 800556c:	f7fd f8cc 	bl	8002708 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005572:	637b      	str	r3, [r7, #52]	@ 0x34
 8005574:	e01f      	b.n	80055b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8005576:	4b2e      	ldr	r3, [pc, #184]	@ (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8005578:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800557c:	f003 0302 	and.w	r3, r3, #2
 8005580:	2b02      	cmp	r3, #2
 8005582:	d106      	bne.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8005584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005586:	2b20      	cmp	r3, #32
 8005588:	d103      	bne.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800558a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800558e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005590:	e011      	b.n	80055b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8005592:	4b27      	ldr	r3, [pc, #156]	@ (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8005594:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005598:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800559c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055a0:	d106      	bne.n	80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 80055a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a4:	2b30      	cmp	r3, #48	@ 0x30
 80055a6:	d103      	bne.n	80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 80055a8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80055ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80055ae:	e002      	b.n	80055b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 80055b0:	2300      	movs	r3, #0
 80055b2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80055b4:	e037      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80055b6:	e036      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 80055b8:	4b1d      	ldr	r3, [pc, #116]	@ (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80055ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80055be:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80055c2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 80055c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c6:	2b10      	cmp	r3, #16
 80055c8:	d107      	bne.n	80055da <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055ca:	f107 0320 	add.w	r3, r7, #32
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7fd f89a 	bl	8002708 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80055d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80055d8:	e025      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 80055da:	4b15      	ldr	r3, [pc, #84]	@ (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055e6:	d10a      	bne.n	80055fe <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 80055e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ea:	2b20      	cmp	r3, #32
 80055ec:	d107      	bne.n	80055fe <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055ee:	f107 0308 	add.w	r3, r7, #8
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7fd fb60 	bl	8002cb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80055fc:	e00f      	b.n	800561e <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 80055fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005606:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800560a:	d105      	bne.n	8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800560c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800560e:	2b30      	cmp	r3, #48	@ 0x30
 8005610:	d102      	bne.n	8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8005612:	4b0b      	ldr	r3, [pc, #44]	@ (8005640 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8005614:	637b      	str	r3, [r7, #52]	@ 0x34
 8005616:	e002      	b.n	800561e <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8005618:	2300      	movs	r3, #0
 800561a:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 800561c:	e003      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800561e:	e002      	b.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8005620:	2300      	movs	r3, #0
 8005622:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005624:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 8005626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005628:	4618      	mov	r0, r3
 800562a:	373c      	adds	r7, #60	@ 0x3c
 800562c:	46bd      	mov	sp, r7
 800562e:	bd90      	pop	{r4, r7, pc}
 8005630:	44020c00 	.word	0x44020c00
 8005634:	03d09000 	.word	0x03d09000
 8005638:	003d0900 	.word	0x003d0900
 800563c:	007a1200 	.word	0x007a1200
 8005640:	02dc6c00 	.word	0x02dc6c00

08005644 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e042      	b.n	80056dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800565c:	2b00      	cmp	r3, #0
 800565e:	d106      	bne.n	800566e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 f83b 	bl	80056e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2224      	movs	r2, #36	@ 0x24
 8005672:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f022 0201 	bic.w	r2, r2, #1
 8005684:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800568a:	2b00      	cmp	r3, #0
 800568c:	d002      	beq.n	8005694 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 fa20 	bl	8005ad4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 f82f 	bl	80056f8 <UART_SetConfig>
 800569a:	4603      	mov	r3, r0
 800569c:	2b01      	cmp	r3, #1
 800569e:	d101      	bne.n	80056a4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e01b      	b.n	80056dc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	685a      	ldr	r2, [r3, #4]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80056b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	689a      	ldr	r2, [r3, #8]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80056c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f042 0201 	orr.w	r2, r2, #1
 80056d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 fa9f 	bl	8005c18 <UART_CheckIdleState>
 80056da:	4603      	mov	r3, r0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3708      	adds	r7, #8
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056fc:	b094      	sub	sp, #80	@ 0x50
 80056fe:	af00      	add	r7, sp, #0
 8005700:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005702:	2300      	movs	r3, #0
 8005704:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8005708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	4b78      	ldr	r3, [pc, #480]	@ (80058f0 <UART_SetConfig+0x1f8>)
 800570e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005712:	689a      	ldr	r2, [r3, #8]
 8005714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	431a      	orrs	r2, r3
 800571a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	431a      	orrs	r2, r3
 8005720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005722:	69db      	ldr	r3, [r3, #28]
 8005724:	4313      	orrs	r3, r2
 8005726:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4971      	ldr	r1, [pc, #452]	@ (80058f4 <UART_SetConfig+0x1fc>)
 8005730:	4019      	ands	r1, r3
 8005732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005738:	430b      	orrs	r3, r1
 800573a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800573c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005748:	68d9      	ldr	r1, [r3, #12]
 800574a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	ea40 0301 	orr.w	r3, r0, r1
 8005752:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800575a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	4b64      	ldr	r3, [pc, #400]	@ (80058f0 <UART_SetConfig+0x1f8>)
 8005760:	429a      	cmp	r2, r3
 8005762:	d009      	beq.n	8005778 <UART_SetConfig+0x80>
 8005764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	4b63      	ldr	r3, [pc, #396]	@ (80058f8 <UART_SetConfig+0x200>)
 800576a:	429a      	cmp	r2, r3
 800576c:	d004      	beq.n	8005778 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800576e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005770:	6a1a      	ldr	r2, [r3, #32]
 8005772:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005774:	4313      	orrs	r3, r2
 8005776:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8005782:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8005786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800578c:	430b      	orrs	r3, r1
 800578e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005796:	f023 000f 	bic.w	r0, r3, #15
 800579a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800579c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800579e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	ea40 0301 	orr.w	r3, r0, r1
 80057a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	4b53      	ldr	r3, [pc, #332]	@ (80058fc <UART_SetConfig+0x204>)
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d102      	bne.n	80057b8 <UART_SetConfig+0xc0>
 80057b2:	2301      	movs	r3, #1
 80057b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057b6:	e066      	b.n	8005886 <UART_SetConfig+0x18e>
 80057b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	4b50      	ldr	r3, [pc, #320]	@ (8005900 <UART_SetConfig+0x208>)
 80057be:	429a      	cmp	r2, r3
 80057c0:	d102      	bne.n	80057c8 <UART_SetConfig+0xd0>
 80057c2:	2302      	movs	r3, #2
 80057c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057c6:	e05e      	b.n	8005886 <UART_SetConfig+0x18e>
 80057c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	4b4d      	ldr	r3, [pc, #308]	@ (8005904 <UART_SetConfig+0x20c>)
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d102      	bne.n	80057d8 <UART_SetConfig+0xe0>
 80057d2:	2304      	movs	r3, #4
 80057d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057d6:	e056      	b.n	8005886 <UART_SetConfig+0x18e>
 80057d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	4b4a      	ldr	r3, [pc, #296]	@ (8005908 <UART_SetConfig+0x210>)
 80057de:	429a      	cmp	r2, r3
 80057e0:	d102      	bne.n	80057e8 <UART_SetConfig+0xf0>
 80057e2:	2308      	movs	r3, #8
 80057e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057e6:	e04e      	b.n	8005886 <UART_SetConfig+0x18e>
 80057e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	4b47      	ldr	r3, [pc, #284]	@ (800590c <UART_SetConfig+0x214>)
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d102      	bne.n	80057f8 <UART_SetConfig+0x100>
 80057f2:	2310      	movs	r3, #16
 80057f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057f6:	e046      	b.n	8005886 <UART_SetConfig+0x18e>
 80057f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	4b44      	ldr	r3, [pc, #272]	@ (8005910 <UART_SetConfig+0x218>)
 80057fe:	429a      	cmp	r2, r3
 8005800:	d102      	bne.n	8005808 <UART_SetConfig+0x110>
 8005802:	2320      	movs	r3, #32
 8005804:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005806:	e03e      	b.n	8005886 <UART_SetConfig+0x18e>
 8005808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	4b41      	ldr	r3, [pc, #260]	@ (8005914 <UART_SetConfig+0x21c>)
 800580e:	429a      	cmp	r2, r3
 8005810:	d102      	bne.n	8005818 <UART_SetConfig+0x120>
 8005812:	2340      	movs	r3, #64	@ 0x40
 8005814:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005816:	e036      	b.n	8005886 <UART_SetConfig+0x18e>
 8005818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	4b3e      	ldr	r3, [pc, #248]	@ (8005918 <UART_SetConfig+0x220>)
 800581e:	429a      	cmp	r2, r3
 8005820:	d102      	bne.n	8005828 <UART_SetConfig+0x130>
 8005822:	2380      	movs	r3, #128	@ 0x80
 8005824:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005826:	e02e      	b.n	8005886 <UART_SetConfig+0x18e>
 8005828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	4b3b      	ldr	r3, [pc, #236]	@ (800591c <UART_SetConfig+0x224>)
 800582e:	429a      	cmp	r2, r3
 8005830:	d103      	bne.n	800583a <UART_SetConfig+0x142>
 8005832:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005836:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005838:	e025      	b.n	8005886 <UART_SetConfig+0x18e>
 800583a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	4b38      	ldr	r3, [pc, #224]	@ (8005920 <UART_SetConfig+0x228>)
 8005840:	429a      	cmp	r2, r3
 8005842:	d103      	bne.n	800584c <UART_SetConfig+0x154>
 8005844:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005848:	64bb      	str	r3, [r7, #72]	@ 0x48
 800584a:	e01c      	b.n	8005886 <UART_SetConfig+0x18e>
 800584c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	4b34      	ldr	r3, [pc, #208]	@ (8005924 <UART_SetConfig+0x22c>)
 8005852:	429a      	cmp	r2, r3
 8005854:	d103      	bne.n	800585e <UART_SetConfig+0x166>
 8005856:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800585a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800585c:	e013      	b.n	8005886 <UART_SetConfig+0x18e>
 800585e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	4b31      	ldr	r3, [pc, #196]	@ (8005928 <UART_SetConfig+0x230>)
 8005864:	429a      	cmp	r2, r3
 8005866:	d103      	bne.n	8005870 <UART_SetConfig+0x178>
 8005868:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800586c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800586e:	e00a      	b.n	8005886 <UART_SetConfig+0x18e>
 8005870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	4b1e      	ldr	r3, [pc, #120]	@ (80058f0 <UART_SetConfig+0x1f8>)
 8005876:	429a      	cmp	r2, r3
 8005878:	d103      	bne.n	8005882 <UART_SetConfig+0x18a>
 800587a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800587e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005880:	e001      	b.n	8005886 <UART_SetConfig+0x18e>
 8005882:	2300      	movs	r3, #0
 8005884:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	4b19      	ldr	r3, [pc, #100]	@ (80058f0 <UART_SetConfig+0x1f8>)
 800588c:	429a      	cmp	r2, r3
 800588e:	d005      	beq.n	800589c <UART_SetConfig+0x1a4>
 8005890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	4b18      	ldr	r3, [pc, #96]	@ (80058f8 <UART_SetConfig+0x200>)
 8005896:	429a      	cmp	r2, r3
 8005898:	f040 8094 	bne.w	80059c4 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800589c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800589e:	2200      	movs	r2, #0
 80058a0:	623b      	str	r3, [r7, #32]
 80058a2:	627a      	str	r2, [r7, #36]	@ 0x24
 80058a4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80058a8:	f7fd fb72 	bl	8002f90 <HAL_RCCEx_GetPeriphCLKFreq>
 80058ac:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80058ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f000 80f7 	beq.w	8005aa4 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80058b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ba:	4a1c      	ldr	r2, [pc, #112]	@ (800592c <UART_SetConfig+0x234>)
 80058bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058c0:	461a      	mov	r2, r3
 80058c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80058c8:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058cc:	685a      	ldr	r2, [r3, #4]
 80058ce:	4613      	mov	r3, r2
 80058d0:	005b      	lsls	r3, r3, #1
 80058d2:	4413      	add	r3, r2
 80058d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d305      	bcc.n	80058e6 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80058da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d924      	bls.n	8005930 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80058ec:	e069      	b.n	80059c2 <UART_SetConfig+0x2ca>
 80058ee:	bf00      	nop
 80058f0:	44002400 	.word	0x44002400
 80058f4:	cfff69f3 	.word	0xcfff69f3
 80058f8:	54002400 	.word	0x54002400
 80058fc:	40013800 	.word	0x40013800
 8005900:	40004400 	.word	0x40004400
 8005904:	40004800 	.word	0x40004800
 8005908:	40004c00 	.word	0x40004c00
 800590c:	40005000 	.word	0x40005000
 8005910:	40006400 	.word	0x40006400
 8005914:	40007800 	.word	0x40007800
 8005918:	40007c00 	.word	0x40007c00
 800591c:	40008000 	.word	0x40008000
 8005920:	40006800 	.word	0x40006800
 8005924:	40006c00 	.word	0x40006c00
 8005928:	40008400 	.word	0x40008400
 800592c:	08005fa8 	.word	0x08005fa8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005930:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005932:	2200      	movs	r2, #0
 8005934:	61bb      	str	r3, [r7, #24]
 8005936:	61fa      	str	r2, [r7, #28]
 8005938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800593a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800593c:	4a64      	ldr	r2, [pc, #400]	@ (8005ad0 <UART_SetConfig+0x3d8>)
 800593e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005942:	b29b      	uxth	r3, r3
 8005944:	2200      	movs	r2, #0
 8005946:	613b      	str	r3, [r7, #16]
 8005948:	617a      	str	r2, [r7, #20]
 800594a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800594e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005952:	f7fa fc9b 	bl	800028c <__aeabi_uldivmod>
 8005956:	4602      	mov	r2, r0
 8005958:	460b      	mov	r3, r1
 800595a:	4610      	mov	r0, r2
 800595c:	4619      	mov	r1, r3
 800595e:	f04f 0200 	mov.w	r2, #0
 8005962:	f04f 0300 	mov.w	r3, #0
 8005966:	020b      	lsls	r3, r1, #8
 8005968:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800596c:	0202      	lsls	r2, r0, #8
 800596e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005970:	6849      	ldr	r1, [r1, #4]
 8005972:	0849      	lsrs	r1, r1, #1
 8005974:	2000      	movs	r0, #0
 8005976:	460c      	mov	r4, r1
 8005978:	4605      	mov	r5, r0
 800597a:	eb12 0804 	adds.w	r8, r2, r4
 800597e:	eb43 0905 	adc.w	r9, r3, r5
 8005982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	60bb      	str	r3, [r7, #8]
 800598a:	60fa      	str	r2, [r7, #12]
 800598c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005990:	4640      	mov	r0, r8
 8005992:	4649      	mov	r1, r9
 8005994:	f7fa fc7a 	bl	800028c <__aeabi_uldivmod>
 8005998:	4602      	mov	r2, r0
 800599a:	460b      	mov	r3, r1
 800599c:	4613      	mov	r3, r2
 800599e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059a6:	d308      	bcc.n	80059ba <UART_SetConfig+0x2c2>
 80059a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059ae:	d204      	bcs.n	80059ba <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 80059b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80059b6:	60da      	str	r2, [r3, #12]
 80059b8:	e003      	b.n	80059c2 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 80059c0:	e070      	b.n	8005aa4 <UART_SetConfig+0x3ac>
 80059c2:	e06f      	b.n	8005aa4 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059c6:	69db      	ldr	r3, [r3, #28]
 80059c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059cc:	d13c      	bne.n	8005a48 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80059ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059d0:	2200      	movs	r2, #0
 80059d2:	603b      	str	r3, [r7, #0]
 80059d4:	607a      	str	r2, [r7, #4]
 80059d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059da:	f7fd fad9 	bl	8002f90 <HAL_RCCEx_GetPeriphCLKFreq>
 80059de:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d05e      	beq.n	8005aa4 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ea:	4a39      	ldr	r2, [pc, #228]	@ (8005ad0 <UART_SetConfig+0x3d8>)
 80059ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059f0:	461a      	mov	r2, r3
 80059f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80059f8:	005a      	lsls	r2, r3, #1
 80059fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	085b      	lsrs	r3, r3, #1
 8005a00:	441a      	add	r2, r3
 8005a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a0e:	2b0f      	cmp	r3, #15
 8005a10:	d916      	bls.n	8005a40 <UART_SetConfig+0x348>
 8005a12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a18:	d212      	bcs.n	8005a40 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	f023 030f 	bic.w	r3, r3, #15
 8005a22:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a26:	085b      	lsrs	r3, r3, #1
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	f003 0307 	and.w	r3, r3, #7
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005a32:	4313      	orrs	r3, r2
 8005a34:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8005a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8005a3c:	60da      	str	r2, [r3, #12]
 8005a3e:	e031      	b.n	8005aa4 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005a46:	e02d      	b.n	8005aa4 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005a48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	469a      	mov	sl, r3
 8005a4e:	4693      	mov	fp, r2
 8005a50:	4650      	mov	r0, sl
 8005a52:	4659      	mov	r1, fp
 8005a54:	f7fd fa9c 	bl	8002f90 <HAL_RCCEx_GetPeriphCLKFreq>
 8005a58:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8005a5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d021      	beq.n	8005aa4 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a64:	4a1a      	ldr	r2, [pc, #104]	@ (8005ad0 <UART_SetConfig+0x3d8>)
 8005a66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a6e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	085b      	lsrs	r3, r3, #1
 8005a78:	441a      	add	r2, r3
 8005a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a86:	2b0f      	cmp	r3, #15
 8005a88:	d909      	bls.n	8005a9e <UART_SetConfig+0x3a6>
 8005a8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a90:	d205      	bcs.n	8005a9e <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	60da      	str	r2, [r3, #12]
 8005a9c:	e002      	b.n	8005aa4 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005abc:	2200      	movs	r2, #0
 8005abe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005ac0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3750      	adds	r7, #80	@ 0x50
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ace:	bf00      	nop
 8005ad0:	08005fa8 	.word	0x08005fa8

08005ad4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae0:	f003 0308 	and.w	r3, r3, #8
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00a      	beq.n	8005afe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	430a      	orrs	r2, r1
 8005afc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b02:	f003 0301 	and.w	r3, r3, #1
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00a      	beq.n	8005b20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00a      	beq.n	8005b42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b46:	f003 0304 	and.w	r3, r3, #4
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00a      	beq.n	8005b64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	430a      	orrs	r2, r1
 8005b62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b68:	f003 0310 	and.w	r3, r3, #16
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00a      	beq.n	8005b86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	430a      	orrs	r2, r1
 8005b84:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b8a:	f003 0320 	and.w	r3, r3, #32
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00a      	beq.n	8005ba8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d01a      	beq.n	8005bea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bd2:	d10a      	bne.n	8005bea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00a      	beq.n	8005c0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	605a      	str	r2, [r3, #4]
  }
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b098      	sub	sp, #96	@ 0x60
 8005c1c:	af02      	add	r7, sp, #8
 8005c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c28:	f7fb fa0c 	bl	8001044 <HAL_GetTick>
 8005c2c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0308 	and.w	r3, r3, #8
 8005c38:	2b08      	cmp	r3, #8
 8005c3a:	d12f      	bne.n	8005c9c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c3c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c40:	9300      	str	r3, [sp, #0]
 8005c42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c44:	2200      	movs	r2, #0
 8005c46:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f88e 	bl	8005d6c <UART_WaitOnFlagUntilTimeout>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d022      	beq.n	8005c9c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c5e:	e853 3f00 	ldrex	r3, [r3]
 8005c62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	461a      	mov	r2, r3
 8005c72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c74:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c76:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c7c:	e841 2300 	strex	r3, r2, [r1]
 8005c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1e6      	bne.n	8005c56 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2220      	movs	r2, #32
 8005c8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e063      	b.n	8005d64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0304 	and.w	r3, r3, #4
 8005ca6:	2b04      	cmp	r3, #4
 8005ca8:	d149      	bne.n	8005d3e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005caa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005cae:	9300      	str	r3, [sp, #0]
 8005cb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 f857 	bl	8005d6c <UART_WaitOnFlagUntilTimeout>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d03c      	beq.n	8005d3e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ccc:	e853 3f00 	ldrex	r3, [r3]
 8005cd0:	623b      	str	r3, [r7, #32]
   return(result);
 8005cd2:	6a3b      	ldr	r3, [r7, #32]
 8005cd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	461a      	mov	r2, r3
 8005ce0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ce2:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ce4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ce8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cea:	e841 2300 	strex	r3, r2, [r1]
 8005cee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1e6      	bne.n	8005cc4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	3308      	adds	r3, #8
 8005cfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	e853 3f00 	ldrex	r3, [r3]
 8005d04:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f023 0301 	bic.w	r3, r3, #1
 8005d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	3308      	adds	r3, #8
 8005d14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d16:	61fa      	str	r2, [r7, #28]
 8005d18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1a:	69b9      	ldr	r1, [r7, #24]
 8005d1c:	69fa      	ldr	r2, [r7, #28]
 8005d1e:	e841 2300 	strex	r3, r2, [r1]
 8005d22:	617b      	str	r3, [r7, #20]
   return(result);
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1e5      	bne.n	8005cf6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2220      	movs	r2, #32
 8005d2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e012      	b.n	8005d64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2220      	movs	r2, #32
 8005d42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2220      	movs	r2, #32
 8005d4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3758      	adds	r7, #88	@ 0x58
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	603b      	str	r3, [r7, #0]
 8005d78:	4613      	mov	r3, r2
 8005d7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d7c:	e04f      	b.n	8005e1e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d84:	d04b      	beq.n	8005e1e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d86:	f7fb f95d 	bl	8001044 <HAL_GetTick>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	69ba      	ldr	r2, [r7, #24]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d302      	bcc.n	8005d9c <UART_WaitOnFlagUntilTimeout+0x30>
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d101      	bne.n	8005da0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e04e      	b.n	8005e3e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0304 	and.w	r3, r3, #4
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d037      	beq.n	8005e1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	2b80      	cmp	r3, #128	@ 0x80
 8005db2:	d034      	beq.n	8005e1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	2b40      	cmp	r3, #64	@ 0x40
 8005db8:	d031      	beq.n	8005e1e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	69db      	ldr	r3, [r3, #28]
 8005dc0:	f003 0308 	and.w	r3, r3, #8
 8005dc4:	2b08      	cmp	r3, #8
 8005dc6:	d110      	bne.n	8005dea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2208      	movs	r2, #8
 8005dce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f000 f838 	bl	8005e46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2208      	movs	r2, #8
 8005dda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e029      	b.n	8005e3e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	69db      	ldr	r3, [r3, #28]
 8005df0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005df4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005df8:	d111      	bne.n	8005e1e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005e02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e04:	68f8      	ldr	r0, [r7, #12]
 8005e06:	f000 f81e 	bl	8005e46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2220      	movs	r2, #32
 8005e0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e00f      	b.n	8005e3e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	69da      	ldr	r2, [r3, #28]
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	4013      	ands	r3, r2
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	bf0c      	ite	eq
 8005e2e:	2301      	moveq	r3, #1
 8005e30:	2300      	movne	r3, #0
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	461a      	mov	r2, r3
 8005e36:	79fb      	ldrb	r3, [r7, #7]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d0a0      	beq.n	8005d7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e46:	b480      	push	{r7}
 8005e48:	b095      	sub	sp, #84	@ 0x54
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e56:	e853 3f00 	ldrex	r3, [r3]
 8005e5a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	461a      	mov	r2, r3
 8005e6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e6e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e74:	e841 2300 	strex	r3, r2, [r1]
 8005e78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1e6      	bne.n	8005e4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	3308      	adds	r3, #8
 8005e86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e88:	6a3b      	ldr	r3, [r7, #32]
 8005e8a:	e853 3f00 	ldrex	r3, [r3]
 8005e8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e96:	f023 0301 	bic.w	r3, r3, #1
 8005e9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	3308      	adds	r3, #8
 8005ea2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ea4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005eaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005eac:	e841 2300 	strex	r3, r2, [r1]
 8005eb0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d1e3      	bne.n	8005e80 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d118      	bne.n	8005ef2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	e853 3f00 	ldrex	r3, [r3]
 8005ecc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	f023 0310 	bic.w	r3, r3, #16
 8005ed4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	461a      	mov	r2, r3
 8005edc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ede:	61bb      	str	r3, [r7, #24]
 8005ee0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee2:	6979      	ldr	r1, [r7, #20]
 8005ee4:	69ba      	ldr	r2, [r7, #24]
 8005ee6:	e841 2300 	strex	r3, r2, [r1]
 8005eea:	613b      	str	r3, [r7, #16]
   return(result);
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1e6      	bne.n	8005ec0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2220      	movs	r2, #32
 8005ef6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005f06:	bf00      	nop
 8005f08:	3754      	adds	r7, #84	@ 0x54
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr

08005f12 <memset>:
 8005f12:	4402      	add	r2, r0
 8005f14:	4603      	mov	r3, r0
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d100      	bne.n	8005f1c <memset+0xa>
 8005f1a:	4770      	bx	lr
 8005f1c:	f803 1b01 	strb.w	r1, [r3], #1
 8005f20:	e7f9      	b.n	8005f16 <memset+0x4>
	...

08005f24 <__libc_init_array>:
 8005f24:	b570      	push	{r4, r5, r6, lr}
 8005f26:	4d0d      	ldr	r5, [pc, #52]	@ (8005f5c <__libc_init_array+0x38>)
 8005f28:	2600      	movs	r6, #0
 8005f2a:	4c0d      	ldr	r4, [pc, #52]	@ (8005f60 <__libc_init_array+0x3c>)
 8005f2c:	1b64      	subs	r4, r4, r5
 8005f2e:	10a4      	asrs	r4, r4, #2
 8005f30:	42a6      	cmp	r6, r4
 8005f32:	d109      	bne.n	8005f48 <__libc_init_array+0x24>
 8005f34:	4d0b      	ldr	r5, [pc, #44]	@ (8005f64 <__libc_init_array+0x40>)
 8005f36:	2600      	movs	r6, #0
 8005f38:	4c0b      	ldr	r4, [pc, #44]	@ (8005f68 <__libc_init_array+0x44>)
 8005f3a:	f000 f817 	bl	8005f6c <_init>
 8005f3e:	1b64      	subs	r4, r4, r5
 8005f40:	10a4      	asrs	r4, r4, #2
 8005f42:	42a6      	cmp	r6, r4
 8005f44:	d105      	bne.n	8005f52 <__libc_init_array+0x2e>
 8005f46:	bd70      	pop	{r4, r5, r6, pc}
 8005f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f4c:	3601      	adds	r6, #1
 8005f4e:	4798      	blx	r3
 8005f50:	e7ee      	b.n	8005f30 <__libc_init_array+0xc>
 8005f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f56:	3601      	adds	r6, #1
 8005f58:	4798      	blx	r3
 8005f5a:	e7f2      	b.n	8005f42 <__libc_init_array+0x1e>
 8005f5c:	08005fc8 	.word	0x08005fc8
 8005f60:	08005fc8 	.word	0x08005fc8
 8005f64:	08005fc8 	.word	0x08005fc8
 8005f68:	08005fcc 	.word	0x08005fcc

08005f6c <_init>:
 8005f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f6e:	bf00      	nop
 8005f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f72:	bc08      	pop	{r3}
 8005f74:	469e      	mov	lr, r3
 8005f76:	4770      	bx	lr

08005f78 <_fini>:
 8005f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f7a:	bf00      	nop
 8005f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f7e:	bc08      	pop	{r3}
 8005f80:	469e      	mov	lr, r3
 8005f82:	4770      	bx	lr
